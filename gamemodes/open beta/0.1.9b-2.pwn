/* ------  GAMEMODE INCLUDES ------- */
#include <open.mp>
#include <sscanf2>
#include <streamer>
#include <zcmd>
#include <foreach>
#include <a_mysql>
#include <string_new>
#include <crashdetect>
#include <compat>

/* ------  MAPPING INCLUDES ------- */
#include "Maps/RemoveBuildings.pwn"
#include "Maps/Maps.pwn"

/* ------ SERVER STATIC INFORMATION ------- */
new 		MySQL:connection 	= MYSQL_INVALID_HANDLE;

#define 	SERVER_NAME 		"Open Roleplay - New Release Open.mp"
#define 	SERVER_VERSION 		"0.1.9b-2"
#define     SERVER_MODE         "Roleplay"
#define 	SERVER_MAPNAME  	"Los Santos"

#define 	SQL_SERVER 			"localhost"
#define 	SQL_USER 			"root"
#define 	SQL_PASSWORD 		""
#define 	SQL_DB 				"openroleplay"

/* ------ SERVER GENERAL INFORMATION ------- */

#define 	SERVER_INT_WEATHER 	"1"
#define 	SERVER_INT_TIME 	"12"
#define     SERVER_BANK_INTREST "5%"

#define 	PI 						3.14159265358979323846
	
#define 	MAX_DOORS       		200
#define 	MAX_HOUSES       		200
#define     MAX_FACTIONS            20
#define     MAX_BUSINESSES          200
#define 	MAX_PLANTS				50
#define     MAX_PLAYER_HOUSES       2
#define     MAX_PLAYER_BUSINESSES   2
#define     MAX_PLAYER_HOTELS       1
#define     MAX_PLAYER_HP_LEVEL     10
#define     MAX_CRIMES              5000
#define     MAX_PHONE_NUMBERS       5000
#define     MAX_BILLS               5000
#define     MAX_LOANS               500
#define		MAX_ALLOWED_DISTANCE	5000
#define		MAX_BOLOS				10
#define		MAX_APPLICATIONS		20

/* ------ GENERAL INFORMATION ------- */
#define 	COLOR_WHITE  		0xFFFFFFFF
#define		COLOR_GREY			0xD2D2D2FF
#define 	COLOR_RED   		0xFF323200
#define 	COLOR_LIGHTRED 		0xF08080FF
#define 	COLOR_GREEN 		0x56E219FF
#define		COLOR_LIGHTGREEN	0x99D87DFF
#define 	COLOR_ORANGE 		0xFFA500AA
#define 	COLOR_PINK 			0xFA2C71AA
#define 	COLOR_YELLOW 		0xF2F746AA
#define 	COLOR_LIME 			0x72F70CAA
#define 	COLOR_PURPLE 		0xC2A2DAAA
#define 	COLOR_FADE1 		0xFFFFFFFF
#define 	COLOR_FADE2 		0xC8C8C8C8
#define 	COLOR_FADE3 		0xAAAAAAAA
#define 	COLOR_FADE4 		0x8C8C8C8C
#define 	COLOR_FADE5 		0x6E6E6E6E
#define 	COLOR_AQUABLUE  	0x7FFFD4FF
#define 	COLOR_LIGHTBLUE		0x57B7DCFF
#define 	COLOR_SEAGREEN 		0x2E8B57FF
#define 	COLOR_LIGHTSEAGREEN 0x20B2AAFF
#define 	COLOR_CORAL 		0xFF7F50FF

#define		COLOR_TIP			0xA9C4E4AA
#define		COLOR_ACTION		0x47BFFFAA

#define SendPlayerTipMessage(%0,%1) \
	SendClientMessage(%0, COLOR_TIP, "TIP: "%1)

#define SendPlayerServerMessage(%0,%1) \
	SendClientMessage(%0, COLOR_ORANGE, "[SERVER]:{FFFFFF} "%1)

#define SendPlayerErrorMessage(%0,%1) \
	SendClientMessage(%0, COLOR_PINK, "[ERROR]:{FFFFFF} "%1)
	
#define SendGlobalServerMessage(%1) \
	SendClientMessageToAll(COLOR_ORANGE, "[GLOBAL SERVER]:{FFFFFF} "%1)
	
#define SendGlobalErrorMessage(%1) \
	SendClientMessageToAll(COLOR_PINK, "[GLOBAL ERROR]:{FFFFFF} "%1)
	
#define HOLDING(%0) \
((newkeys & (%0)) == (%0))

#define 	DIALOG_LOGIN				1
#define 	DIALOG_REGISTER				2
#define 	DIALOG_REGISTER_EMAIL   	3
#define 	DIALOG_REGISTER_AGE     	4
#define 	DIALOG_REGISTER_SEX     	5
#define 	DIALOG_REGISTER_BP      	6
#define 	DIALOG_REGISTER_END     	7
#define		DIALOG_BAN_MSG				9

#define 	DIALOG_GUIDE_LIST     		10
#define 	DIALOG_GUIDE_JOBS     		11
#define 	DIALOG_GUIDE_FACTIONS  		12
#define 	DIALOG_GUIDE_COMMANDS  		13
#define 	DIALOG_GUIDE_VEHICLES  		14
#define 	DIALOG_GUIDE_HOUSES    		15
#define 	DIALOG_GUIDE_ADMINS    		16

#define		DIALOG_RENTAL_CAR			17

#define     DIALOG_COMMANDS_MAIN    	20
#define     DIALOG_COMMANDS_GENERAL 	21
#define     DIALOG_COMMANDS_FACTION 	22
#define     DIALOG_COMMANDS_HOUSE   	23
#define     DIALOG_COMMANDS_BIZZ    	24
#define     DIALOG_COMMANDS_JOB	    	25
#define     DIALOG_COMMANDS_ADMIN   	26
#define		DIALOG_COMMANDS_VIP			27

#define		DIALOG_LOCKER_VIP			30

#define     DIALOG_PLAYER_STATS     	40
#define     DIALOG_PLAYER_STATS_MORE   	41
#define     DIALOG_PLAYER_SKINS         42
#define     DIALOG_PLAYER_POCKETS       43
#define		DIALOG_PLAYER_SHOP_SKIN		44

#define     DIALOG_BANK_REGISTER    	50
#define     DIALOG_BANK_LOGIN       	51
#define     DIALOG_BANK_MENU     		52
#define     DIALOG_BANK_ACCOUNT     	53
#define     DIALOG_BANK_BUSINESS    	54
#define     DIALOG_BANK_STOCK	    	55
#define     DIALOG_BANK_CLOSE	    	56
#define		DIALOG_BANK_AWITHDRAW   	57
#define     DIALOG_BANK_ADEPOSIT    	58

#define     DIALOG_MDC_MENU         	60
#define     DIALOG_MDC_PLAYER_SEARCH 	61
#define     DIALOG_MDC_PLAYER_RESULTS   62
#define     DIALOG_MDC_VEHICLE_SEARCH   63
#define     DIALOG_MDC_VEHICLE_RESULTS  64
#define		DIALOG_MDC_BOLOS			65
#define		DIALOG_CRIME_CHECK			66

#define     DIALOG_LSPD_SEARCH          70
#define     DIALOG_LSPD_SEARCH_RESULTS  71

#define 	DIALOG_COINS_PERKS			80
#define		DIALOG_CITY_HELP			81

#define     DIALOG_SHOP_ROB_KNIFE       94
#define     DIALOG_SHOP_ROB_9MM		    95
#define     DIALOG_SHOP_ROB_SHOTGUN     96
#define     DIALOG_SHOP_ROB_AK-47	    97
#define     DIALOG_SHOP_ROB_RIFLE	    98
#define     DIALOG_SHOP_ROB_SRIFLE	    99
#define     DIALOG_PHONEBOOK_NUMBERS    100

#define     DIALOG_GPS_MAIN             110
#define     DIALOG_GPS_TOP              111
#define     DIALOG_GPS_FACTIONS         112
#define     DIALOG_GPS_JOBS             113

#define     DIALOG_DEALERSHIP_1_MAIN    120
#define     DIALOG_DEALERSHIP_1_SELECT  121
#define     DIALOG_DEALERSHIP_2_MAIN    122
#define     DIALOG_DEALERSHIP_2_SELECT  123
#define     DIALOG_DEALERSHIP_3_MAIN    124
#define     DIALOG_DEALERSHIP_3_SELECT  125

#define     DIALOG_BANK_FAC_LOGIN       130
#define     DIALOG_BANK_FAC_LOANS       131
#define     DIALOG_BANK_FAC_LOAN_INFO   132
#define     DIALOG_BANK_FAC_LOAN_STAT   133
#define     DIALOG_BANK_FAC_APPROVAL    134
#define     DIALOG_BANK_FAC_REJECTION   135
#define     DIALOG_BANK_FAC_NOLOANS     136
#define     DIALOG_BANK_FAC_END         137
#define		DIALOG_BANK_FAC_LENDP		138
#define		DIALOG_BANK_FAC_ENDR		139
#define     DIALOG_BANK_LOAN_AMOUNT     140
#define     DIALOG_BANK_LOAN_REASON     141
#define     DIALOG_BANK_LOAN_SUBM       142
#define     DIALOG_BANK_VIEW_LOANS      143

#define     DIALOG_JOB_VIEW             150
#define		DIALOG_PIZZA_END			151

#define     DIALOG_LICENSE_VIEW         160

#define		DIALOG_LSPD_LOCKER			170
#define		DIALOG_LSPD_OUTFIT_1		171
#define		DIALOG_LSPD_OUTFIT_2		172
#define		DIALOG_LSPD_OUTFIT_3		173
#define		DIALOG_LSPD_OUTFIT_4		174
#define		DIALOG_LSPD_WEAPON_1		175
#define		DIALOG_LSFD_LOCKER			176
#define		DIALOG_LSFD_OUTFIT_1		177
#define		DIALOG_LSFD_OUTFIT_2		178
#define		DIALOG_LSFD_OUTFIT_3		179
#define		DIALOG_LSMC_LOCKER			180
#define		DIALOG_LSMC_OUTFIT_1		181
#define		DIALOG_LSMC_OUTFIT_2		182
#define		DIALOG_LSMC_OUTFIT_3		183

#define     DIALOG_SHOP_TYPE_ONE        200
#define     DIALOG_SHOP_TYPE_TWO        201
#define     DIALOG_SHOP_TYPE_THREE      202
#define     DIALOG_SHOP_TYPE_FOUR      	203
#define     DIALOG_SHOP_TYPE_FIVE      	204
#define     DIALOG_SHOP_TYPE_SIX      	205
#define     DIALOG_SHOP_TYPE_SEVEN      206
#define     DIALOG_SHOP_TYPE_EIGHT      207
#define     DIALOG_SHOP_TYPE_NINE      	208
#define     DIALOG_SHOP_3_MOB           209
#define     DIALOG_SHOP_3_SIM           210
#define 	DIALOG_SHOP_7_WEAPONS  		211
#define 	DIALOG_SHOP_7_EXTRAS  		212
#define		DIALOG_SHOP_3_HOUSE			213

#define		DIALOG_HOUSE_SAFE			220
#define		DIALOG_SAFE_SLOT1			221
#define		DIALOG_SAFE_SLOT2			222
#define		DIALOG_SAFE_SLOT3			223
#define		DIALOG_SAFE_SLOT4			224
#define		DIALOG_SAFE_SLOT5			225
#define		DIALOG_SAFE_SLOT6			226
#define		DIALOG_SAFE_SLOT7			227
#define		DIALOG_SAFE_SLOT8			228
#define		DIALOG_SAFE_SLOT9			229
#define		DIALOG_SAFE_SLOT10			230
#define		DIALOG_SAFE_SLOT1_A			231
#define		DIALOG_SAFE_SLOT2_A			232
#define		DIALOG_SAFE_SLOT3_A			233
#define		DIALOG_SAFE_SLOT4_A			234
#define		DIALOG_SAFE_SLOT5_A			235
#define		DIALOG_SAFE_SLOT6_A			236
#define		DIALOG_SAFE_SLOT7_A			237
#define		DIALOG_SAFE_SLOT8_A			238
#define		DIALOG_SAFE_SLOT9_A			239
#define		DIALOG_SAFE_SLOT10_A		240
#define		DIALOG_SAFE_SLOT1_R			241
#define		DIALOG_SAFE_SLOT2_R			242
#define		DIALOG_SAFE_SLOT3_R			243
#define		DIALOG_SAFE_SLOT4_R			244
#define		DIALOG_SAFE_SLOT5_R			245
#define		DIALOG_SAFE_SLOT6_R			246
#define		DIALOG_SAFE_SLOT7_R			247
#define		DIALOG_SAFE_SLOT8_R			248
#define		DIALOG_SAFE_SLOT9_R			249
#define		DIALOG_SAFE_SLOT10_R		250

#define		DIALOG_SPRAY_PAINT			251
#define		DIALOG_SPRAY_CONFIRM		252
#define		DIALOG_TRANSFENDER			253
#define		DIALOG_TRANSFEN_REPAIR		254
#define		DIALOG_TRANSFEN_LOCK		255
#define		DIALOG_LICENSE_PLATE		256
#define 	DIALOG_PLATE_CHANGE			257

#define		DIALOG_FACTION_APP_VIEW		260
#define		DIALOG_FACTION_APP_DET		261

#define		DIALOG_OPEN_BETA			270
#define		DIALOG_SERVER_RULES			271

#define		DIALOG_DRUG_SELECTION		300
#define		DIALOG_BUILD_WEAPON			310

#define 	TRUCK_VEHICLE_MODELS_COUNT 	15
#define 	MOTORCYCLE_MODELS_COUNT 	9
#define 	AIRCRAFT_MODELS_COUNT 		18
#define 	BOAT_MODELS_COUNT 			10

#define 	SKIN_COUNT 					(sizeof(cheapSkins) / sizeof(cheapSkins[0]))

new truckVehicleModels[TRUCK_VEHICLE_MODELS_COUNT] = {403, 406, 407, 408, 414, 433, 443, 455, 456, 514, 515, 524, 544, 578};
new motorcycleModels[MOTORCYCLE_MODELS_COUNT] = {461, 462, 463, 468, 471, 521, 522, 523, 581};
new aircraftModels[AIRCRAFT_MODELS_COUNT] = {593, 592, 577, 553, 520, 519, 513, 512, 511, 497, 488, 487, 476, 469, 460, 447, 425, 417};
new boatModels[BOAT_MODELS_COUNT] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595};

// SERVER ITEMS ENUMS //

enum SkinData
{
	ID,
	SkinID,
	SkinMoney,
	SkinCoin,
	SkinType,
	SkinName[32]
};
new PurcasheableSkins[31][SkinData] = {
    {1, 4, 50, 2, 1, "Big Bear"},
    {2, 6, 50, 2, 1, "Emmet"},
    {3, 7, 50, 2, 1, "Taxi Driver"},
    {4, 8, 50, 2, 1, "Janitor"},
    {5, 13, 50, 2, 1, "Street Girl"},
    {6, 14, 50, 2, 1, "Mori PED"},
    {7, 15, 50, 2, 1, "Most PED"},
    {8, 28, 50, 2, 1, "Drug Dealer 1"},
    {9, 30, 50, 2, 1, "Drug Dealer 2"},
    {10, 41, 50, 2, 1, "Fyst PED"},
    {11, 44, 50, 2, 1, "Old PED"},
    {12, 46, 50, 2, 1, "Myri PED 1"},
    {13, 47, 50, 2, 1, "Mycr PED"},
    {14, 48, 50, 2, 1, "Myst PED 1"},
    {15, 56, 50, 2, 1, "Ofyst PED"},
    {16, 65, 50, 2, 1, "Kendl"},
    {17, 86, 50, 2, 1, "Ryder"},
    {18, 98, 50, 2, 1, "Myri PED 2"},
    {19, 101, 50, 2, 1, "Myst PED 2"},
    {20, 102, 50, 2, 1, "Ballas 1"},
    {21, 103, 50, 2, 1, "Ballas 2"},
    {22, 104, 50, 2, 1, "Ballas 3"},
    {23, 105, 50, 2, 1, "Grove 1"},
    {24, 106, 50, 2, 1, "Grove 2"},
    {25, 107, 50, 2, 1, "Grove 3"},
    {26, 108, 50, 2, 1, "Vagos 1"},
    {27, 109, 50, 2, 1, "Vagos 2"},
    {28, 110, 50, 2, 1, "Vagos 3"},
    {29, 114, 50, 2, 1, "Aztecs 1"},
    {30, 115, 50, 2, 1, "Aztecs 2"},
    {31, 116, 50, 2, 1, "Aztecs 3"}
};

enum playerInfo
{
	Account_ID,
	Account_Email[129],
	Account_IP,
    Character_Name[MAX_PLAYER_NAME],
    Character_Password[129],
    Character_Registered,
    Character_Age,
    Character_Sex[129],
    Character_Birthplace[129],
    Character_Skin_1,
    Character_Skin_2,
    Character_Skin_3,
    Character_Skin_Logout,
	Character_Last_Login[11],
	Character_Hour,
	Character_Minutes,
	Character_Ban,
	Float:Character_Health,
	Float:Character_Armor,
	Character_Job,
    Character_Faction,
    Character_Faction_Rank,
    Character_Faction_Join_Request,
    Character_Faction_Ban,
	Character_Money,
	Character_Coins,
	Character_Bank_Account,
	Character_Bank_Money,
	Character_Bank_Pin[129],
	Character_Bank_Loan,
	Character_VIP,
	Character_VIP_Exp[11],
    Float:Character_Pos_X,
    Float:Character_Pos_Y,
    Float:Character_Pos_Z,
    Float:Character_Pos_Angle,
    Character_Interior_ID,
    Character_Virtual_World,
    Character_House_ID_1,
	Character_House_ID_2,
    Character_Total_Houses,
    Character_Owns_Faction,
    Character_Business_ID_1,
	Character_Business_ID_2,
    Character_Total_Businesses,
	Character_Level,
	Character_Level_Exp,
	Character_Ticket_Amount,
	Character_Total_Ticket_Amount,
	Character_Jail,
	Character_Jail_Time,
	Character_Jail_Reason[50],
	Character_Last_Crime[50],
	Moderator_Level,
	Helper_Level,
	Admin_Level,
	Admin_Level_Exp,
	Admin_Jail,
	Admin_Jail_Time,
	Admin_Jail_Reason[50],
	Weapon_Slot_1,
	Weapon_Slot_2,
	Weapon_Slot_3,
	Weapon_Slot_4,
	Weapon_Slot_5,
	Weapon_Slot_6,
	Ammo_Slot_1,
	Ammo_Slot_2,
	Ammo_Slot_3,
	Ammo_Slot_4,
	Ammo_Slot_5,
	Ammo_Slot_6,
	Character_Radio,
	Character_License_Car,
	Character_License_Truck,
	Character_License_Motorcycle,
	Character_License_Boat,
	Character_License_Flying,
	Character_License_Firearms,
	Character_Drug_Cocaine,
	Character_Drug_Heroin,
	Character_Drug_Weed,
	Character_Has_Rope,
	Character_Has_Fuelcan,
	Character_Has_Lockpick,
	Character_Has_Drugs,
	Character_Has_Metal,
	Character_Has_Parts,
	Character_Has_Gunpowder,
	Character_Has_Food,
	Character_Has_Drinks,
	Character_Has_Alcohol,
	Character_Has_Device,
	Character_Has_Phone,
	Character_Has_Mask,
	Character_Has_Blindfold,
	Character_Phonenumber,
	Character_Has_SimCard,
	Character_Hotel_ID,
	Float:Hotel_Character_Pos_X,
    Float:Hotel_Character_Pos_Y,
    Float:Hotel_Character_Pos_Z,
    Float:Hotel_Character_Pos_Angle,
    Hotel_Character_Interior_ID,
    Hotel_Character_Virtual_World,
    Character_Total_Vehicles,
	Character_House_Lock,
	Character_House_Alarm,
	Character_House_Safe
};
new PlayerData[MAX_PLAYERS][playerInfo];

enum loanInfo
{
	Loan_ID,
	Loan_Name[50],
	Loan_Amount,
	Loan_Reason[50],
	Loan_Status
};
new LoanData[MAX_LOANS][loanInfo];

enum weedInfo
{
	Weed_ID,
	Weed_Pickup_ID,
	Weed_Model_ID,
	Float:Weed_Pos_X,
	Float:Weed_Pos_Y,
	Float:Weed_Pos_Z,
	Weed_Alive,
	Weed_Cut
}
new WeedData[MAX_PLANTS][weedInfo];

enum factionInfo
{
	Faction_ID,
	Faction_Name[20],
	Faction_Rank_1[20],
	Faction_Rank_2[20],
	Faction_Rank_3[20],
	Faction_Rank_4[20],
	Faction_Rank_5[20],
	Faction_Rank_6[20],
	Faction_Join_Requests,
	Float:Faction_Icon_X,
	Float:Faction_Icon_Y,
	Float:Faction_Icon_Z,
	Faction_Pickup_ID_Outside,
	Faction_Owner[50],
	Faction_Price_Money,
	Faction_Price_Coins,
	Faction_Sold,
	Faction_Money
};
new FactionData[MAX_FACTIONS][factionInfo];

enum businessInfo
{
	Business_ID,
	Business_Price_Money,
	Business_Price_Coins,
	Business_Sold,
	Business_Owner[50],
	Business_Name[50],
	Business_Type,
	Business_Alarm,
	Business_Value,
	Business_Robbed,
	Business_Robbed_Value,
	Business_Pickup_ID_Outside,
	Business_Pickup_ID_Inside,
	Float:Business_Inside_X,
	Float:Business_Inside_Y,
	Float:Business_Inside_Z,
	Float:Business_Inside_A,
	Business_Inside_Interior,
	Business_Inside_VW,
	Float:Business_Outside_X,
	Float:Business_Outside_Y,
	Float:Business_Outside_Z,
	Float:Business_Outside_A,
	Business_Outside_Interior,
	Business_Outside_VW,
	Float:Business_BuyPoint_X,
	Float:Business_BuyPoint_Y,
	Float:Business_BuyPoint_Z
};
new BusinessData[MAX_BUSINESSES][businessInfo];

enum houseInfo
{
	House_ID,
	House_Price_Money,
	House_Price_Coins,
	House_Sold,
	House_Owner[50],
	House_Address[150],
	House_Alarm,
	House_Lock,
	House_Robbed,
	House_Robbed_Value,
	House_Pickup_ID_Outside,
	House_Pickup_ID_Inside,
	Float:House_Spawn_X,
	Float:House_Spawn_Y,
	Float:House_Spawn_Z,
	Float:House_Spawn_A,
	House_Spawn_Interior,
	House_Spawn_VW,
	Float:House_Inside_X,
	Float:House_Inside_Y,
	Float:House_Inside_Z,
	Float:House_Inside_A,
	House_Inside_Interior,
	House_Inside_VW,
	Float:House_Outside_X,
	Float:House_Outside_Y,
	Float:House_Outside_Z,
	Float:House_Outside_A,
	House_Outside_Interior,
	House_Outside_VW,
	House_Preset_Type,
	House_Alarm_Active,
	House_Lock_Active,
	House_Inventory_Safe,
	House_Inventory_Cocaine,
	House_Inventory_Heroin,
	House_Inventory_Weed,
	House_Inventory_Rope,
	House_Inventory_Lockpick,
	House_Inventory_Drugs,
	House_Inventory_Metal,
	House_Inventory_Parts,
	House_Inventory_Gunpowder,
	House_Inventory_Device
};
new HouseData[MAX_HOUSES][houseInfo];

enum doorInfo
{
	Door_ID,
	Door_Faction,
	Door_Description[50],
	Door_Pickup_ID_Outside,
	Door_Pickup_ID_Inside,
	Float:Door_Inside_X,
	Float:Door_Inside_Y,
	Float:Door_Inside_Z,
	Float:Door_Inside_A,
	Door_Inside_Interior,
	Door_Inside_VW,
	Float:Door_Outside_X,
	Float:Door_Outside_Y,
	Float:Door_Outside_Z,
	Float:Door_Outside_A,
	Door_Outside_Interior,
	Door_Outside_VW
};
new DoorData[MAX_DOORS][doorInfo];

enum vehicleInfo
{
	Vehicle_ID,
	Vehicle_Faction,
	Vehicle_Job,
	Vehicle_Owner[50],
	Vehicle_Used,
	Vehicle_Model,
	Vehicle_Color_1,
	Vehicle_Color_2,
	Float:Vehicle_Spawn_X,
	Float:Vehicle_Spawn_Y,
	Float:Vehicle_Spawn_Z,
	Float:Vehicle_Spawn_A,
	Vehicle_Spawn_Interior,
	Vehicle_Spawn_VW,
	Vehicle_Lock,
	Vehicle_Alarm,
	Vehicle_GPS,
	Vehicle_License_Plate[10],
	Vehicle_Fuel,
	Vehicle_Type,
	Vehicle_Lock_Status,
	Vehicle_Alarm_Status
};
new VehicleData[MAX_VEHICLES][vehicleInfo];

// GENERAL SCRIPT REFERENCES.0

new VehicleModelNames[][] = {
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perennial", "Sentinel", "Dumper", "Fire Truck", "Trashmaster", "Stretch", "Manana",
	"Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat",
	"Mr. Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife",
	"Articulated Trailer", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo",
	"Seasparrow", "Pizzaboy", "Tram", "Articulated Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
	"Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow",
	"Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX", "Burrito",
	"Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring Racer",
	"Sandking", "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B",
	"Bloodring Banger", "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker",
	"Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Towtruck", "Fortune",
	"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine Harvester", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Brown Streak",
	"Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Fire Truck Ladder", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit",
	"Utility Van", "Nevada", "Yosemite", "Windsor", "Monster A", "Monster B", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance",
	"RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway",
	"Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400", "Newsvan", "Tug", "Tanker Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog",
	"Club", "Freight Box", "Articulated Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "Police (LS)", "Police (SF)",
	"Police (LV)", "Ranger", "Picador", "S.W.A.T.", "Alpha", "Phoenix", "Glendale (Damaged)", "Sadler (Damaged)", "Baggage Box A",
	"Baggage Box B", "Tug Stairs", "Boxville", "Farm Trailer", "Utility Trailer"
};

new RandomMessages[][] = {
    "{F2F746}***{A9C4E4} Are you stuck in a spot and can't get out. Use /unstuck! staff will be advised everytime {F2F746}***{FFFFFF}",
    "{F2F746}***{A9C4E4} Did you know we have an impound lot where the police or tow company can store your cars {F2F746}***{FFFFFF}",
    "{F2F746}***{A9C4E4} To view all server commands, type /commands {F2F746}***{FFFFFF}",
    "{F2F746}***{A9C4E4} To get help from the staff team you can use /assistance or /helpme with a question {F2F746}***{FFFFFF}",
	"{F2F746}***{A9C4E4} Did you see someone do something wrong? Just /report them to the staff team {F2F746}***{FFFFFF}",
    "{F2F746}***{A9C4E4} Did you know that you can steal cop cars in this server? Just use /hotwire {F2F746}***{FFFFFF}",
    "{F2F746}***{A9C4E4} Can't see door information? Walk into the icon to see the information {F2F746}***{FFFFFF}",
    "{F2F746}***{A9C4E4} Did you know that you can use /coins to get special treatment? {F2F746}***{FFFFFF}"
};

new Float:DutyPickups[][] =
{
	{254.2574,76.7777,1003.6406}, // /DUTY LSPD ICON
	{2051.0803,-1842.6533,13.5633}, // /DUTY MECHANIC ICON
	{1780.0322,-1693.6436,16.7503}, // /DUTY LSFD ICON
	{-196.6845,-1751.1202,675.7687}, // /DUTY LSMC ICON
	{1511.0210,-1464.6028,9.5000}, // TOWING DUTY POINT
	{618.3365,-76.9667,997.9922} // Dudefix Duty Point
};

new Float:InfoPickups[][] =
{
	{1729.2441,-1861.3646,13.5776}, // /TUTORIALICON
	{1753.2698,-1862.1169,13.5767}, // /RENTCAR ICON
	{1735.1765,-1861.2561,13.5777}, // /GUIDE ICON
	{2054.3008,-1842.2689,13.5633}, // /TOOLS ICON
	{1783.4768,-1694.1383,16.7503}, // /FIREEX LSFD ICON
	{708.7531,392.6225,1023.5939}, // CITY HALL
	{254.4943,85.0860,1002.4453}, // Arrest Point
	{2164.5356,1600.1710,999.9771}, // Bank Desk Location
	{2409.5278,-1426.0397,23.9829}, // Recycle Point
	{1544.5784,-1670.9464,13.5587}, // LSPD Join Point
	{1755.8239,-1720.1548,13.3870}, // LSFD Join Point
	{1178.3011,-1328.0625,14.1133}, // LSMC Join Point
	{1376.2294,-1423.9144,13.5768}, // Driving School Icon
	{2102.2109,-1789.1084,13.5547}, // Pizza Delivery Job
	{992.1449,-1454.0868,13.5469}, // Electrician Job
	{2201.1582,-1974.1382,13.5576}, // Garbage Job
	{1810.1023,-1897.4574,13.5791}, // Taxi Job
	{-2653.3381,1408.3373,906.2771} // Locker VIP Position
};

new Float:PoliceJailSpawns[3][3] =
{
	{264.4284,86.5077,1001.0391}, // Jail Slot 1
	{264.6077,86.6181,1001.0391}, // Jail Slot 2
	{264.6636,77.7305,1001.0391} // Jail Slot 3
};

new Float:ElectricianJob1[7][3] = // Light repairs
{
	{1043.7421,-1314.6869,13.5469},
	{1072.5300,-1135.9929,23.6567}, 
	{1170.9996,-1154.6633,23.8281},
	{1349.3269,-1131.0897,23.8281},
	{1337.2238,-1384.0043,13.6867}, 
	{1468.9659,-1446.8481,13.5469},
	{1442.4681,-1738.3464,13.5469}
};

new Float:ElectricianJob2[3][3] = // Booth repairs
{
	{1243.1849,-1353.0072,13.1191},
	{1218.8081,-1332.3127,13.1191}, 
	{1220.8812,-1293.5743,13.1191}
};

new Float:ElectricianJob3[4][3] = // Pump repairs
{
	{999.0402,-938.5069,42.1797},
	{1008.3923,-937.2753,42.1797}, 
	{1942.9371,-1768.0228,13.4234},
	{1942.9386,-1778.5195,13.4234}
};

new Float:GoodTransport[6][3] = // Trucking Company Job 2
{
	{1917.3206,-1790.6208,14.0057},
	{2087.3677,-1798.0833,13.9812}, 
	{2076.4680,-1869.7418,14.0329},
	{2390.7405,-1920.5562,13.9830}, 
	{1321.0204,-861.1671,40.1719},
	{700.3917,-450.9825,16.9357}
};

new Float:DrugDealerActorLocations[3][4] =
{
	{1410.8561,-1299.9906,13.5482,237.8926},
	{1115.1992,-1101.5356,25.7899,322.1172},
	{759.2241,-1816.9330,13.0234,33.8473}
};

new Float:DealershipOneParks[6][4] =
{
	{962.9628,-1542.8658,13.3569,269.9742}, 
	{974.2844,-1542.8656,13.3593,269.9742}, 
	{986.2587,-1542.8741,13.3619,269.9742},
	{983.9670,-1523.7238,13.3191,179.7765}, 
	{979.8921,-1523.3783,13.3183,179.7765}, 
	{975.6407,-1523.6489,13.3189,179.7765} 
};

new Float:DealershipTwoParks[3][4] =
{
	{957.2658,-1758.7263,13.3788,171.8536},
	{952.3511,-1758.1240,13.3785,173.8608},
	{947.1748,-1757.3601,13.3786,171.9380}
};

new Float:DealershipThreeParks[3][4] =
{
	{1024.6239,-1742.4526,13.5452,269.5414},
	{1025.1648,-1747.8467,13.5451,269.5414},
	{1024.4756,-1744.8911,13.5408,269.5414}
};

new Float:BankDeskLocations[][] =
{
    {2164.5356,1600.1710,999.9771}
};

new Float:LSPDBackupPosition[3];

new bool:GPSOn[MAX_PLAYERS];
new bool:LSFDGateLeftOpen;
new bool:LSFDGateRightOpen;
new bool:LSFDGateBackOpen;
new bool:LSFDGarageDoorOpen;
new bool:LSFDTopDoorOpen;
new bool:MechanicFrontGateOpen;
new bool:BankDoorOpen;
new bool:TowGateOpen;
new bool:JunkYardGateOpen;

new bool:IsPlayerUsingClient[MAX_PLAYERS];

new SERVER_MESSAGE_COUNT;
new VEHICLE_RESPAWN_COUNT;
new SERVER_HOUR;
new SERVER_MINUTE;
new SERVER_SECOND;
new GLOBALCHAT;
new VEHICLEPROCESS;
new HOUSE_ALARM_ID;
new SERVER_XMAS_EVENT;
new SERVER_XMAS_EVENT_TEST;

new SQL_DOOR_NEXTID;
new SQL_HOUSE_NEXTID;
new SQL_FACTION_NEXTID;
new SQL_BUSINESS_NEXTID;
new SQL_BUSINESS_ID;
new SQL_PHONENUMBER_USED;
new SQL_PHONENUMBER_GENERATED;
new SQL_LOAN_ID[MAX_PLAYERS][MAX_LOANS];
new SQL_LOAN_NAME[MAX_PLAYERS][MAX_LOANS];
new SQL_LOAN_AMOUNT[MAX_PLAYERS][MAX_LOANS];
new SelectedLoanID[MAX_PLAYERS];
new SelectedLoanName[MAX_PLAYERS][50];
new SelectedLoanAmount[MAX_PLAYERS];
new SQL_WEED_NEXTID;
new SQL_BOLO_ID[MAX_PLAYERS][MAX_BOLOS];
new SQL_CHARACTER_NAME[MAX_PLAYERS][50];
new SQL_APP_ID[MAX_PLAYERS][MAX_APPLICATIONS];
new SelectedAppID[MAX_PLAYERS];
new SelectedAppName[MAX_PLAYERS][50];

new pickup_Health;
new LSPDJobTimer;
new LSPDJobTimerExp;
new LSFDJobTimer;
new LSFDJobTimerExp;
new MechanicJobTimer;
new MechanicJobTimerExp;
new DudefixJobTimer;
new DudefixJobTimerExp;
new BankRobberyTimer;
new BankRobberyTimerExp;
new LSPDJobHouseInspection;
new LSPDJobHouseInspectionAccepted;
new LSFDJobHouseFire;
new LSFDJobHouseFireAccepted;
new LSFDJobHouseFireID;
new LSFDJobHouseFireHealth;
new MechanicJob;
new MechanicJobAccepted;
new MechanicJobID;
new MechanicJobHealth;
new DudefixJob;
new DudefixJobID;
new DudefixJobAccepted;
new DudefixJobCompleted;
new TornadoTimer;
new DrugTimer;
new DrugActor;
new DrugActorAmountHeld;
new WeaponActor;
new WeaponActorAmountHeld;
new Dancer1Actor;
new Dancer2Actor;
new Dancer3Actor;
new Bar1Actor;

new PerkViewBan[MAX_PLAYERS];
new PerkWeatherMan[MAX_PLAYERS];
new HasPlayerResponded[MAX_PLAYERS];
new HasPlayerTakenDrugs[MAX_PLAYERS];
new HasPlayerTakenMetal[MAX_PLAYERS];
new HasPlayerBuiltWeapon[MAX_PLAYERS];
new HasPlayerFoundGunPowder[MAX_PLAYERS];
new HasPlayerBuiltParts[MAX_PLAYERS];
new HasPlayerBakedDrugs[MAX_PLAYERS];
new DrivingCarPlayer[MAX_PLAYERS];
new DrivingCarCount[MAX_PLAYERS];
new DrivingTruckPlayer[MAX_PLAYERS];
new DrivingTruckCount[MAX_PLAYERS];
new DrivingBikePlayer[MAX_PLAYERS];
new DrivingBikeCount[MAX_PLAYERS];
new TruckJobMoneyStarted;
new TruckJobMoneyPlayer[MAX_PLAYERS];
new TruckJobPlayer[MAX_PLAYERS];
new TruckJobCount[MAX_PLAYERS];
new RouteChosen[MAX_PLAYERS];
new PizzaJobDeliveryPlayer[MAX_PLAYERS];
new PizzaJobDeliveryCount[MAX_PLAYERS];
new GarbageJobPlayer[MAX_PLAYERS];
new GarbageJobCount[MAX_PLAYERS];
new GarbageJobPosition[MAX_PLAYERS];
new ElectricianJobPlayer[MAX_PLAYERS];
new ElectricianJobCount[MAX_PLAYERS];
new MechanicJobPlayer[MAX_PLAYERS];
new DudefixJobPlayer[MAX_PLAYERS];
new LSFDJobHouseFirePlayer[MAX_PLAYERS];
new LSPDJobHouseInpPlayer[MAX_PLAYERS];
new BackupCaller[MAX_PLAYER_NAME];
new IsPlayerLogged[MAX_PLAYERS];
new IsPlayerInHelpMeCooldown[MAX_PLAYERS];
new IsPlayerSpectating[MAX_PLAYERS];
new IsPlayerWaitingHospital[MAX_PLAYERS];
new IsPlayerStealingCar[MAX_PLAYERS];
new IsPlayerStealingCarID[MAX_PLAYERS];
new IsPlayerRentingCar[MAX_PLAYERS];
new IsPlayerMuted[MAX_PLAYERS];
new IsPlayerInjured[MAX_PLAYERS];
new IsPlayerDead[MAX_PLAYERS];
new IsPlayerInHospital[MAX_PLAYERS];
new IsPlayerWeaponBanned[MAX_PLAYERS];
new IsPlayerOnDuty[MAX_PLAYERS];
new IsAdminOnDuty[MAX_PLAYERS];
new IsPlayerTased[MAX_PLAYERS];
new IsPlayerCuffed[MAX_PLAYERS];
new IsPlayerTied[MAX_PLAYERS];
new IsPlayerBlindfolded[MAX_PLAYERS];
new IsPlayerDragged[MAX_PLAYERS];
new IsNewVehicleType[MAX_PLAYERS];
new MechanicFuelAmount[MAX_PLAYERS];
new MechanicToolAmount[MAX_PLAYERS];
new WhoIsDragging[MAX_PLAYERS];
new WhoHasBeenSearched[MAX_PLAYERS];
new WhoIsCalling[MAX_PLAYERS];
new HasPlayerGotShovel[MAX_PLAYERS];
new HasPlayerToggledHelpMe[MAX_PLAYERS];
new HasPlayerFirstSpawned[MAX_PLAYERS];
new HasPlayerRobbedBank[MAX_PLAYERS];
new HasPlayerRobbed247Store[MAX_PLAYERS];
new HasPlayerRobbedSupermarket[MAX_PLAYERS];
new HasPlayerRobbedElectronics[MAX_PLAYERS];
new HasPlayerRobbedAmmunation[MAX_PLAYERS];
new HasPlayerRobbedAmmunationPoint[MAX_PLAYERS];
new HasPlayerConfirmedVehicleID[MAX_PLAYERS];
new HasCallBeenPickedUp[MAX_PLAYERS];
new HasPlayerMadeACall[MAX_PLAYERS];
new HasPlayerToggledOffDirectory[MAX_PLAYERS];
new HasPlayerMadeAnEmergencyCall[MAX_PLAYERS];
new EmergencyCallTypeRequired[MAX_PLAYERS];
new EmergencyCallTypeReason[MAX_PLAYERS];
new HasPlayerMadeRequestCall[MAX_PLAYERS];
new RequestCallType[MAX_PLAYERS];
new RequestCallReason[MAX_PLAYERS];
new CanPlayerBuyVehicle[MAX_PLAYERS];
new PlayerAtDoorID[MAX_PLAYERS];
new PlayerAtHouseID[MAX_PLAYERS];
new PlayerAtFactionID[MAX_PLAYERS];
new PlayerAtBusinessID[MAX_PLAYERS];
new PlayerAtPlantID[MAX_PLAYERS];
new PlayerAtBusinessBuyPointID[MAX_PLAYERS];
new VehicleModelPurchasing[MAX_PLAYERS];
new ApplicationLoanAmount[MAX_PLAYERS];
new IsPlayerInViewState_Binco[MAX_PLAYERS];
new Binco_Current_Outfit[MAX_PLAYERS];
new Binco_New_Outfit[MAX_PLAYERS];
new Binco_Current_VW[MAX_PLAYERS];
new HasPlayerChangedVehicleColour[MAX_PLAYERS];
new HasPlayerEnteredSprayUnit[MAX_PLAYERS];
new HasPlayerRequestAssistance[MAX_PLAYERS];
new Float:SpectateX[MAX_PLAYERS];
new Float:SpectateY[MAX_PLAYERS];
new Float:SpectateZ[MAX_PLAYERS];
new BanName[MAX_PLAYERS][50];
new HasPlayerUsedMask[MAX_PLAYERS];
new FoundPlayerHouseID[MAX_PLAYERS];
new DealershipType[MAX_PLAYERS];
new HasGPSBeenDisabled[MAX_PLAYERS];
new PlayerDefaultPayment[MAX_PLAYERS];
new PlayerSetFreq[MAX_PLAYERS];
new VIPLockerUse[MAX_PLAYERS];
new TutorialStep[MAX_PLAYERS];
new PerkUse[MAX_PLAYERS];
new IsPlayerSeeingTextdraw[MAX_PLAYERS];
new HasPlayerDrawnTaser[MAX_PLAYERS];
new IsTakingTest[MAX_PLAYERS];
new IsPlayerNearPresent[MAX_PLAYERS];
new IsPlayerNearPresentTest[MAX_PLAYERS];
new IsPlayerLookingInSafe[MAX_PLAYERS];

new vcreatemodel[MAX_PLAYERS];
new vcreatec1[MAX_PLAYERS];
new vcreatec2[MAX_PLAYERS];

new Text3D:textLabelID[MAX_PLAYERS];

new Vehicle_Flash[MAX_VEHICLES];

new currentSkinIndex[MAX_PLAYERS];

new LSFDGateLeft;
new LSFDGateRight;
new LSFDGateBack;
new LSFDGarageDoor;
new LSFDTopDoor;
new MechanicFrontGate;
new BankDoor;
new TowGate;
new JunkYardGate;
new PaintSprayDoor;

new LSFDJobHouseFireObject;
new LSFDJobHouseSmokeObject;

new DudeFixObjectOne;
new DudeFixObjectTwo;
new DudeFixObjectThree;
new DudeFixObjectFour;
new DudeFixObjectFive;

new GarbageObject[MAX_PLAYERS];

new TornadoObject1;
new TornadoObject2;
new TornadoObject3;
new TornadoObject4;
new TornadoObject5;
new TornadoObject6;


// TEXTDRAW REFERNCES
new Text:Time;

new PlayerText:LoginTextdraw1;
new PlayerText:LoginTextdraw2;
new PlayerText:LoginTextdraw3;
new PlayerText:LoginTextdraw4;
new PlayerText:LoginTextdraw5;
new PlayerText:LoginTextdraw6;
new PlayerText:TutorialTextdraw1;
new PlayerText:TutorialTextdraw2;
new PlayerText:Notification_Textdraw;
new PlayerText:Store_Textdraw;
new PlayerText:SpeedBoxFuelAmount;
new PlayerText:SpeedBoxFuelTitle;
new PlayerText:SpeedBoxSpeedTitle;
new PlayerText:SpeedBoxSpeedAmount;

// SERVER TIMERS
new Notification_Timer[MAX_PLAYERS];
new Minute_Timer[MAX_PLAYERS];
new DoorEntry_Timer[MAX_PLAYERS];
new Drag_Timer[MAX_PLAYERS];
new Backup_Timer[MAX_PLAYERS];
new Fuel_Timer[MAX_PLAYERS];
new Repair_Timer[MAX_PLAYERS];
new Vehicle_Timer[MAX_PLAYERS];
new Refuel_Timer[MAX_PLAYERS];
new Hospital_Timer[MAX_PLAYERS];
new Hotwire_Timer[MAX_PLAYERS];
new Cooldown_Timer[MAX_PLAYERS];
new CrackDealer_Timer[MAX_PLAYERS];
new MetalDealer_Timer[MAX_PLAYERS];
new DrugUseCooldown_Timer[MAX_PLAYERS];
new DrugBaking_Timer[MAX_PLAYERS];
new VehicleFlash_Timer[MAX_VEHICLES];
new Assistance_Timer[MAX_PLAYERS];
new Tutorial_Timer[MAX_PLAYERS];
new GunPowder_SearchTimer[MAX_PLAYERS];
new GunPowder_Timer[MAX_PLAYERS];
new WeaponPart_Timer[MAX_PLAYERS];
new BuildPart_CooldownTimer[MAX_PLAYERS];
new WeaponBuild_Timer[MAX_PLAYERS];

stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return floatsqroot(floatpower(x2 - x1, 2) + floatpower(y2 - y1, 2) + floatpower(z2 - z1, 2));
}

/*-----------------------------------------------------------------------------
						INITIAL GAMEMODE CODE STARTS HERE
-----------------------------------------------------------------------------*/
main(){}
 
public OnGameModeInit()
{
    SetGameModeText(SERVER_MODE);
	EnableAllAnimations(true);
	
	mysql_log(ERROR | WARNING | INFO);
    connection = mysql_connect(SQL_SERVER, SQL_USER, SQL_PASSWORD, SQL_DB);
    
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_OFF);
	ShowNameTags(true);
	SetNameTagDrawDistance(10.0);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
    ManualVehicleEngineAndLights();
    
    LoadAllMaps();
    LoadDoors();
    LoadHouses();
    LoadBusinesses();
    LoadFactions();
    LoadVehicles();
	LoadPlants();
    
    Time = TextDrawCreate(576.963073, 24.533348, "01:40");
	TextDrawLetterSize(Time, 0.487145, 1.582499);
	TextDrawAlignment(Time, TEXT_DRAW_ALIGN_CENTER);
	TextDrawColour(Time, -1);
	TextDrawSetShadow(Time, 0);
	TextDrawSetOutline(Time, 2);
	TextDrawBackgroundColour(Time, 255);
	TextDrawFont(Time, TEXT_DRAW_FONT_3);
	TextDrawSetProportional(Time, true);
	TextDrawSetShadow(Time, 0);
	
	SERVER_MESSAGE_COUNT = 100;
	VEHICLE_RESPAWN_COUNT = 0;
	SERVER_HOUR = 12;
	SERVER_MINUTE = 00;
	SERVER_SECOND = 00;
	GLOBALCHAT = 1;
	VEHICLEPROCESS = 0;
	SERVER_XMAS_EVENT = 0;
	SERVER_XMAS_EVENT_TEST = 0;
	
	LSPDJobTimer = 0;
	LSFDJobTimer = 0;
	MechanicJobTimer = 0;
	DudefixJobTimer = 0;
	LSPDJobTimerExp = 0;
	LSFDJobTimerExp = 0;
	MechanicJobTimerExp = 0;
	DudefixJobTimerExp = 0;
	BankRobberyTimer = 0;
	BankRobberyTimerExp = 0;
	TornadoTimer = 0;
	DrugTimer = 0;
	Dancer1Actor = 0;
	Dancer2Actor = 0;
	Dancer3Actor = 0;
	Bar1Actor = 0;
	DrugActor = 0;
	DrugActorAmountHeld = 0;
	WeaponActor = 0;
	WeaponActorAmountHeld = 0;
	
	LSFDGateRightOpen = false;
	LSFDGateLeftOpen = false;
	LSFDGateBackOpen = false;
	LSFDGarageDoorOpen = false;
	LSFDTopDoorOpen = false;
	MechanicFrontGateOpen = false;
	BankDoorOpen = false;
	TowGateOpen = false;
	JunkYardGateOpen = false;
	

	for(new i; i<sizeof InfoPickups; i++)
	{
	   AddStaticPickup(1239, 1,InfoPickups[i][0], InfoPickups[i][1], InfoPickups[i][2], -1);
	}
	
	for(new i; i<sizeof DutyPickups; i++)
	{
	   AddStaticPickup(1275, 1,DutyPickups[i][0], DutyPickups[i][1], DutyPickups[i][2], -1);
	}
	
	pickup_Health = CreatePickup(1240, 2, -202.3700,-1743.8785,675.7687, -1);
	
	AddStaticPickup(19523, 1,1498.2710,-1581.8063,13.5498, -1);
	AddStaticPickup(19198, 1,267.2495,304.6546,999.1484+0.1, -1);
	
	CreateDynamicMapIcon(981.7843, -1161.1995, 25.0988, 52, -1, -1, -1, -1, -1); // BANK ICON
	CreateDynamicMapIcon(1175.2267, -1323.9321, 14.3906, 22, -1, -1, -1, -1, -1); // HOSPITAL ICON
	CreateDynamicMapIcon(1520.7346, -1452.2841, 14.2031, 42, -1, -1, -1, -1, -1); // TOW COMPANY ICON
	CreateDynamicMapIcon(1498.1787, -1583.8579, 13.5469, 40, -1, -1, -1, -1, -1); // HOTEL ICON
	CreateDynamicMapIcon(1548.8217, -1675.4998, 14.6926, 30, -1, -1, -1, -1, -1); // LSPD ICON
	CreateDynamicMapIcon(1768.6526, -1706.8606, 13.3870, 20, -1, -1, -1, -1, -1); // LSFD ICON
	CreateDynamicMapIcon(1939.5402, -1773.9280, 13.4234, 56, -1, -1, -1, -1, -1); // GAS STATION ICON
	CreateDynamicMapIcon(2067.5762, -1863.4712, 13.5633, 27, -1, -1, -1, -1, -1); // MECHANIC ICON
	CreateDynamicMapIcon(1409.7009, -2323.2712, 13.5469, 55, -1, -1, -1, -1, -1); // VEHICLE RENTAL ICON
	CreateDynamicMapIcon(1474.6604, -2286.6621, 42.4205, 5, -1, -1, -1, -1, -1); // TERMINAL RENTAL ICON
	CreateDynamicMapIcon(1015.9871,-1550.3489,14.8594, 55, -1, -1, -1, -1, -1); // CHEAP DEALERSHIP ICON
	CreateDynamicMapIcon(942.4840,-1743.0525,13.5546, 55, -1, -1, -1, -1, -1); // LUXARY DEALERSHIP ICON
	CreateDynamicMapIcon(1026.1846,-1771.0203,13.5469, 55, -1, -1, -1, -1, -1); // BIKE DEALERSHIP ICON
	
	LSFDGateRight = CreateDynamicObject(2957, 1771.98523, -1715.84265, 13.96486,   0.00000, 0.00000, 90.00000);
	LSFDGateLeft = CreateDynamicObject(2957, 1771.97620, -1697.25159, 13.96490,   0.00000, 0.00000, 90.00000);
	LSFDGateBack = CreateDynamicObject(2933, 1771.73315, -1687.46606, 14.04362,   0.00000, 0.00000, 270.00000);
	LSFDGarageDoor = CreateDynamicObject(1569, 1775.91125, -1701.51245, 12.24770,   0.00000, 0.00000, 0.00000);
	LSFDTopDoor = CreateDynamicObject(1569, 1782.34351, -1707.03296, 15.71100,   0.00000, 0.00000, 90.00000);
	MechanicFrontGate = CreateDynamicObject(7657, 2073.19141, -1869.90784, 14.24228,   0.00000, 0.00000, 90.00000);
	BankDoor = CreateDynamicObject(2634, 2144.19385, 1627.00122, 994.24762,   0.00000, 0.00000, 180.00000);
	TowGate = CreateDynamicObject(971, 1537.10388, -1451.24597, 15.92345,   0.00000, 0.00000, 180.00000);
	JunkYardGate = CreateDynamicObject(975, 1361.66724, -1467.49048, 13.20197,   0.00000, 0.00000, 75.00000);
	PaintSprayDoor = CreateDynamicObject(6400, 1951.66956, -1984.35400, 10.12055,   0.00000, 0.00000, 0.00000);
	
	new randIndex = random(sizeof(DrugDealerActorLocations));
	DrugActor = CreateActor(29, DrugDealerActorLocations[randIndex][0],DrugDealerActorLocations[randIndex][1],DrugDealerActorLocations[randIndex][2],DrugDealerActorLocations[randIndex][3]);
	Dancer1Actor = CreateActor(152, -2677.8733,1404.9286,906.5703,276.8306);
	Dancer2Actor = CreateActor(178, -2677.1855,1414.8400,906.5734,324.4576);
	Dancer3Actor = CreateActor(205, -2672.1331,1410.3900,906.5703,297.8241);
	Bar1Actor = CreateActor(249, -2655.5923,1409.1685,906.2734,248.3169);
	WeaponActor = CreateActor(29, 2442.0234,-1977.9189,13.5469,300.9444);
	
	ApplyActorAnimation(Dancer1Actor, "LAPDAN3", "LAPDAN_D", 4.1, true, false, false, false, 0);
	ApplyActorAnimation(Dancer2Actor, "LAPDAN3", "LAPDAN_D", 4.1, true, false, false, false, 0);
	ApplyActorAnimation(Dancer3Actor, "LAPDAN3", "LAPDAN_D", 4.1, true, false, false, false, 0);
	ApplyActorAnimation(Bar1Actor, "BAR", "BARman_idle", 4.1, true, false, false, false, 0);
	printf("Actors Created");
	
	DrugTimer = 0;
	DrugActorAmountHeld = 100;
	WeaponActorAmountHeld = 100;
	
	LSPDBackupPosition[0] = 0;
	LSPDBackupPosition[1] = 0;
	LSPDBackupPosition[2] = 0;
	LSPDJobHouseInspection = 0;
	LSPDJobHouseInspectionAccepted = 0;
	LSFDJobHouseFire = 0;
	LSFDJobHouseFireID = 0;
	LSFDJobHouseFireAccepted = 0;
	LSFDJobHouseFireHealth = 0;
	LSFDJobHouseFireObject = 0;
	LSFDJobHouseSmokeObject = 0;
	MechanicJob = 0;
	MechanicJobAccepted = 0;
	MechanicJobID = 0;
	MechanicJobHealth = 0;
	DudefixJob = 0;
	DudefixJobAccepted = 0;
	
	SetTimer("ONE_SECOND_TIMER", 1000, true);
	SetTimer("ONE_MINUTE_TIMER", 60000, true);
	SetTimer("INFO_TEXTDRAW_TIMER", 1000, true);
	
	printf("OnGamemodeInit Functions Established");
	
    return 1;
}
 
public OnGameModeExit()
{
    mysql_close(connection);
    return 1;
}
 
public OnPlayerRequestClass(playerid, classid)
{
	PlayerTextDrawShow(playerid, PlayerText:LoginTextdraw1);
	PlayerTextDrawShow(playerid, PlayerText:LoginTextdraw2);
	PlayerTextDrawShow(playerid, PlayerText:LoginTextdraw3);
	PlayerTextDrawShow(playerid, PlayerText:LoginTextdraw4);
	PlayerTextDrawShow(playerid, PlayerText:LoginTextdraw5);
	PlayerTextDrawShow(playerid, PlayerText:LoginTextdraw6);
	
	TogglePlayerSpectating(playerid, true);
	
	SetPlayerPos(playerid, 2543.0171,-1625.4059,12.0512);
	InterpolateCameraPos(playerid, 2447.9524,-1652.4756,21.9614, 2447.9524,-1652.4756,21.9614, 6000,CAMERA_MOVE);
 	InterpolateCameraLookAt(playerid, 2514.5464,-1673.8757,13.6471, 2514.5464,-1673.8757,13.6471, 6000,CAMERA_MOVE);
 	
 	new query[128];
    GetPlayerName(playerid, PlayerData[playerid][Character_Name], MAX_PLAYER_NAME);
    ClearMessages(playerid);

    mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Name]);
    mysql_tquery(connection, query, "OnAccountCheck", "i", playerid);
    
	return 1;
}
 
public OnPlayerConnect(playerid)
{
	if(strfind(GetName(playerid), "_", true) == -1)
	{
		SendPlayerErrorMessage(playerid, " This is a roleplay server, please pick a roleplay name (Example: Bob_Michaels)!");
		SetTimerEx("KickTimer", 1000, false, "i", playerid);
	}
	
	RemoveBuildings(playerid);
		
	// HOSPITAL SIGNS
	new Hospital = CreatePlayerObject(playerid, 19353, -195.4142, -1741.4693, 676.4188, 0.0000, 0.0000, 180);
    SetPlayerObjectMaterialText(playerid, Hospital, "HOSPITAL", 0, OBJECT_MATERIAL_SIZE:140, "Cambria", 130, true, -1, 0, OBJECT_MATERIAL_TEXT_ALIGN:1);
    new SAC = CreateObject(19353, -195.4142, -1741.4362, 676.8190, 0.0000, 0.0000, 180);
    SetObjectMaterialText(SAC, "ALL SAINTS GENERAL", 0, OBJECT_MATERIAL_SIZE:140, "Cambria", 55, true, -584707328, 0, OBJECT_MATERIAL_TEXT_ALIGN:1);
    new line1 = CreateObject(19353, -195.4142, -1739.7816, 676.8000, 0.0000, 0.0000, 180);
    SetObjectMaterialText(line1, "|", 0, OBJECT_MATERIAL_SIZE:140, "Arial", 200, true, -13750738, 0, OBJECT_MATERIAL_TEXT_ALIGN:1);
    new line2 = CreateObject(19353, -195.4142, -1743.1800, 676.8000, 0.0000, 0.0000, 180);
    SetObjectMaterialText(line2, "|", 0, OBJECT_MATERIAL_SIZE:140, "Arial", 200, true, -13750738, 0, OBJECT_MATERIAL_TEXT_ALIGN:1);
	
	ApplyAnimation(playerid, "FINALE2", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "Flowers", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "FOOD", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "Freeweights", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "GANGS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "GHANDS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "GHETTO_DB", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "goggles", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "GRAFFITI", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "GRAVEYARD", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "GRENADE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "GYMNASIUM", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "HAIRCUTS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "HEIST9", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "INT_HOUSE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "INT_OFFICE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "INT_SHOP", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "JST_BUISNESS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "KART", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "KISSING", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "KNIFE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "LAPDAN1", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "LAPDAN2", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "LAPDAN3", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "LOWRIDER", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "MD_CHASE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "MEDIC", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "MD_END", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "MISC", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "MTB", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "MUSCULAR", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "NEVADA", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "ON_LOOKERS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "OTB", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "PARACHUTE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "PARK", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "PAULNMAC", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "ped", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "PLAYIDLES", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "POLICE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "POOL", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "POOR", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "PYTHON", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "QUAD", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "QUAD_DBZ", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "RIFLE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "RIOT", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "ROB_BANK", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "ROCKET", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "RUSTLER", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "RYDER", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SCRATCHING", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SHAMAL", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SHOTGUN", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SILENCED", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SKATE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SPRAYCAN", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "STRIP", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SUNBATHE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SWAT", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SWEET", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SWIM", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SWORD", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "TANK", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "TATTOOS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "TEC", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "TRAIN", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "TRUCK", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "UZI", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "VAN", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "VENDING", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "VORTEX", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "WAYFARER", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "WEAPONS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "WUZI", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SNM", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "BLOWJOBZ", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SEX", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "BOMBER", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "RAPPING", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SHOP", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "BEACH", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "SMOKING", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "FOOD", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "ON_LOOKERS", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "DEALER", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "CRACK", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "CARRY", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "COP_AMBIENT", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "PARK", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "INT_HOUSE", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	ApplyAnimation(playerid, "FOOD", "NULL", 4.1, false, false, false, false, 0, SYNC_ALL);
	
	SetPlayerColor(playerid, COLOR_ORANGE);
    
	currentSkinIndex[playerid] = 0;
	PerkWeatherMan[playerid] = 0;
	HasPlayerResponded[playerid] = 0;
    IsPlayerLogged[playerid] = 0;
	IsPlayerSpectating[playerid] = 0;
    IsPlayerMuted[playerid] = 0;
    IsPlayerInjured[playerid] = 0;
    IsPlayerInHospital[playerid] = 0;
    IsPlayerRentingCar[playerid] = 0;
    IsPlayerStealingCar[playerid] = 0;
    IsPlayerWaitingHospital[playerid] = 0;
    IsPlayerStealingCarID[playerid] = 0;
    IsPlayerOnDuty[playerid] = 0;
	IsAdminOnDuty[playerid] = 0;
    IsPlayerTased[playerid] = 0;
	IsPlayerInHelpMeCooldown[playerid] = 0;
    IsPlayerCuffed[playerid] = 0;
	IsPlayerBlindfolded[playerid] = 0;
    IsNewVehicleType[playerid] = 0;
    IsPlayerDragged[playerid] = 0;
    WhoIsDragging[playerid] = 0;
    IsPlayerTied[playerid] = 0;
    IsPlayerDead[playerid] = 0;
	IsPlayerWeaponBanned[playerid] = 0;
	HasPlayerGotShovel[playerid] = 0;
	HasPlayerToggledHelpMe[playerid] = 0;
	HasPlayerFirstSpawned[playerid] = 0;
    HasPlayerConfirmedVehicleID[playerid] = 0;
    CanPlayerBuyVehicle[playerid] = 0;
    PlayerAtDoorID[playerid] = 0;
    PlayerAtHouseID[playerid] = 0;
    PlayerAtFactionID[playerid] = 0;
	PlayerAtPlantID[playerid] = 0;
    MechanicFuelAmount[playerid] = 0;
    MechanicToolAmount[playerid] = 0;
	Binco_Current_Outfit[playerid] = 0;
	Binco_New_Outfit[playerid] = 0;
	Binco_Current_VW[playerid] = 0;
	HasPlayerTakenDrugs[playerid] = 0;
	HasPlayerBakedDrugs[playerid] = 0;
	HasPlayerChangedVehicleColour[playerid] = 0;
	HasPlayerEnteredSprayUnit[playerid] = 0;
	HasPlayerRequestAssistance[playerid] = 0;
	HasPlayerUsedMask[playerid] = 0;
	FoundPlayerHouseID[playerid] = 0;
	SpectateX[playerid] = 0.0;
	SpectateY[playerid] = 0.0;
	SpectateZ[playerid] = 0.0;
	DealershipType[playerid] = 0;
	IsPlayerUsingClient[playerid] = false;
	HasGPSBeenDisabled[playerid] = 0;
	VIPLockerUse[playerid] = 0;
	TutorialStep[playerid] = 0;
	HasPlayerRobbed247Store[playerid] = 0;
	HasPlayerRobbedSupermarket[playerid] = 0;
	HasPlayerRobbedElectronics[playerid] = 0;
	HasPlayerRobbedAmmunationPoint[playerid] = 0;
	HasPlayerRobbedBank[playerid] = 0;
	PerkUse[playerid] = 0;
	HasPlayerTakenMetal[playerid] = 0;
	HasPlayerFoundGunPowder[playerid] = 0;
	HasPlayerBuiltParts[playerid] = 0;
	HasPlayerBuiltWeapon[playerid] = 0;
	IsPlayerSeeingTextdraw[playerid] = 0;
	HasPlayerDrawnTaser[playerid] = 0;
	RouteChosen[playerid] = 0;
	IsTakingTest[playerid] = 0;
	IsPlayerNearPresent[playerid] = 0;
	IsPlayerNearPresentTest[playerid] = 0;
	IsPlayerLookingInSafe[playerid] = 0;
	
	Notification_Timer[playerid] = 0;
	Minute_Timer[playerid] = 0;
	DoorEntry_Timer[playerid] = 0;
	Drag_Timer[playerid] = 0;
	Backup_Timer[playerid] = 0;
	Fuel_Timer[playerid] = 0;
	Repair_Timer[playerid] = 0;
	Vehicle_Timer[playerid] = 0;
	Refuel_Timer[playerid] = 0;
	Hospital_Timer[playerid] = 0;
	Hotwire_Timer[playerid] = 0;
	Cooldown_Timer[playerid] = 0;
	CrackDealer_Timer[playerid] = 0;
	DrugUseCooldown_Timer[playerid] = 0;
	Assistance_Timer[playerid] = 0;
	Tutorial_Timer[playerid] = 0;
	MetalDealer_Timer[playerid] = 0;
	GunPowder_Timer[playerid] = 0;
	GunPowder_SearchTimer[playerid] = 0;
	WeaponPart_Timer[playerid] = 0;
	BuildPart_CooldownTimer[playerid] = 0;
	WeaponBuild_Timer[playerid] = 0;
	
	PlayerDefaultPayment[playerid] = 1;
	
	LoginTextdraw1 = CreatePlayerTextDraw(playerid, 320.000000, -15.000000, "a");
	PlayerTextDrawFont(playerid, LoginTextdraw1, TEXT_DRAW_FONT_3);
	PlayerTextDrawLetterSize(playerid, LoginTextdraw1, -1.299999, 15.999990);
	PlayerTextDrawTextSize(playerid, LoginTextdraw1, 490.000000, 659.000000);
	PlayerTextDrawAlignment(playerid, LoginTextdraw1, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, LoginTextdraw1, 0xFF);
	PlayerTextDrawUseBox(playerid, LoginTextdraw1, true);
	PlayerTextDrawBoxColour(playerid, LoginTextdraw1, 0xFF);
	PlayerTextDrawSetShadow(playerid, LoginTextdraw1, false);
	PlayerTextDrawSetOutline(playerid, LoginTextdraw1, true);
	PlayerTextDrawBackgroundColour(playerid, LoginTextdraw1, 0xFF);
	PlayerTextDrawSetProportional(playerid, LoginTextdraw1, true);
	PlayerTextDrawSetSelectable(playerid, LoginTextdraw1, true);

	LoginTextdraw2 = CreatePlayerTextDraw(playerid, 320.000000, 325.000000, "a");
	PlayerTextDrawFont(playerid, LoginTextdraw2, TEXT_DRAW_FONT_3);
	PlayerTextDrawLetterSize(playerid, LoginTextdraw2, -1.299999, 15.999990);
	PlayerTextDrawTextSize(playerid, LoginTextdraw2, 490.000000, 659.000000);
	PlayerTextDrawAlignment(playerid, LoginTextdraw2, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, LoginTextdraw2, 0xFF);
	PlayerTextDrawUseBox(playerid, LoginTextdraw2, true);
	PlayerTextDrawBoxColour(playerid, LoginTextdraw2, 0xFF);
	PlayerTextDrawSetShadow(playerid, LoginTextdraw2, false);
	PlayerTextDrawSetOutline(playerid, LoginTextdraw2, true);
	PlayerTextDrawBackgroundColour(playerid, LoginTextdraw2, 0xFF);
	PlayerTextDrawSetProportional(playerid, LoginTextdraw2, true);
	PlayerTextDrawSetSelectable(playerid, LoginTextdraw2, true);

	LoginTextdraw3 = CreatePlayerTextDraw(playerid, 70.000000, 430.000000, "SCRIPT VERSION: %s", SERVER_VERSION);
	PlayerTextDrawFont(playerid, LoginTextdraw3, TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, LoginTextdraw3, 0.300000, 1.000000);
	PlayerTextDrawTextSize(playerid, LoginTextdraw3, 510.000000, 210.000000);
	PlayerTextDrawAlignment(playerid, LoginTextdraw3, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, LoginTextdraw3, 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, LoginTextdraw3, true);
	PlayerTextDrawBoxColour(playerid, LoginTextdraw3, 0xAA);
	PlayerTextDrawSetShadow(playerid, LoginTextdraw3, false);
	PlayerTextDrawSetOutline(playerid, LoginTextdraw3, true);
	PlayerTextDrawBackgroundColour(playerid, LoginTextdraw3, 0xFF);
	PlayerTextDrawSetProportional(playerid, LoginTextdraw3, true);
	PlayerTextDrawSetSelectable(playerid, LoginTextdraw3, true);

	LoginTextdraw4 = CreatePlayerTextDraw(playerid, 320.000000, 66.000000, "OPEN ROLEPLAY");
	PlayerTextDrawFont(playerid, LoginTextdraw4, TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, LoginTextdraw4, 0.600000, 3.499998);
	PlayerTextDrawTextSize(playerid, LoginTextdraw4, 510.000000, 210.000000);
	PlayerTextDrawAlignment(playerid, LoginTextdraw4, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, LoginTextdraw4, 0x9F5AFDFF);
	PlayerTextDrawUseBox(playerid, LoginTextdraw4, true);
	PlayerTextDrawBoxColour(playerid, LoginTextdraw4, 0xFF);
	PlayerTextDrawSetShadow(playerid, LoginTextdraw4, false);
	PlayerTextDrawSetOutline(playerid, LoginTextdraw4, true);
	PlayerTextDrawBackgroundColour(playerid, LoginTextdraw4, 0xFF);
	PlayerTextDrawSetProportional(playerid, LoginTextdraw4, true);
	PlayerTextDrawSetSelectable(playerid, LoginTextdraw4, true);

	LoginTextdraw5 = CreatePlayerTextDraw(playerid, 320.000000, 35.000000, "Welcome To");
	PlayerTextDrawFont(playerid, LoginTextdraw5, TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, LoginTextdraw5, 0.600000, 3.499998);
	PlayerTextDrawTextSize(playerid, LoginTextdraw5, 510.000000, 210.000000);
	PlayerTextDrawAlignment(playerid, LoginTextdraw5, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, LoginTextdraw5, 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, LoginTextdraw5, true);
	PlayerTextDrawBoxColour(playerid, LoginTextdraw5, 0xFF);
	PlayerTextDrawSetShadow(playerid, LoginTextdraw5, false);
	PlayerTextDrawSetOutline(playerid, LoginTextdraw5, true);
	PlayerTextDrawBackgroundColour(playerid, LoginTextdraw5, 0xFF);
	PlayerTextDrawSetProportional(playerid, LoginTextdraw5, true);
	PlayerTextDrawSetSelectable(playerid, LoginTextdraw5, true);

	LoginTextdraw6 = CreatePlayerTextDraw(playerid, 320.000000, 343.000000, "Where your next adventure starts!");
	PlayerTextDrawFont(playerid, LoginTextdraw6, TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, LoginTextdraw6, 0.299999, 2.100000);
	PlayerTextDrawTextSize(playerid, LoginTextdraw6, 1020.000000, 390.000000);
	PlayerTextDrawAlignment(playerid, LoginTextdraw6, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, LoginTextdraw6, 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, LoginTextdraw6, false);
	PlayerTextDrawBoxColour(playerid, LoginTextdraw6, 0xFF);
	PlayerTextDrawSetShadow(playerid, LoginTextdraw6, false);
	PlayerTextDrawSetOutline(playerid, LoginTextdraw6, true);
	PlayerTextDrawBackgroundColour(playerid, LoginTextdraw6, 0xFF);
	PlayerTextDrawSetProportional(playerid, LoginTextdraw6, true);
	PlayerTextDrawSetSelectable(playerid, LoginTextdraw6, true);
	
	TutorialTextdraw1 = CreatePlayerTextDraw(playerid, 320.000000, 320.000000, "");
	PlayerTextDrawFont(playerid, TutorialTextdraw1, TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, TutorialTextdraw1, 0.200000, 1.899999);
	PlayerTextDrawTextSize(playerid, TutorialTextdraw1, 10.000000, 140.000000);
	PlayerTextDrawAlignment(playerid, TutorialTextdraw1, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, TutorialTextdraw1, 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, TutorialTextdraw1, false);
	PlayerTextDrawBoxColour(playerid, TutorialTextdraw1, 0x000000AA);
	PlayerTextDrawSetShadow(playerid, TutorialTextdraw1, false);
	PlayerTextDrawSetOutline(playerid, TutorialTextdraw1, true);
	PlayerTextDrawBackgroundColour(playerid, TutorialTextdraw1, 0x000000FF);
	PlayerTextDrawSetProportional(playerid, TutorialTextdraw1, true);
	PlayerTextDrawSetSelectable(playerid, TutorialTextdraw1, true);
	
	TutorialTextdraw2 = CreatePlayerTextDraw(playerid, 320.000000, 340.000000, "");
	PlayerTextDrawFont(playerid, TutorialTextdraw2, TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, TutorialTextdraw2, 0.200000, 1.899999);
	PlayerTextDrawTextSize(playerid, TutorialTextdraw2, 91.000000, 310.000000);
	PlayerTextDrawAlignment(playerid, TutorialTextdraw2, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, TutorialTextdraw2, 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, TutorialTextdraw2, true);
	PlayerTextDrawBoxColour(playerid, TutorialTextdraw2, 0x000000FF);
	PlayerTextDrawSetShadow(playerid, TutorialTextdraw2, false);
	PlayerTextDrawSetOutline(playerid, TutorialTextdraw2, true);
	PlayerTextDrawBackgroundColour(playerid, TutorialTextdraw2, 0x000000FF);
	PlayerTextDrawSetProportional(playerid, TutorialTextdraw2, true);
	PlayerTextDrawSetSelectable(playerid, TutorialTextdraw2, true);
    
    Notification_Textdraw = CreatePlayerTextDraw(playerid,500.000000, 114.000000, "");
	PlayerTextDrawBackgroundColour(playerid,Notification_Textdraw, 255);
	PlayerTextDrawFont(playerid,Notification_Textdraw, TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,Notification_Textdraw, 0.220000, 1.200000);
	PlayerTextDrawColour(playerid,Notification_Textdraw, -1);
	PlayerTextDrawSetOutline(playerid,Notification_Textdraw, 0);
	PlayerTextDrawSetProportional(playerid,Notification_Textdraw, true);
	PlayerTextDrawSetShadow(playerid,Notification_Textdraw, 1);
	PlayerTextDrawUseBox(playerid,Notification_Textdraw, true);
	PlayerTextDrawBoxColour(playerid,Notification_Textdraw, 204);
	PlayerTextDrawTextSize(playerid,Notification_Textdraw, 606.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid,Notification_Textdraw, false);
	PlayerTextDrawHide(playerid, PlayerText:Notification_Textdraw);
	
	Store_Textdraw = CreatePlayerTextDraw(playerid,500.000000, 114.000000, "");
	PlayerTextDrawBackgroundColour(playerid,Store_Textdraw, 255);
	PlayerTextDrawFont(playerid,Store_Textdraw, TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,Store_Textdraw, 0.220000, 1.200000);
	PlayerTextDrawColour(playerid,Store_Textdraw, -1);
	PlayerTextDrawSetOutline(playerid,Store_Textdraw, 0);
	PlayerTextDrawSetProportional(playerid,Store_Textdraw, true);
	PlayerTextDrawSetShadow(playerid,Store_Textdraw, 1);
	PlayerTextDrawUseBox(playerid,Store_Textdraw, true);
	PlayerTextDrawBoxColour(playerid,Store_Textdraw, 204);
	PlayerTextDrawTextSize(playerid,Store_Textdraw, 606.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid,Store_Textdraw, false);
	PlayerTextDrawHide(playerid, PlayerText:Store_Textdraw);
	
	SpeedBoxFuelAmount = CreatePlayerTextDraw(playerid, 572.933105, 396.080047, "-");
	PlayerTextDrawLetterSize(playerid, SpeedBoxFuelAmount, 0.301333, 1.171911);
	PlayerTextDrawAlignment(playerid, SpeedBoxFuelAmount, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, SpeedBoxFuelAmount, -1);
	PlayerTextDrawSetShadow(playerid, SpeedBoxFuelAmount, 0);
	PlayerTextDrawSetOutline(playerid, SpeedBoxFuelAmount, 1);
	PlayerTextDrawBackgroundColour(playerid, SpeedBoxFuelAmount, 255);
	PlayerTextDrawFont(playerid, SpeedBoxFuelAmount, TEXT_DRAW_FONT_3);
	PlayerTextDrawSetProportional(playerid, SpeedBoxFuelAmount, true);
	PlayerTextDrawSetShadow(playerid, SpeedBoxFuelAmount, 0);
	PlayerTextDrawHide(playerid, PlayerText:SpeedBoxFuelAmount);

	SpeedBoxFuelTitle = CreatePlayerTextDraw(playerid, 572.509460, 407.528869, "FUEL");
	PlayerTextDrawLetterSize(playerid, SpeedBoxFuelTitle, 0.151111, 0.689067);
	PlayerTextDrawAlignment(playerid, SpeedBoxFuelTitle, TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, SpeedBoxFuelTitle, -1378294017);
	PlayerTextDrawSetShadow(playerid, SpeedBoxFuelTitle, 0);
	PlayerTextDrawSetOutline(playerid, SpeedBoxFuelTitle, 0);
	PlayerTextDrawBackgroundColour(playerid, SpeedBoxFuelTitle, 255);
	PlayerTextDrawFont(playerid, SpeedBoxFuelTitle, TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, SpeedBoxFuelTitle, true);
	PlayerTextDrawSetShadow(playerid, SpeedBoxFuelTitle, 0);
	PlayerTextDrawHide(playerid, PlayerText:SpeedBoxFuelTitle);
	
	SpeedBoxSpeedTitle = CreatePlayerTextDraw(playerid, 526.000244, 408.026733, "KM/H");
	PlayerTextDrawLetterSize(playerid, SpeedBoxSpeedTitle, 0.175555, 0.669155);
	PlayerTextDrawAlignment(playerid, SpeedBoxSpeedTitle, TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, SpeedBoxSpeedTitle, -1378294017);
	PlayerTextDrawSetShadow(playerid, SpeedBoxSpeedTitle, 0);
	PlayerTextDrawSetOutline(playerid, SpeedBoxSpeedTitle, 0);
	PlayerTextDrawBackgroundColour(playerid, SpeedBoxSpeedTitle, 255);
	PlayerTextDrawFont(playerid, SpeedBoxSpeedTitle, TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, SpeedBoxSpeedTitle, true);
	PlayerTextDrawSetShadow(playerid, SpeedBoxSpeedTitle, 0);
	PlayerTextDrawHide(playerid, PlayerText:SpeedBoxSpeedTitle);
	
	SpeedBoxSpeedAmount = CreatePlayerTextDraw(playerid, 524.222167, 395.582153, "0");
	PlayerTextDrawLetterSize(playerid, SpeedBoxSpeedAmount, 0.342222, 1.316266);
	PlayerTextDrawAlignment(playerid, SpeedBoxSpeedAmount, TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, SpeedBoxSpeedAmount, -1);
	PlayerTextDrawSetShadow(playerid, SpeedBoxSpeedAmount, 0);
	PlayerTextDrawSetOutline(playerid, SpeedBoxSpeedAmount, 1);
	PlayerTextDrawBackgroundColour(playerid, SpeedBoxSpeedAmount, 255);
	PlayerTextDrawFont(playerid, SpeedBoxSpeedAmount, TEXT_DRAW_FONT_3);
	PlayerTextDrawSetProportional(playerid, SpeedBoxSpeedAmount, true);
	PlayerTextDrawSetShadow(playerid, SpeedBoxSpeedAmount, 0);
	PlayerTextDrawHide(playerid, PlayerText:SpeedBoxSpeedAmount);
	
	if(IsPlayerUsingOfficialClient(playerid) == false)
	{
		IsPlayerUsingClient[playerid] = false;
	} 
	else
	{
		IsPlayerUsingClient[playerid] = true;		
	}
 
    return 1;
}
 
public OnPlayerDisconnect(playerid, reason)
{
    if(PlayerData[playerid][Character_Registered] == 0) return 0;

	if(reason == 2)
	{	
		new string[256];
		format(string, sizeof(string), "[INFO] %s  has been forced out of the server [Kick / Ban]", GetName(playerid));
	   	SendNearbyMessage(playerid, 15.0, COLOR_YELLOW, string);
	}
	else if(reason == 1)
	{	
		new string[256];
		format(string, sizeof(string), "[INFO] %s  has left the server [Quit]", GetName(playerid));
	   	SendNearbyMessage(playerid, 15.0, COLOR_YELLOW, string);
	}
	else if(reason == 0)
	{	
		new string[256];
		format(string, sizeof(string), "[INFO] %s  has left the server [Crashed]", GetName(playerid));
	   	SendNearbyMessage(playerid, 15.0, COLOR_YELLOW, string);
	}

	if(strcmp(BackupCaller, GetName(playerid), false) == 0)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(PlayerData[i][Character_Faction] == 1 && HasPlayerResponded[i] == 1)
		    {
				DisablePlayerCheckpoint(i);
			}

			LSPDBackupPosition[0] = 0;
	        LSPDBackupPosition[1] = 0;
	        LSPDBackupPosition[2] = 0;

	        BackupCaller = "";
	        KillTimer(Backup_Timer[i]);
		}
	}

	if(IsPlayerOnDuty[playerid] == 1)
	{
		PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];  
	}

    PlayerData[playerid][Character_Hour] = SERVER_HOUR;
    
    Save_Character_Info_Query_1(playerid);
    Save_Character_Info_Query_2(playerid);
	Save_Character_Info_Query_3(playerid);
    
    // PLAYER SIDED RESET
    PlayerData[playerid][Account_ID] = 0;
	PlayerData[playerid][Account_Email] = 0;
	PlayerData[playerid][Account_IP] = 0;
    PlayerData[playerid][Character_Name] = 0;
    PlayerData[playerid][Character_Password] = 0;
    PlayerData[playerid][Character_Registered] = 0;
    PlayerData[playerid][Character_Age] = 0;
    PlayerData[playerid][Character_Sex] = 0;
    PlayerData[playerid][Character_Birthplace] = 0;
    PlayerData[playerid][Character_Skin_1] = 0;
    PlayerData[playerid][Character_Skin_2] = 0;
    PlayerData[playerid][Character_Skin_3] = 0;
    PlayerData[playerid][Character_Skin_Logout] = 0;
	PlayerData[playerid][Character_Last_Login] = 0;
	PlayerData[playerid][Character_Hour] = 0;
	PlayerData[playerid][Character_Minutes] = 0;
	PlayerData[playerid][Character_Ban] = 0;
	PlayerData[playerid][Character_Health] = 0;
	PlayerData[playerid][Character_Armor] = 0;
	PlayerData[playerid][Character_Job] = 0;
    PlayerData[playerid][Character_Faction] = 0;
    PlayerData[playerid][Character_Faction_Rank] = 0;
    PlayerData[playerid][Character_Faction_Join_Request] = 0;
    PlayerData[playerid][Character_Faction_Ban] = 0;
	PlayerData[playerid][Character_Money] = 0;
	PlayerData[playerid][Character_Coins] = 0;
	PlayerData[playerid][Character_Bank_Account] = 0;
	PlayerData[playerid][Character_Bank_Money] = 0;
	PlayerData[playerid][Character_Bank_Loan] = 0;
	PlayerData[playerid][Character_Bank_Pin] = 0;
	PlayerData[playerid][Character_VIP] = 0;
	PlayerData[playerid][Character_VIP_Exp] = 0;
    PlayerData[playerid][Character_Pos_X] = 0;
    PlayerData[playerid][Character_Pos_Y] = 0;
    PlayerData[playerid][Character_Pos_Z] = 0;
    PlayerData[playerid][Character_Pos_Angle] = 0;
    PlayerData[playerid][Character_Interior_ID] = 0;
    PlayerData[playerid][Character_Virtual_World] = 0;
    PlayerData[playerid][Character_House_ID_1] = 0;
	PlayerData[playerid][Character_House_ID_2] = 0;
    PlayerData[playerid][Character_Business_ID_1] = 0;
	PlayerData[playerid][Character_Business_ID_2] = 0;
    PlayerData[playerid][Character_Total_Houses] = 0;
    PlayerData[playerid][Character_Owns_Faction] = 0;
    PlayerData[playerid][Character_Total_Businesses] = 0;
	PlayerData[playerid][Character_Level] = 0;
	PlayerData[playerid][Character_Level_Exp] = 0;
	PlayerData[playerid][Character_Ticket_Amount] = 0;
	PlayerData[playerid][Character_Total_Ticket_Amount] = 0;
	PlayerData[playerid][Character_Jail] = 0;
	PlayerData[playerid][Character_Jail_Time] = 0;
	PlayerData[playerid][Character_Jail_Reason] = 0;
	PlayerData[playerid][Character_Last_Crime] = 0;
	PlayerData[playerid][Helper_Level] = 0;
	PlayerData[playerid][Moderator_Level] = 0;
	PlayerData[playerid][Admin_Level] = 0;
	PlayerData[playerid][Admin_Level_Exp] = 0;
	PlayerData[playerid][Admin_Jail] = 0;
	PlayerData[playerid][Admin_Jail_Time] = 0;
	PlayerData[playerid][Admin_Jail_Reason] = 0;
	PlayerData[playerid][Weapon_Slot_1] = 0;
	PlayerData[playerid][Weapon_Slot_2] = 0;
	PlayerData[playerid][Weapon_Slot_3] = 0;
	PlayerData[playerid][Weapon_Slot_4] = 0;
	PlayerData[playerid][Weapon_Slot_5] = 0;
	PlayerData[playerid][Weapon_Slot_6] = 0;
	PlayerData[playerid][Ammo_Slot_1] = 0;
	PlayerData[playerid][Ammo_Slot_2] = 0;
	PlayerData[playerid][Ammo_Slot_3] = 0;
	PlayerData[playerid][Ammo_Slot_4] = 0;
	PlayerData[playerid][Ammo_Slot_5] = 0;
	PlayerData[playerid][Ammo_Slot_6] = 0;
	PlayerData[playerid][Character_Radio] = 0;
	PlayerData[playerid][Character_License_Car] = 0;
	PlayerData[playerid][Character_License_Truck] = 0;
	PlayerData[playerid][Character_License_Motorcycle] = 0;
	PlayerData[playerid][Character_License_Boat] = 0;
	PlayerData[playerid][Character_License_Flying] = 0;
	PlayerData[playerid][Character_License_Firearms] = 0;
	PlayerData[playerid][Character_Drug_Cocaine] = 0;
	PlayerData[playerid][Character_Drug_Heroin] = 0;
	PlayerData[playerid][Character_Drug_Weed] = 0;
	PlayerData[playerid][Character_Has_Rope] = 0;
	PlayerData[playerid][Character_Has_Fuelcan] = 0;
	PlayerData[playerid][Character_Has_Lockpick] = 0;
	PlayerData[playerid][Character_Has_Device] = 0;
	PlayerData[playerid][Character_Has_Drugs] = 0;
	PlayerData[playerid][Character_Has_Metal] = 0;
	PlayerData[playerid][Character_Has_Parts] = 0;
	PlayerData[playerid][Character_Has_Gunpowder] = 0;
	PlayerData[playerid][Character_Has_Food] = 0;
	PlayerData[playerid][Character_Has_Mask] = 0;
	PlayerData[playerid][Character_Has_Blindfold] = 0;
	PlayerData[playerid][Character_Has_Drinks] = 0;
	PlayerData[playerid][Character_Has_Alcohol] = 0;
	PlayerData[playerid][Character_Has_Phone] = 0;
	PlayerData[playerid][Character_Phonenumber] = 0;
	PlayerData[playerid][Character_Has_SimCard] = 0;
	PlayerData[playerid][Character_Hotel_ID] = 0;
	PlayerData[playerid][Hotel_Character_Pos_X] = 0;
    PlayerData[playerid][Hotel_Character_Pos_Y] = 0;
    PlayerData[playerid][Hotel_Character_Pos_Z] = 0;
    PlayerData[playerid][Hotel_Character_Pos_Angle] = 0;
    PlayerData[playerid][Hotel_Character_Interior_ID] = 0;
    PlayerData[playerid][Hotel_Character_Virtual_World] = 0;
    PlayerData[playerid][Character_Total_Vehicles] = 0;
	PlayerData[playerid][Character_House_Lock] = 0;
	PlayerData[playerid][Character_House_Alarm] = 0;
	PlayerData[playerid][Character_House_Safe] = 0;
    
    // SERVER SIDED RESET
	currentSkinIndex[playerid] = 0;
	PerkUse[playerid] = 0;
	PerkWeatherMan[playerid] = 0;
	HasPlayerResponded[playerid] = 0;
    MechanicJobPlayer[playerid] = 0;
    DudefixJobPlayer[playerid] = 0;
	LSFDJobHouseFirePlayer[playerid] = 0;
	LSPDJobHouseInpPlayer[playerid] = 0;
	IsPlayerLogged[playerid] = 0;
	IsPlayerSpectating[playerid] = 0;
	IsPlayerMuted[playerid] = 0;
	IsPlayerRentingCar[playerid] = 0;
	IsPlayerInHelpMeCooldown[playerid] = 0;
	IsPlayerStealingCar[playerid] = 0;
	IsPlayerStealingCarID[playerid] = 0;
	IsPlayerInjured[playerid] = 0;
	IsPlayerDead[playerid] = 0;
	IsPlayerInHospital[playerid] = 0;
	IsPlayerWeaponBanned[playerid] = 0;
	IsPlayerOnDuty[playerid] = 0;
	IsAdminOnDuty[playerid] = 0;
	IsPlayerTased[playerid] = 0;
	Binco_Current_Outfit[playerid] = 0;
	Binco_New_Outfit[playerid] = 0;
	Binco_Current_VW[playerid] = 0;
	HasPlayerChangedVehicleColour[playerid] = 0;
	HasPlayerEnteredSprayUnit[playerid] = 0;
	HasPlayerRequestAssistance[playerid] = 0;
	HasPlayerUsedMask[playerid] = 0;
	FoundPlayerHouseID[playerid] = 0;
	IsPlayerCuffed[playerid] = 0;
	IsPlayerBlindfolded[playerid] = 0;
	IsNewVehicleType[playerid] = 0;
	IsPlayerTied[playerid] = 0;
	IsPlayerDragged[playerid] = 0;
	MechanicFuelAmount[playerid] = 0;
	MechanicToolAmount[playerid] = 0;
	WhoIsDragging[playerid] = 0;
	WhoHasBeenSearched[playerid] = 0;
	WhoIsCalling[playerid] = 0;
	ApplicationLoanAmount[playerid] = 0;
	HasPlayerGotShovel[playerid] = 0;
	HasPlayerToggledHelpMe[playerid] = 0;
	HasPlayerFirstSpawned[playerid] = 0;
	HasPlayerRobbedBank[playerid] = 0;
	HasPlayerRobbed247Store[playerid] = 0;
	HasPlayerRobbedSupermarket[playerid] = 0;
	HasPlayerRobbedElectronics[playerid] = 0;
	HasPlayerRobbedAmmunation[playerid] = 0;
	HasPlayerConfirmedVehicleID[playerid] = 0;
	HasCallBeenPickedUp[playerid] = 0;
	HasPlayerMadeACall[playerid] = 0;
	HasPlayerToggledOffDirectory[playerid] = 0;
	HasPlayerMadeAnEmergencyCall[playerid] = 0;
	EmergencyCallTypeRequired[playerid] = 0;
	EmergencyCallTypeReason[playerid] = 0;
	HasPlayerMadeRequestCall[playerid] = 0;
	RequestCallType[playerid] = 0;
	RequestCallReason[playerid] = 0;
	CanPlayerBuyVehicle[playerid] = 0;
	PlayerAtDoorID[playerid] = 0;
	PlayerAtHouseID[playerid] = 0;
	PlayerAtFactionID[playerid] = 0;
	PlayerAtPlantID[playerid] = 0;
	PlayerAtBusinessID[playerid] = 0;
	PlayerAtBusinessBuyPointID[playerid] = 0;
	VehicleModelPurchasing[playerid] = 0;
	TruckJobCount[playerid] = 0;
	TruckJobPlayer[playerid] = 0;
	RouteChosen[playerid] = 0;
	PizzaJobDeliveryPlayer[playerid] = 0;
	PizzaJobDeliveryCount[playerid] = 0;
	GarbageJobPlayer[playerid] = 0;
	GarbageJobCount[playerid] = 0;
	GarbageJobPosition[playerid] = 0;
	ElectricianJobPlayer[playerid] = 0;
	ElectricianJobCount[playerid] = 0;
	HasPlayerBakedDrugs[playerid] = 0;
	SpectateX[playerid] = 0.0;
	SpectateY[playerid] = 0.0;
	SpectateZ[playerid] = 0.0;
	DealershipType[playerid] = 0;
	IsPlayerUsingClient[playerid] = false;
	HasGPSBeenDisabled[playerid] = 0;
	PlayerDefaultPayment[playerid] = 0;
	VIPLockerUse[playerid] = 0;
	TutorialStep[playerid] = 0;
	HasPlayerTakenMetal[playerid] = 0;
	HasPlayerFoundGunPowder[playerid] = 0;
	HasPlayerBuiltParts[playerid] = 0;
	HasPlayerBuiltWeapon[playerid] = 0;
	IsPlayerSeeingTextdraw[playerid] = 0;
	HasPlayerDrawnTaser[playerid] = 0;
	IsTakingTest[playerid] = 0;
	IsPlayerNearPresent[playerid] = 0;
	IsPlayerNearPresentTest[playerid] = 0;
	IsPlayerLookingInSafe[playerid] = 0;
	
	GarbageObject[playerid] = 0;
	
	DrivingCarPlayer[playerid] = 0;
	DrivingCarCount[playerid] = 0;
	DrivingBikePlayer[playerid] = 0;
	DrivingBikeCount[playerid] = 0;
	DrivingTruckCount[playerid] = 0;
	DrivingTruckCount[playerid] = 0;
	
	GarbageObject[playerid] = 0;
	
	if(TruckJobMoneyPlayer[playerid] > 0)
	{
	    TruckJobMoneyStarted = 0;
     	TruckJobMoneyPlayer[playerid] = 0;
	}
	
	KillTimer(Notification_Timer[playerid]);
	KillTimer(Minute_Timer[playerid]);
	KillTimer(DoorEntry_Timer[playerid]);
	KillTimer(Drag_Timer[playerid]);
	KillTimer(Backup_Timer[playerid]);
	KillTimer(Fuel_Timer[playerid]);
	KillTimer(Repair_Timer[playerid]);
	KillTimer(Vehicle_Timer[playerid]);
	KillTimer(Refuel_Timer[playerid]);
	KillTimer(Hospital_Timer[playerid]);
	KillTimer(Hotwire_Timer[playerid]);
	KillTimer(Cooldown_Timer[playerid]);
	KillTimer(CrackDealer_Timer[playerid]);
	KillTimer(DrugUseCooldown_Timer[playerid]);
	KillTimer(Assistance_Timer[playerid]);
	KillTimer(Tutorial_Timer[playerid]);
	KillTimer(GunPowder_SearchTimer[playerid]);
	KillTimer(GunPowder_Timer[playerid]);
	KillTimer(MetalDealer_Timer[playerid]);
	KillTimer(WeaponPart_Timer[playerid]);
	KillTimer(BuildPart_CooldownTimer[playerid]);
	KillTimer(WeaponBuild_Timer[playerid]);
 	
 	Notification_Timer[playerid] = 0;
	Minute_Timer[playerid] = 0;
	DoorEntry_Timer[playerid] = 0;
	Drag_Timer[playerid] = 0;
	Backup_Timer[playerid] = 0;
	Fuel_Timer[playerid] = 0;
	Repair_Timer[playerid] = 0;
	Vehicle_Timer[playerid] = 0;
	Refuel_Timer[playerid] = 0;
	Hospital_Timer[playerid] = 0;
	Hotwire_Timer[playerid] = 0;
	Cooldown_Timer[playerid] = 0;
	CrackDealer_Timer[playerid] = 0;
	DrugUseCooldown_Timer[playerid] = 0;
	Assistance_Timer[playerid] = 0;
	Tutorial_Timer[playerid] = 0;
	MetalDealer_Timer[playerid] = 0;
	GunPowder_Timer[playerid] = 0;
	GunPowder_SearchTimer[playerid] = 0;
	WeaponPart_Timer[playerid] = 0;
	BuildPart_CooldownTimer[playerid] = 0;
	WeaponBuild_Timer[playerid] = 0;
 	
    return 1;
}
 
public OnPlayerSpawn(playerid)
{
	if(IsPlayerDead[playerid] == 1)
	{
	    IsPlayerDead[playerid] = 0;
	    
	    if(IsPlayerInjured[playerid] == 1 && IsPlayerInHospital[playerid] == 0)
		{
		    IsPlayerInjured[playerid] = 0;
			IsPlayerInHospital[playerid] = 1;

	        SetPlayerPos(playerid, -198.4496,-1768.4443,675.7687);
		 	SetPlayerFacingAngle(playerid, 235.7789);
		 	SetPlayerInterior(playerid, 0);

		 	SetPlayerHealth(playerid, 50);
		 	SetPlayerSkin(playerid, 62);

	        ClearMessages(playerid);
		
			if(IsPlayerOnDuty[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "- Your character has died while on duty, please wait inside the hospital until your time is complete!");
				SendPlayerErrorMessage(playerid, " You will need to go back to your faction to go on duty!");
				
				IsPlayerOnDuty[playerid] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW, "- Your character has just died, please wait inside the hospital until your time is completed!");
			}

            TogglePlayerControllable(playerid,false);
			DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
    		Hospital_Timer[playerid] = SetTimerEx("HospitalTimer", 60000, false, "i", playerid);
	    }
	    else
	    {
	        IsPlayerInHospital[playerid] = 1;

	        SetPlayerPos(playerid, -1122.5582,1977.2639,-58.9141);
		 	SetPlayerFacingAngle(playerid, 235.7789);
		 	SetPlayerInterior(playerid, 0);

		 	SetPlayerHealth(playerid, 50);
		 	SetPlayerSkin(playerid, 62);

	        ClearMessages(playerid);
		 	SendClientMessage(playerid, COLOR_YELLOW, "- Your character has just died [BUG MAYBE?], please wait inside the hospital until your rest period is up!");

            TogglePlayerControllable(playerid,false);
            DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
		 	Hospital_Timer[playerid] = SetTimerEx("HospitalTimer", 60000, false, "i", playerid);
	    }
	}
    return 1;
}
 
public OnPlayerDeath(playerid, killerid, WEAPON:reason)
{
    IsPlayerDead[playerid] = 1;
    return 1;
}
 
public OnVehicleSpawn(vehicleid)
{
    return 1;
}
 
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You have been muted temp, please wait for an unmute!");
    if(!success) SendPlayerErrorMessage(playerid, " This command doesn't exist in our system, please use /commands for more info!");
	return 1;
}
 
public OnVehicleDeath(vehicleid, killerid)
{
    return 1;
}
 
public OnPlayerText(playerid, text[])
{
	if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
	else if(HasPlayerMadeAnEmergencyCall[playerid] == 1)
	{
	    if(EmergencyCallTypeRequired[playerid] == 0)
		{
	        if(strcmp(text, "police", false) == 0 || strcmp(text, "fire", false) == 0 || strcmp(text, "medical", false) == 0)
	        {
				if(strcmp(text, "police", false) == 0){ EmergencyCallTypeRequired[playerid] = 1; }
	            else if(strcmp(text, "fire", false) == 0){ EmergencyCallTypeRequired[playerid] = 2; }
	            else if(strcmp(text, "medical", false) == 0){ EmergencyCallTypeRequired[playerid] = 3; }

                new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
                SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);
		
	            new string[256];
				format(string, sizeof(string), "[Phone] Emergency Responder says: What is the reason for this Emergency?");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
	        }
	        else
	        {
	            new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
				SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);
				
	            new string[256];
				format(string, sizeof(string), "[Phone] Emergency Responder says: Sorry, can you repeat that. Who is required? (police, fire or medical)");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
	        }
	    }
	    else if(EmergencyCallTypeRequired[playerid] == 1 && EmergencyCallTypeReason[playerid] == 0)
	    {
	        if(strlen(text) != 0)
	        {
	            new reason[256];
	            format(reason, sizeof(reason), "%s", text);
				strcpy(EmergencyCallTypeReason[playerid], reason);

                new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
				SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);
				
	            new string[256];
				format(string, sizeof(string), "[Phone] Emergency Responder says: Thank you, we will see if there are any avaliable units to respond!");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
				
	 			format(string, sizeof(string), "> %s puts their phone away in their pocket", GetName(playerid));
			   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
			   	
			   	new dstring[256];
      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We have a new call that needs attention! [/acceptcall (job id)]");
				SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
				format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Report ID: %d | Reason: %s", playerid, text);
				SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
				
				HasPlayerMadeAnEmergencyCall[playerid] = 0;
	        }
	    }
	    else if(EmergencyCallTypeRequired[playerid] == 2 && EmergencyCallTypeReason[playerid] == 0)
	    {
	        if(strlen(text) != 0)
	        {
	            new reason[256];
	            format(reason, sizeof(reason), "%s", text);
				strcpy(EmergencyCallTypeReason[playerid], reason);

                new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
				SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

	            new string[256];
				format(string, sizeof(string), "[Phone] Emergency Responder says: Thank you, we will see if there are any avaliable units to respond!");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);

	 			format(string, sizeof(string), "> %s puts their phone away in their pocket", GetName(playerid));
			   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);

			   	new dstring[256];
      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We have a new call that needs attention! [/acceptcall (job id)]");
				SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);
				format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Report ID: %d | Reason: %s", playerid, text);
				SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);
				
				HasPlayerMadeAnEmergencyCall[playerid] = 0;
	        }
	    }
	    else if(EmergencyCallTypeRequired[playerid] == 3 && EmergencyCallTypeReason[playerid] == 0)
	    {
	        if(strlen(text) != 0)
	        {
	            new reason[256];
	            format(reason, sizeof(reason), "%s", text);
				strcpy(EmergencyCallTypeReason[playerid], reason);

                new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
				SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

	            new string[256];
				format(string, sizeof(string), "[Phone] Emergency Responder says: Thank you, we will see if there are any avaliable units to respond!");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);

	 			format(string, sizeof(string), "> %s puts their phone away in their pocket", GetName(playerid));
			   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);

			   	new dstring[256];
      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We have a new call that needs attention! [/acceptcall (job id)]");
				SendFactionRadioMessage(3, COLOR_LIGHTSEAGREEN, dstring);
				format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Report ID: %d | Reason: %s)", playerid, text);
				SendFactionRadioMessage(3, COLOR_LIGHTSEAGREEN, dstring);
				
				HasPlayerMadeAnEmergencyCall[playerid] = 0;
	        }
	    }
	}
	else if(HasPlayerMadeRequestCall[playerid] == 1)
	{
	    if(RequestCallType[playerid] == 0)
		{
	        if(strcmp(text, "yes", false) == 0 || strcmp(text, "no", false) == 0)
	        {
				if(strcmp(text, "yes", false) == 0)
				{
					RequestCallType[playerid] = 1;

                    new message[128];
					format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
					SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

		            new string[256];
					format(string, sizeof(string), "[Phone] Mechanic Dispatch says: What is the reason for this call? Vehicle refuel? vehicle tow?");
					SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
				}
	            else if(strcmp(text, "no", false) == 0)
				{
					RequestCallType[playerid] = 0;
					HasPlayerMadeRequestCall[playerid] = 0;
					
					new string[256];
					format(string, sizeof(string), "[Phone] Mechanic Dispatch says: We require to know where our client is located, please call again later!");
					SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
				}
	        }
	        else
	        {
	            new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
				SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

	            new string[256];
				format(string, sizeof(string), "[Phone] Mechanic Dispatch says: Sorry, can you repeat that. Do you need assistance at your current location?");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
	        }
	    }
	    else if(RequestCallType[playerid] == 1 && RequestCallReason[playerid] == 0)
	    {
	        if(strlen(text) != 0)
	        {
	            new reason[256];
	            format(reason, sizeof(reason), "%s", text);
				strcpy(RequestCallReason[playerid], reason);

                new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
                SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

	            new string[256];
				format(string, sizeof(string), "[Phone] Mechanic Dispatch says: Thank you, we will see if there are any avaliable units to respond!");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);

	 			format(string, sizeof(string), "> %s puts their phone away in their pocket", GetName(playerid));
			   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);

			   	new dstring[256];
      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We have a new call that needs attention! [/acceptcall (job id)]");
				SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);
				format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Report ID: %d | Reason: %s)", playerid, text);
				SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);
				
				HasPlayerMadeRequestCall[playerid] = 0;
	        }
	    }
	}
	else if(HasPlayerMadeRequestCall[playerid] == 2)
	{
	    if(RequestCallType[playerid] == 0)
		{
	        if(strcmp(text, "yes", false) == 0 || strcmp(text, "no", false) == 0)
	        {
				if(strcmp(text, "yes", false) == 0)
				{
					RequestCallType[playerid] = 2;

                    new message[128];
					format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
					SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

		            new string[256];
					format(string, sizeof(string), "[Phone] Towing Dispatch says: What is the reason for this call? Vehicle refuel? vehicle tow?");
					SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
				}
	            else if(strcmp(text, "no", false) == 0)
				{
					RequestCallType[playerid] = 0;
					HasPlayerMadeRequestCall[playerid] = 0;

					new string[256];
					format(string, sizeof(string), "[Phone] Towing Dispatch says: We require to know where our client is located, please call again later!");
					SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
				}
	        }
	        else
	        {
	            new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
				SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

	            new string[256];
				format(string, sizeof(string), "[Phone] Towing Dispatch says: Sorry, can you repeat that. Do you need assistance at your current location?");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);
	        }
	    }
	    else if(RequestCallType[playerid] == 2 && RequestCallReason[playerid] == 0)
	    {
	        if(strlen(text) != 0)
	        {
	            new reason[256];
	            format(reason, sizeof(reason), "%s", text);
				strcpy(RequestCallReason[playerid], reason);

                new message[128];
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
                SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

	            new string[256];
				format(string, sizeof(string), "[Phone] Towing Dispatch says: Thank you, we will see if there are any avaliable units to respond!");
				SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);

	 			format(string, sizeof(string), "> %s puts their phone away in their pocket", GetName(playerid));
			   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);

			   	new dstring[256];
      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We have a new call that needs attention! [/acceptcall (job id)]");
				SendFactionRadioMessage(5, COLOR_LIGHTSEAGREEN, dstring);
				format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Report ID: %d | Reason: %s)", playerid, text);
				SendFactionRadioMessage(5, COLOR_LIGHTSEAGREEN, dstring);
				
				
				
				HasPlayerMadeRequestCall[playerid] = 0;
	        }
	    }
	}
	else if(HasCallBeenPickedUp[playerid] == 1)
	{
	    new message[128];
		format(message, sizeof(message), "[Phone] %s says: %s", GetName(WhoIsCalling[playerid]), text);
		SendNearbyMessage(playerid, 5.0, COLOR_WHITE, message);
		
		new messagecount = 0;
		
		for(new targetid = 0; targetid < MAX_PLAYERS; targetid++)
		{
			if(WhoIsCalling[targetid] == playerid && messagecount == 0)
			{
				messagecount = 1;
				
				format(message, sizeof(message), "[Phone] %s says: %s", GetName(playerid), text);
                SendNearbyMessage(playerid, 5.0, COLOR_WHITE, message);
			}
			else return 0;
		}
	}
	else
	{
		new message[128];
	 	format(message, sizeof(message), "%s says: %s", GetRPName(playerid), text);
		SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);
	}
    return 0;
}
 
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, WEAPON:weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID)
	{
		if(HasPlayerDrawnTaser[issuerid] == 1 && GetPlayerWeapon(issuerid) == WEAPON_SILENCED && IsPlayerOnDuty[issuerid] == 1)
		{
			new Float:tx, Float:ty, Float:tz;
	  		GetPlayerPos(playerid, tx, ty, tz);

  		    if(IsPlayerInRangeOfPoint(issuerid, 15.0, tx, ty, tz))
  		    {
  		        IsPlayerTased[playerid] = 1;

    		    GameTextForPlayer(playerid, "Tasered", 5000, 5);

    		    new tdstring1[500];
		    	format(tdstring1, sizeof(tdstring1), "You have been tasered by the LSPD, please roleplay your injuries or face the overlords!");
				PlayerTextDrawSetString(playerid, PlayerText:Notification_Textdraw, tdstring1);
				PlayerTextDrawShow(playerid, PlayerText:Notification_Textdraw);
						
				new string[256];
				format(string, sizeof(string), "> %s has tasered %s", GetRPName(issuerid), GetRPName(playerid));
				SendNearbyMessage(issuerid, 30.0, COLOR_PURPLE, string);

		        Notification_Timer[playerid] = SetTimerEx("TaserCancels", 5000, false, "i", playerid);
 		    }
  		    else return SendPlayerErrorMessage(issuerid, " You just wasted a round, you cannot taser someone from this distance!");
		}
	}
    return 1;
}
 
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(IsPlayerConnected(playerid))
	{
		
	}
    return 1;
}
 
public OnPlayerExitVehicle(playerid, vehicleid)
{
    return 1;
}
 
public OnPlayerStateChange(playerid, PLAYER_STATE:newstate, PLAYER_STATE:oldstate)
{
	new string[256];
	new veh = GetPlayerVehicleID(playerid);
	new vehicleModel = GetVehicleModel(veh);
	
    if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		PlayerTextDrawShow(playerid, PlayerText:SpeedBoxFuelAmount);
		PlayerTextDrawShow(playerid, PlayerText:SpeedBoxFuelTitle);
		PlayerTextDrawShow(playerid, PlayerText:SpeedBoxSpeedAmount);
		PlayerTextDrawShow(playerid, PlayerText:SpeedBoxSpeedTitle);
			
	    new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

		if(engine == 1)
		{
	        Fuel_Timer[playerid] = SetTimerEx("FuelTimer", 10000, true, "i", playerid);
	        Vehicle_Timer[playerid] = SetTimerEx("VehicleTimer", 250, true, "i", playerid);
	        
	        printf("%s has entered a vehicle that has its engine on - timer started", GetName(playerid));
		}
		else
		{
			new tdstring1[500];
			format(tdstring1, sizeof(tdstring1), "TIP: Type /engine to start your vehicle");
			PlayerTextDrawSetString(playerid, PlayerText:Notification_Textdraw, tdstring1);
			PlayerTextDrawShow(playerid, PlayerText:Notification_Textdraw);
			
			Notification_Timer[playerid] = SetTimerEx("OnTimerCancels", 4000, false, "i", playerid);
		}
		
		if(IsDrivingVehicle(playerid))
	    {
	        if(DrivingBikePlayer[playerid] == 0 && GetVehicleModel(veh) == 462 && PlayerData[playerid][Admin_Level] < 5)
	        {
		        RemovePlayerFromVehicle(playerid);
	         	SendPlayerErrorMessage(playerid, " You are not completing a motorcycle driving test, you cannot use this vehicle!");

	            printf("%s was kicked out of a driving license vehicle", GetName(playerid));
			}
			else if(DrivingCarPlayer[playerid] == 0 && GetVehicleModel(veh) == 400 && PlayerData[playerid][Admin_Level] < 5)
	        {
		        RemovePlayerFromVehicle(playerid);
	         	SendPlayerErrorMessage(playerid, " You are not completing a car driving test, you cannot use this vehicle!");

	            printf("%s was kicked out of a driving license vehicle", GetName(playerid));
			}
			else if(DrivingTruckPlayer[playerid] == 0 && GetVehicleModel(veh) == 456 && PlayerData[playerid][Admin_Level] < 5)
	        {
		        RemovePlayerFromVehicle(playerid);
	         	SendPlayerErrorMessage(playerid, " You are not completing a truck driving test, you cannot use this vehicle!");

	            printf("%s was kicked out of a driving license vehicle", GetName(playerid));
			}
	    }
		if(IsRentalVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(IsPlayerRentingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not renting any vehicles, you cannot use this vehicle!");

                printf("%s was kicked out of a rental vehicle", GetName(playerid));
			}
	    }
		if(IsVIPVehicle(playerid) && PlayerData[playerid][Character_VIP] == 0 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        RemovePlayerFromVehicle(playerid);
            SendPlayerErrorMessage(playerid, " You are not a VIP member, you cannot use this vehicle!");

            printf("%s was kicked out of a vip vehicle", GetName(playerid));
	    }
		if(IsAdminVehicle(playerid) && PlayerData[playerid][Admin_Level] == 0)
	    {
	        RemovePlayerFromVehicle(playerid);
            SendPlayerErrorMessage(playerid, " You are not a Staff Member, you cannot use this vehicle!");

            printf("%s was kicked out of a staff vehicle", GetName(playerid));
	    }
	    if(IsLSPDVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 1 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the LSPD Faction, you cannot use this vehicle!");
                
                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 1 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;
   		        
                format(string, sizeof(string), "- You have stolen a LSPD vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsLSFDVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 2 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
		        SendPlayerErrorMessage(playerid, " You are not within the LSFD Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 2 && IsPlayerStealingCar[playerid] == 2)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a LSFD vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsLSMCVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 3 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
		        SendPlayerErrorMessage(playerid, " You are not within the LSMC Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 3 && IsPlayerStealingCar[playerid] == 3)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a LSMC vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
		if(IsPizzaVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Job] != 1 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Pizza Devliery Team, you cannot use this vehicle!");

                printf("%s was kicked out of a job vehicle", GetName(playerid));
			}
			/*else if(PlayerData[playerid][Character_Job] != 1 && PizzaJobDeliveryPlayer[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not currently doing a delivery service. Use /startjob to commence work!");

                printf("%s was kicked out of a job vehicle", GetName(playerid));
			}*/
			else if(PlayerData[playerid][Character_Faction] != 4 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a pizza delivery vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
		if(IsGarbageVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Job] != 2 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Garabge Collection Team, you cannot use this vehicle!");

                printf("%s was kicked out of a job vehicle", GetName(playerid));
			}
			/*else if(PlayerData[playerid][Character_Job] != 2 && GarbageJobPlayer[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not currently doing a collection service. Use /startjob to commence work!");

                printf("%s was kicked out of a job vehicle", GetName(playerid));
			}*/
			else if(PlayerData[playerid][Character_Faction] != 4 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Garbage Collection vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
		if(IsElectricianVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Job] != 3 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Electrician Guild, you cannot use this vehicle!");

                printf("%s was kicked out of a job vehicle", GetName(playerid));
			}
			/*else if(PlayerData[playerid][Character_Job] != 3 && ElectricianJobPlayer[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not currently doing an electrical route. Use /startjob to commence work!");

                printf("%s was kicked out of a job vehicle", GetName(playerid));
			}*/
			else if(PlayerData[playerid][Character_Faction] != 4 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen an Electrician Guild vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsBankVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 4 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Bank Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 4 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Bank vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsTowVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 5 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Two Co Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 5 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Towing vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsTaxiVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 6 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Taxi Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 6 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Taxi vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
		if(IsSchoolVehicle(playerid) && PlayerData[playerid][Character_Faction] != 16 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 16 && IsPlayerStealingCar[playerid] == 0 || PlayerData[playerid][Character_Faction] != 16 && IsTakingTest[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Taxi Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 16 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Taxi vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsTruckCoVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 7 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Trucking Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 7 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Trucking vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsDudeFixVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 8 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Dudefix Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 8 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Dudefix vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsMechanicVehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 9 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
		        SendPlayerErrorMessage(playerid, " You are not within the Mechanic Faction, you cannot use this vehicle!");

                printf("%s was kicked out of a faction vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 9 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a Mechanic vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsGang1Vehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 10 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Gang, you cannot use this vehicle!");

                printf("%s was kicked out of a gang vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 10 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a gang vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsGang2Vehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 11 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Gang, you cannot use this vehicle!");

                printf("%s was kicked out of a gang vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 11 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a gang vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    if(IsGang3Vehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 12 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Gang, you cannot use this vehicle!");

                printf("%s was kicked out of a gang vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 12 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a gang vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
		if(IsGang4Vehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 13 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Gang, you cannot use this vehicle!");

                printf("%s was kicked out of a gang vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 13 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a gang vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
		if(IsGang5Vehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 14 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Gang, you cannot use this vehicle!");

                printf("%s was kicked out of a gang vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 14 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a gang vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
		if(IsGang6Vehicle(playerid) && PlayerData[playerid][Character_Faction] != 5 && PlayerData[playerid][Admin_Level] < 5)
	    {
	        if(PlayerData[playerid][Character_Faction] != 15 && IsPlayerStealingCar[playerid] == 0)
   		    {
	        	RemovePlayerFromVehicle(playerid);
                SendPlayerErrorMessage(playerid, " You are not within the Gang, you cannot use this vehicle!");

                printf("%s was kicked out of a gang vehicle", GetName(playerid));
			}
			else if(PlayerData[playerid][Character_Faction] != 15 && IsPlayerStealingCar[playerid] == 1)
   		    {
   		        IsPlayerStealingCar[playerid] = 0;
  				IsPlayerStealingCarID[playerid] = 0;

                format(string, sizeof(string), "- You have stolen a gang vehicle, if you leave it, you will have to re /hotwire it!");
				SendClientMessage(playerid, COLOR_YELLOW, string);

                printf("%s has stolen a vehicle by hot wiring it", GetName(playerid));
			}
	    }
	    
     	if(IsTruckVehicle(vehicleModel) == 1 && PlayerData[playerid][Character_License_Truck] == 0)
		{
	        format(string, sizeof(string), "> You are attempting to operate a heavy vehicle without a truck license!");
			SendClientMessage(playerid, COLOR_TIP, string);
	    }
		else if(IsMotorcycle(vehicleModel) == 1 && PlayerData[playerid][Character_License_Motorcycle] == 0)
	    {
	        format(string, sizeof(string), "> You are attempting to operate a motorcycle without a motorcycle license!");
			SendClientMessage(playerid, COLOR_TIP, string);
		}
		else if(IsAircraft(vehicleModel) == 1 && PlayerData[playerid][Character_License_Flying] == 0)
	    {
        	format(string, sizeof(string), "> You are attempting to operate an air vehicle without a pilots license!");
			SendClientMessage(playerid, COLOR_TIP, string);
		}
	    else if(IsBoat(vehicleModel) == 1 && PlayerData[playerid][Character_License_Boat] == 0)
	    {
	        format(string, sizeof(string), "> You are attempting to operate a vessel without a boat license!");
			SendClientMessage(playerid, COLOR_TIP, string);
		}
		else if(IsBoat(vehicleModel) == 0 && IsAircraft(vehicleModel) == 0 && IsMotorcycle(vehicleModel) == 0 && IsTruckVehicle(vehicleModel) == 0 && PlayerData[playerid][Character_License_Car] == 0)
		{
            format(string, sizeof(string), "> You are attempting to operate a car without a drivers license!");
			SendClientMessage(playerid, COLOR_TIP, string);
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
		PlayerTextDrawHide(playerid, PlayerText:SpeedBoxFuelAmount);
		PlayerTextDrawHide(playerid, PlayerText:SpeedBoxFuelTitle);
		PlayerTextDrawHide(playerid, PlayerText:SpeedBoxSpeedAmount);
		PlayerTextDrawHide(playerid, PlayerText:SpeedBoxSpeedTitle);
		
	    KillTimer(Fuel_Timer[playerid]);
     	KillTimer(Vehicle_Timer[playerid]);

        Fuel_Timer[playerid] = 0;
		Vehicle_Timer[playerid] = 0;
		
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
		
		if(engine == 1)
		{
			printf("%s exited a vehicle without turning the engine off - timer killed", GetName(playerid));
		}
		else if(engine == 0)
		{
		    printf("%s exited a vehicle that wasn't on", GetName(playerid));
		}
	}
    return 1;
}
 
public OnPlayerEnterCheckpoint(playerid)
{
	if(GPSOn[playerid] == true)
	{
	    GPSOn[playerid] = false;
	    DisablePlayerCheckpoint(playerid);
	
		HasGPSBeenDisabled[playerid] = 0;
	
		new dstring[256];
		format(dstring, sizeof(dstring), "- You have arrived at your destination!");
		SendClientMessage(playerid, COLOR_YELLOW, dstring);
	}
	else if(DudefixJobAccepted == 1 && DudefixJobPlayer[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	}
	else if(ElectricianJobPlayer[playerid] == 1)
	{			
		if(ElectricianJobCount[playerid] < 5)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
			
			DisablePlayerCheckpoint(playerid);
			
			new string[256];
		    format(string, sizeof(string), "> %s removes tools from their belt and starts to repair the light", GetRPName(playerid));
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			GameTextForPlayer(playerid, "FIXING LIGHT...", 3000, 3);
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			ElectricianJobCount[playerid] += 1;
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just repaired a traffic light, move onto your next location!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
			new randIndex = random(sizeof(ElectricianJob1));
			SetPlayerCheckpoint(playerid, ElectricianJob1[randIndex][0],ElectricianJob1[randIndex][1],ElectricianJob1[randIndex][2], 3.0);
		}
		else if(ElectricianJobCount[playerid] == 5)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
			
			DisablePlayerCheckpoint(playerid);
			
			new string[256];
		    format(string, sizeof(string), "> %s removes tools from their belt and starts to repair the light", GetRPName(playerid));
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			GameTextForPlayer(playerid, "FIXING LIGHT...", 3000, 3);
				
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- Make your way back to base to collect your payment!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			SetPlayerCheckpoint(playerid, 996.7975, -1449.4368, 13.2415, 3.0);
				
			ElectricianJobCount[playerid] += 1;
		}
		else if(ElectricianJobCount[playerid] == 6)
		{		
			DisablePlayerCheckpoint(playerid);
					
			ElectricianJobCount[playerid] = 0;
			ElectricianJobPlayer[playerid] = 0;
				
			PlayerData[playerid][Character_Money] += 650;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$650");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have earnt $650 from completing your job route!");
			SendClientMessage(playerid, COLOR_ACTION, dstring);
				
			HasGPSBeenDisabled[playerid] = 0;

			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
								
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		}
	}
	else if(ElectricianJobPlayer[playerid] == 2)
	{				
		if(ElectricianJobCount[playerid] < 3)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
			
			DisablePlayerCheckpoint(playerid);
				
			new string[256];
		    format(string, sizeof(string), "> %s removes tools from their belt and starts to repair the payment booth", GetRPName(playerid));
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			GameTextForPlayer(playerid, "FIXING BOOTH...", 3000, 3);
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			ElectricianJobCount[playerid] += 1;
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just repaired a traffic light, move onto your next location!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
			new randIndex = random(sizeof(ElectricianJob2));
			SetPlayerCheckpoint(playerid, ElectricianJob2[randIndex][0],ElectricianJob2[randIndex][1],ElectricianJob2[randIndex][2], 3.0);
		}
		else if(ElectricianJobCount[playerid] == 3)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
			
			DisablePlayerCheckpoint(playerid);
				
			new string[256];
		    format(string, sizeof(string), "> %s removes tools from their belt and starts to repair the payment booth", GetRPName(playerid));
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			GameTextForPlayer(playerid, "FIXING BOOTH...", 3000, 3);
				
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- Make your way back to base to collect your payment!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			SetPlayerCheckpoint(playerid, 996.7975, -1449.4368, 13.2415, 3.0);
				
			ElectricianJobCount[playerid] += 1;
		}
		else if(ElectricianJobCount[playerid] == 4)
		{				
			DisablePlayerCheckpoint(playerid);
			
			ElectricianJobCount[playerid] = 0;
			ElectricianJobPlayer[playerid] = 0;
				
			PlayerData[playerid][Character_Money] += 150;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$150");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have earnt $150 from completing your job route!");
			SendClientMessage(playerid, COLOR_ACTION, dstring);
				
			HasGPSBeenDisabled[playerid] = 0;

			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
								
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		}
	}
	else if(ElectricianJobPlayer[playerid] == 3)
	{			
		if(ElectricianJobCount[playerid] < 4)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
			
			DisablePlayerCheckpoint(playerid);
			
			new string[256];
		    format(string, sizeof(string), "> %s removes tools from their belt and starts to repair the gas pump", GetRPName(playerid));
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			GameTextForPlayer(playerid, "FIXING PUMP...", 3000, 3);
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			ElectricianJobCount[playerid] += 1;
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just repaired a traffic light, move onto your next location!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
			new randIndex = random(sizeof(ElectricianJob3));
			SetPlayerCheckpoint(playerid, ElectricianJob3[randIndex][0],ElectricianJob3[randIndex][1],ElectricianJob3[randIndex][2], 3.0);
		}
		else if(ElectricianJobCount[playerid] == 4)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
			
			DisablePlayerCheckpoint(playerid);
			
			new string[256];
		    format(string, sizeof(string), "> %s removes tools from their belt and starts to repair the gas pump", GetRPName(playerid));
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			GameTextForPlayer(playerid, "FIXING PUMP...", 3000, 3);
				
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- Make your way back to base to collect your payment!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			SetPlayerCheckpoint(playerid, 996.7975, -1449.4368, 13.2415, 3.0);
				
			ElectricianJobCount[playerid] += 1;
		}
		else if(ElectricianJobCount[playerid] == 5)
		{		
			DisablePlayerCheckpoint(playerid);
					
			ElectricianJobCount[playerid] = 0;
			ElectricianJobPlayer[playerid] = 0;
				
			PlayerData[playerid][Character_Money] += 500;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$500");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have earnt $500 from completing your job route!");
			SendClientMessage(playerid, COLOR_ACTION, dstring);
				
			HasGPSBeenDisabled[playerid] = 0;

			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
								
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		}
	}
	else if(GarbageJobPlayer[playerid] == 1)
	{	
		if(GarbageJobCount[playerid] <= 10 && GarbageJobPosition[playerid] == 0)
		{	
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You cannot action this within a vehicle!");
			else
			{
				DisablePlayerCheckpoint(playerid);
				
				new Float:pX, Float:pY, Float:pZ;
			    GetPlayerPos(playerid, pX, pY, pZ);
			
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
		
				SetPlayerAttachedObject(playerid, GarbageObject[playerid], 1264, 6);
				
				GarbageJobPosition[playerid] = 1;
	
			    new string[256];
			    format(string, sizeof(string), "> %s picks up a rubbish item from the front door", GetRPName(playerid));
			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			    new vid;
			    new Float:vPos[3];
			
			    vid = GetNearestVehicleModel(playerid, 408); 
			
			    if(GetVehicleModel(vid) == 408)
			    {
			        GetVehiclePos(vid, vPos[0], vPos[1], vPos[2]);
			       
			        new Float:rearPos[3];
			        rearPos[0] = vPos[0] - 1.0; 
			        rearPos[1] = vPos[1];
			        rearPos[2] = vPos[2];
			        
			        SetPlayerCheckpoint(playerid, rearPos[0], rearPos[1], rearPos[2], 3.0);
			    }
			    else
			    {
			        SendPlayerErrorMessage(playerid, " There is no rubbish truck in your area. Use /stopjob now and go find one!");
			    }
			}
		}	
		else if(GarbageJobCount[playerid] < 5  && GarbageJobPosition[playerid] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You cannot action this within a vehicle!");
			else
			{
				DisablePlayerCheckpoint(playerid);
				
				GarbageJobCount[playerid] += 1;
				GarbageJobPosition[playerid] = 0;
				
				RemovePlayerAttachedObject(playerid, GarbageObject[playerid]);
		        GarbageObject[playerid] = 0;
					
				new string[256];
				format(string, sizeof(string), "> %s throws the rubbish into the back of the truck", GetRPName(playerid));
				SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
				
				ApplyAnimation(playerid, "INT_SHOP", "shop_shelf", 4.0, false, false, false, false, 0);
					
				new randomNumber = GetValidHouseJobNumber();
				SetPlayerCheckpoint(playerid, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z], 3.0);
			}
		}
		else if(GarbageJobCount[playerid] == 5)
		{
			DisablePlayerCheckpoint(playerid);
			
			GarbageJobCount[playerid] += 1;
			
			RemovePlayerAttachedObject(playerid, GarbageObject[playerid]);
	        GarbageObject[playerid] = 0;
			
			new string[256];
			format(string, sizeof(string), "> %s picks up a rubbish item from the front door and carries it to the truck", GetRPName(playerid));
			SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
			
			new dstring[256];
			format(dstring, sizeof(dstring), "- You now have a full truck, go and dump the truck at the depo!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			SetPlayerCheckpoint(playerid, 2188.8066,-1988.3834,13.5469, 3.0);
		}
		else if(GarbageJobCount[playerid] == 6)
		{
			DisablePlayerCheckpoint(playerid);
			
			GarbageJobCount[playerid] = 0;
			GarbageJobPlayer[playerid] = 0;
			
			PlayerData[playerid][Character_Money] += 600;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$600");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
			
			new string[256];
			format(string, sizeof(string), "> %s backs the truck up and dumps the contents onto the ground", GetRPName(playerid));
			SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
			
			HasGPSBeenDisabled[playerid] = 0;
			
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have earnt $600 from completing your job route!");
			SendClientMessage(playerid, COLOR_ACTION, dstring);
			
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		}
	}
	else if(PizzaJobDeliveryPlayer[playerid] == 1)
	{
		if(PizzaJobDeliveryCount[playerid] == 1)
		{
			SetPlayerCheckpoint(playerid, 374.7064, -117.2319, 1001.4922, 0.5);
			
			PizzaJobDeliveryCount[playerid] = 2;
		}
		else if(PizzaJobDeliveryCount[playerid] == 2)
		{
			PizzaJobDeliveryCount[playerid] = 3;
			
			ApplyAnimation(playerid, "ped", "ATM", 4.0, false, false, false, false, 0);
					
			new string[256];
			format(string, sizeof(string), "> %s logs into the register and prints off an order", GetRPName(playerid));
			SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
					
			SetPlayerCheckpoint(playerid, 373.7656, -113.9339, 1001.4922, 0.5);
		}
		else if(PizzaJobDeliveryCount[playerid] == 3)
		{
			PizzaJobDeliveryCount[playerid] = 4;
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			new string[256];
			format(string, sizeof(string), "> %s reaches down into the cabinet and pulls out the items and makes the pizza", GetRPName(playerid));
			SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
					
			SetPlayerCheckpoint(playerid, 376.8524, -113.7040, 1001.4922, 0.5);
		}
		else if(PizzaJobDeliveryCount[playerid] == 4)
		{
			PizzaJobDeliveryCount[playerid] = 5;
			
			ApplyAnimation(playerid, "ped", "ATM", 4.0, false, false, false, false, 0);
				
			new string[256];
			format(string, sizeof(string), "> %s places the pizza into the oven for cooking", GetRPName(playerid));
			SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
					
			SetPlayerCheckpoint(playerid, 379.0675, -114.3917, 1001.4922, 0.5);
		}
		else if(PizzaJobDeliveryCount[playerid] == 5)
		{
			PizzaJobDeliveryCount[playerid] = 6;
			
			ApplyAnimation(playerid, "ped", "ATM", 4.0, false, false, false, false, 0);
				
			new string[256];
			format(string, sizeof(string), "> %s removes the pizza from the oven and boxes it up", GetRPName(playerid));
			SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
			
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just completed making a pizza, go and deliver the pizza to the customer!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
			new randomNumber = GetValidHouseJobNumber();
			SetPlayerCheckpoint(playerid, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z], 3.0);
		}
		else if(PizzaJobDeliveryCount[playerid] == 6)
		{
			PizzaJobDeliveryCount[playerid] = 7;
				
			new string[256];
			format(string, sizeof(string), "> %s passes the pizza over to the customer and receives payment", GetRPName(playerid));
			SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
			
			ApplyAnimation(playerid, "ped", "ATM", 4.0, false, false, false, false, 0);
			
			new dstring[256];
			format(dstring, sizeof(dstring), "- Go back to the pizza store to get your payment!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
			SetPlayerCheckpoint(playerid, 2096.3193, -1787.8599, 13.5559, 3.0);
		}
		else if(PizzaJobDeliveryCount[playerid] == 7)
		{
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
			
			PizzaJobDeliveryPlayer[playerid] = 0;
			PizzaJobDeliveryCount[playerid] = 0;
				
			DisablePlayerCheckpoint(playerid);
			
			PlayerData[playerid][Character_Money] += 250;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$250");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
			
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have earnt $250 from completing your job route!");
			SendClientMessage(playerid, COLOR_ACTION, dstring);
		}
	}
	else if(RouteChosen[playerid] > 0)
	{
		if(TruckJobPlayer[playerid] == 1)
		{
			if(TruckJobCount[playerid] < 5)
			{			    
		   		TruckJobCount[playerid] ++;
		   		
		   		PlayerData[playerid][Character_Money] += 500;
		
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$500");
				GameTextForPlayer(playerid, text_value1, 3000, 1);
		
		        new dstring[256];
				format(dstring, sizeof(dstring), "- Your next local delivery has been marked on your map! (%d/5)", TruckJobCount[playerid]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
				new randomNumber = GetValidHouseJobNumber();
				SetPlayerCheckpoint(playerid, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z], 5.0);
			}
			else if(TruckJobCount[playerid] == 5)
			{
				DisablePlayerCheckpoint(playerid);
				
				RouteChosen[playerid] = 0;
				
			    TruckJobCount[playerid] = 0;
		   		TruckJobPlayer[playerid] = 0;
		
		   		PlayerData[playerid][Character_Money] += 500;
		
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$500");
				GameTextForPlayer(playerid, text_value1, 3000, 1);
		
		        new dstring[256];
				format(dstring, sizeof(dstring), "- You have completed your local parcel deliveries and received $500!");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				HasGPSBeenDisabled[playerid] = 0;
			}
		}
		else if(TruckJobPlayer[playerid] == 2)
		{
			if(TruckJobCount[playerid] < 5)
			{			    
		   		TruckJobCount[playerid] ++;
		
		        new dstring[256];
				format(dstring, sizeof(dstring), "- Your next delivery location has been updated on your GPS! (%d/5)", TruckJobCount[playerid]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
				new randIndex = random(sizeof(GoodTransport));
				SetPlayerCheckpoint(playerid, GoodTransport[randIndex][0],GoodTransport[randIndex][1],GoodTransport[randIndex][2], 10.0);
			}
			else if(TruckJobCount[playerid] == 5)
			{
				DisablePlayerCheckpoint(playerid);
				
				RouteChosen[playerid] = 0;
				
			    TruckJobCount[playerid] = 0;
		   		TruckJobPlayer[playerid] = 0;
		
		   		PlayerData[playerid][Character_Money] += 800;
		
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$800");
				GameTextForPlayer(playerid, text_value1, 3000, 1);
		
		        new dstring[256];
				format(dstring, sizeof(dstring), "- You have completed your local parcel deliveries and received $800! Head back to the yard");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				HasGPSBeenDisabled[playerid] = 0;
			}
		}
	}
	if(TruckJobMoneyPlayer[playerid] > 0)
	{
		if(TruckJobMoneyPlayer[playerid] == 1)
		{
		    DisablePlayerCheckpoint(playerid);
		    
	     	TruckJobMoneyPlayer[playerid] = 2;
	
	        new dstring[256];
			format(dstring, sizeof(dstring), "- Drop the money off at the bank!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
	
	        SetPlayerCheckpoint(playerid, 997.4561, -1218.0929, 16.5920, 20.0);
	
			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} ALL UNITS BE ADVISED TRUCKING CO HAS PICKED UP THE MONEY FROM DOCKS", GetName(playerid));
			SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
	
			print("Truck Money Job Final Phase");
		}
		else if(TruckJobMoneyPlayer[playerid] == 2)
		{
		    DisablePlayerCheckpoint(playerid);
	    
	     	TruckJobMoneyStarted = 0;
	      	TruckJobMoneyPlayer[playerid] = 0;
	
	        new dstring[256];
			format(dstring, sizeof(dstring), "- Congratulations, you have just completed a money drop for the bank! Here is your reward $2000!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			HasGPSBeenDisabled[playerid] = 0;
			
			PlayerData[playerid][Character_Money] += 2000;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$2000");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
	
			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} All Units, Trucking Company has completed their drop off", GetName(playerid));
			SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
	
			print("Truck Money Job Final Phase");
		}
	}
	else if(LSPDJobHouseInpPlayer[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    
	    LSPDJobHouseInspection = 0;
	    LSPDJobHouseInspectionAccepted = 0;
	    LSPDJobHouseInpPlayer[playerid] = 0;
	
		LSPDJobTimer = 0;
		LSPDJobTimerExp = 0;
	    
	    PlayerData[playerid][Character_Money] += 1500;
	
		new text_value1[256];
		format(text_value1, sizeof(text_value1), "~g~~h~+$1500");
		GameTextForPlayer(playerid, text_value1, 3000, 1);
	
		new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s has just arrived on scene of the property inspection job", GetName(playerid));
		SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
		
		HasGPSBeenDisabled[playerid] = 0;
	    
	    print("LSPD Job Reached");
	}
	else if(LSFDJobHouseFirePlayer[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    
	    LSFDJobHouseFirePlayer[playerid] = 0;
	
		new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s has just arrived on scene of the property fire job", GetName(playerid));
		SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);
		
		HasGPSBeenDisabled[playerid] = 0;

	    print("LSFD Job Reached");
	}
	else if(MechanicJobPlayer[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    
	    new Float:vehx, Float:vehy, Float:vehz;
     	GetVehiclePos(MechanicJobID, vehx, vehy, vehz);

		if(IsPlayerInRangeOfPoint(playerid, 4.0, vehx, vehy, vehz))
		{
		    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, true, false, false, false, 0);
		    
		    Repair_Timer[playerid] = SetTimerEx("RepairTimer", 5000, true, "i", playerid);

		    print("Mechanic Job Reached - Vehicle found");
		}
	}
	else if(HasPlayerRobbedAmmunation[playerid] > 0)
	{
	    DisablePlayerCheckpoint(playerid);
	    
	    if(HasPlayerRobbedAmmunationPoint[playerid] == 1)
	    {
	        HasPlayerRobbedAmmunationPoint[playerid] = 2;
	        GivePlayerWeapon(playerid, WEAPON_COLT45, 6);

            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
            
            new string[256];
		    format(string, sizeof(string), "> %s has just removed a pistol from the rack", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

			SetPlayerCheckpoint(playerid, 311.3756, -143.6519, 1004.0547, 2.0);
	    }
	    else if(HasPlayerRobbedAmmunationPoint[playerid] == 2)
	    {
	        HasPlayerRobbedAmmunationPoint[playerid] = 3;
	        SetPlayerAmmo(playerid, WEAPON_COLT45, 24);

            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);

            new string[256];
		    format(string, sizeof(string), "> %s has just removed a few mags from the rack", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

			SetPlayerCheckpoint(playerid, 307.9726, -143.1913, 999.6016, 2.0);
	    }
	    else if(HasPlayerRobbedAmmunationPoint[playerid] == 3)
	    {
	        HasPlayerRobbedAmmunationPoint[playerid] = 0;
	        SetPlayerAmmo(playerid, WEAPON_COLT45, 24);

            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);

            new string[256];
		    format(string, sizeof(string), "> %s has just emptied the cash register", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			new amountrobbed;
			amountrobbed = 1 + random(2500);

			PlayerData[playerid][Character_Money] += amountrobbed;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$%d", amountrobbed);
			GameTextForPlayer(playerid, text_value1, 3000, 1);

			format(string, sizeof(string), "- You have just stolen $%d.00 worth of money from the vault, get out of there before the cops show up!", amountrobbed);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			
			printf("Ammunation Robbery - Player Has Successfully Robbed The Store");
	    }
	}
	else if(HasGPSBeenDisabled[playerid] == 0)
	{
		DisablePlayerCheckpoint(playerid);
	}
    return 1;
}
 
public OnPlayerLeaveCheckpoint(playerid)
{
    return 1;
}
 
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(DrivingBikeCount[playerid] > 0 && DrivingBikePlayer[playerid] == 1 && IsDrivingVehicle(playerid))
	{
	    new playerVehicleID = GetPlayerVehicleID(playerid);

		if (GetVehicleModel(playerVehicleID) == 462)
		{
		    DisablePlayerCheckpoint(playerid);

            DrivingBikeCount[playerid] ++;

	        new dstring[256];
			format(dstring, sizeof(dstring), "- Your next marker is on your map! (%d/18)", DrivingBikeCount[playerid]-1);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			if(DrivingBikeCount[playerid] == 2) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1355.1953,-1418.6083,12.9861, 1271.8380,-1398.6841,12.6198, 5.0); }
			else if(DrivingBikeCount[playerid] == 3) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1271.8380,-1398.6841,12.6198, 1211.6638,-1397.8444,12.8466, 5.0); }
			else if(DrivingBikeCount[playerid] == 4) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1211.6638,-1397.8444,12.8466, 1199.1884,-1406.5869,12.8528, 5.0); }
			else if(DrivingBikeCount[playerid] == 5) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1199.1884,-1406.5869,12.8528, 1194.0056,-1470.3920,12.9802, 5.0); }
			else if(DrivingBikeCount[playerid] == 6) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1194.0056,-1470.3920,12.9802, 1199.9183,-1573.2540,12.9779, 5.0); }
			else if(DrivingBikeCount[playerid] == 7) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1199.9183,-1573.2540,12.9779, 1272.2620,-1574.9789,12.9782, 5.0); }
			else if(DrivingBikeCount[playerid] == 8) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1272.2620,-1574.9789,12.9782, 1294.0011,-1585.9316,12.9782, 5.0); }
			else if(DrivingBikeCount[playerid] == 9) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1294.0011,-1585.9316,12.9782, 1299.2527,-1790.5067,12.9785, 5.0); }
			else if(DrivingBikeCount[playerid] == 10) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1299.2527,-1790.5067,12.9785, 1304.2068,-1847.6902,12.9778, 5.0); }
			else if(DrivingBikeCount[playerid] == 11) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1304.2068,-1847.6902,12.9778, 1309.7480,-1833.2544,12.9788, 5.0); }
			else if(DrivingBikeCount[playerid] == 12) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1309.7480,-1833.2544,12.9788, 1310.1819,-1716.8820,12.9803, 5.0); }
			else if(DrivingBikeCount[playerid] == 13) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1310.1819,-1716.8820,12.9803, 1310.5149,-1603.0090,12.9803, 5.0); }
			else if(DrivingBikeCount[playerid] == 14) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1310.5149,-1603.0090,12.9803, 1314.0156,-1574.5985,12.9786, 5.0); }
			else if(DrivingBikeCount[playerid] == 15) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1314.0156,-1574.5985,12.9786, 1343.3987,-1492.9025,12.9881, 5.0); }
			else if(DrivingBikeCount[playerid] == 16) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1343.3987,-1492.9025,12.9881, 1362.5438,-1441.2408,13.1347, 5.0); }
			else if(DrivingBikeCount[playerid] == 17) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1362.5438,-1441.2408,13.1347, 1376.4298,-1437.6281,13.1409, 5.0); }
			else if(DrivingBikeCount[playerid] == 18) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_FINISH, 1376.4298,-1437.6281,13.1409, 0.0,0.0,0.0, 5.0); }
			else if(DrivingBikeCount[playerid] == 19)
			{
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));

			    DrivingBikePlayer[playerid] = 0;
				DrivingBikeCount[playerid] = 0;

				PlayerData[playerid][Character_License_Motorcycle] = 1;

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_motorcycle` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_License_Motorcycle], GetName(playerid));
				mysql_tquery(connection, updatequery);

				format(dstring, sizeof(dstring), "- You have just obtained your motorocycle license");
				SendClientMessage(playerid, COLOR_ACTION, dstring);
				
				HasGPSBeenDisabled[playerid] = 0;
				
				DisablePlayerRaceCheckpoint(playerid);
			}
		}
	}
	else if(DrivingCarCount[playerid] > 0 && DrivingCarPlayer[playerid] == 1 && IsDrivingVehicle(playerid))
	{
	    new playerVehicleID = GetPlayerVehicleID(playerid);

		if (GetVehicleModel(playerVehicleID) == 400)
		{
		    DisablePlayerCheckpoint(playerid);

            DrivingCarCount[playerid] ++;

	        new dstring[256];
			format(dstring, sizeof(dstring), "- Your next marker is on your map! (%d/18)", DrivingCarCount[playerid]-1);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			if(DrivingCarCount[playerid] == 2) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1355.1953,-1418.6083,12.9861, 1271.8380,-1398.6841,12.6198, 5.0); }
			else if(DrivingCarCount[playerid] == 3) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1271.8380,-1398.6841,12.6198, 1211.6638,-1397.8444,12.8466, 5.0); }
			else if(DrivingCarCount[playerid] == 4) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1211.6638,-1397.8444,12.8466, 1199.1884,-1406.5869,12.8528, 5.0); }
			else if(DrivingCarCount[playerid] == 5) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1199.1884,-1406.5869,12.8528, 1194.0056,-1470.3920,12.9802, 5.0); }
			else if(DrivingCarCount[playerid] == 6) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1194.0056,-1470.3920,12.9802, 1199.9183,-1573.2540,12.9779, 5.0); }
			else if(DrivingCarCount[playerid] == 7) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1199.9183,-1573.2540,12.9779, 1272.2620,-1574.9789,12.9782, 5.0); }
			else if(DrivingCarCount[playerid] == 8) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1272.2620,-1574.9789,12.9782, 1294.0011,-1585.9316,12.9782, 5.0); }
			else if(DrivingCarCount[playerid] == 9) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1294.0011,-1585.9316,12.9782, 1299.2527,-1790.5067,12.9785, 5.0); }
			else if(DrivingCarCount[playerid] == 10) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1299.2527,-1790.5067,12.9785, 1304.2068,-1847.6902,12.9778, 5.0); }
			else if(DrivingCarCount[playerid] == 11) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1304.2068,-1847.6902,12.9778, 1309.7480,-1833.2544,12.9788, 5.0); }
			else if(DrivingCarCount[playerid] == 12) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1309.7480,-1833.2544,12.9788, 1310.1819,-1716.8820,12.9803, 5.0); }
			else if(DrivingCarCount[playerid] == 13) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1310.1819,-1716.8820,12.9803, 1310.5149,-1603.0090,12.9803, 5.0); }
			else if(DrivingCarCount[playerid] == 14) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1310.5149,-1603.0090,12.9803, 1314.0156,-1574.5985,12.9786, 5.0); }
			else if(DrivingCarCount[playerid] == 15) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1314.0156,-1574.5985,12.9786, 1343.3987,-1492.9025,12.9881, 5.0); }
			else if(DrivingCarCount[playerid] == 16) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1343.3987,-1492.9025,12.9881, 1362.5438,-1441.2408,13.1347, 5.0); }
			else if(DrivingCarCount[playerid] == 17) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1362.5438,-1441.2408,13.1347, 1376.4298,-1437.6281,13.1409, 5.0); }
			else if(DrivingCarCount[playerid] == 18) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_FINISH, 1376.4298,-1437.6281,13.1409, 0.0,0.0,0.0, 5.0); }
			else if(DrivingCarCount[playerid] == 19)
			{
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));

			    DrivingCarPlayer[playerid] = 0;
				DrivingCarCount[playerid] = 0;

				PlayerData[playerid][Character_License_Car] = 1;

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_car` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_License_Car], GetName(playerid));
				mysql_tquery(connection, updatequery);

				format(dstring, sizeof(dstring), "- You have just obtained your car license");
				SendClientMessage(playerid, COLOR_ACTION, dstring);
				
				HasGPSBeenDisabled[playerid] = 0;
				
				DisablePlayerRaceCheckpoint(playerid);
			}
		}
	}
	else if(DrivingTruckCount[playerid] > 0 && DrivingTruckPlayer[playerid] == 1 && IsDrivingVehicle(playerid))
	{
	    new playerVehicleID = GetPlayerVehicleID(playerid);

		if (GetVehicleModel(playerVehicleID) == 456)
		{
		    DisablePlayerCheckpoint(playerid);

            DrivingTruckCount[playerid] ++;

	        new dstring[256];
			format(dstring, sizeof(dstring), "- Your next marker is on your map! (%d/18)", DrivingTruckCount[playerid]-1);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			if(DrivingTruckCount[playerid] == 2) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1355.1953,-1418.6083,12.9861, 1271.8380,-1398.6841,12.6198, 5.0); }
			else if(DrivingTruckCount[playerid] == 3) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1271.8380,-1398.6841,12.6198, 1211.6638,-1397.8444,12.8466, 5.0); }
			else if(DrivingTruckCount[playerid] == 4) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1211.6638,-1397.8444,12.8466, 1199.1884,-1406.5869,12.8528, 5.0); }
			else if(DrivingTruckCount[playerid] == 5) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1199.1884,-1406.5869,12.8528, 1194.0056,-1470.3920,12.9802, 5.0); }
			else if(DrivingTruckCount[playerid] == 6) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1194.0056,-1470.3920,12.9802, 1199.9183,-1573.2540,12.9779, 5.0); }
			else if(DrivingTruckCount[playerid] == 7) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1199.9183,-1573.2540,12.9779, 1272.2620,-1574.9789,12.9782, 5.0); }
			else if(DrivingTruckCount[playerid] == 8) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1272.2620,-1574.9789,12.9782, 1294.0011,-1585.9316,12.9782, 5.0); }
			else if(DrivingTruckCount[playerid] == 9) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1294.0011,-1585.9316,12.9782, 1299.2527,-1790.5067,12.9785, 5.0); }
			else if(DrivingTruckCount[playerid] == 10) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1299.2527,-1790.5067,12.9785, 1304.2068,-1847.6902,12.9778, 5.0); }
			else if(DrivingTruckCount[playerid] == 11) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1304.2068,-1847.6902,12.9778, 1309.7480,-1833.2544,12.9788, 5.0); }
			else if(DrivingTruckCount[playerid] == 12) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1309.7480,-1833.2544,12.9788, 1310.1819,-1716.8820,12.9803, 5.0); }
			else if(DrivingTruckCount[playerid] == 13) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1310.1819,-1716.8820,12.9803, 1310.5149,-1603.0090,12.9803, 5.0); }
			else if(DrivingTruckCount[playerid] == 14) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1310.5149,-1603.0090,12.9803, 1314.0156,-1574.5985,12.9786, 5.0); }
			else if(DrivingTruckCount[playerid] == 15) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1314.0156,-1574.5985,12.9786, 1343.3987,-1492.9025,12.9881, 5.0); }
			else if(DrivingTruckCount[playerid] == 16) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1343.3987,-1492.9025,12.9881, 1362.5438,-1441.2408,13.1347, 5.0); }
			else if(DrivingTruckCount[playerid] == 17) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1362.5438,-1441.2408,13.1347, 1376.4298,-1437.6281,13.1409, 5.0); }
			else if(DrivingTruckCount[playerid] == 18) { SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_FINISH, 1376.4298,-1437.6281,13.1409, 0.0,0.0,0.0, 5.0); }
			else if(DrivingTruckCount[playerid] == 19)
			{
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));

			    DrivingTruckPlayer[playerid] = 0;
				DrivingTruckCount[playerid] = 0;

				PlayerData[playerid][Character_License_Truck] = 1;

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_truck` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_License_Truck], GetName(playerid));
				mysql_tquery(connection, updatequery);

				format(dstring, sizeof(dstring), "- You have just obtained your truck license");
				SendClientMessage(playerid, COLOR_ACTION, dstring);
				
				HasGPSBeenDisabled[playerid] = 0;
				
				DisablePlayerRaceCheckpoint(playerid);
			}
		}
	}
    return 1;
}
 
public OnPlayerLeaveRaceCheckpoint(playerid)
{
    return 1;
}
 
public OnRconCommand(cmd[])
{
    return 1;
}
 
public OnPlayerRequestSpawn(playerid)
{
    return 1;
}
 
public OnObjectMoved(objectid)
{
    return 1;
}
 
public OnPlayerObjectMoved(playerid, objectid)
{
    return 1;
}
 
public OnPlayerPickUpPickup(playerid, pickupid)
{
	if (pickupid == pickup_Health)
    {
		new Float:health;
		GetPlayerHealth(playerid, health);
		
		if(health < 40)
		{
        	SetPlayerHealth(playerid, 100.0);
		}
		else return SendPlayerErrorMessage(playerid, " You cannot use this healing station, because you have too much health!");
    }
    return 1;
}
 
public OnVehicleMod(playerid, vehicleid, componentid)
{
    return 1;
}
 
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    return 1;
}
 
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    return 1;
}
 
public OnPlayerSelectedMenuRow(playerid, row)
{
    return 1;
}
 
public OnPlayerExitedMenu(playerid)
{
    return 1;
}
 
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    return 1;
}
 
public OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)
{
    new veh = GetPlayerVehicleID(playerid);
	
	if(IsPlayerInRangeOfPoint(playerid, 5, 1943.48840, -1984.64282, 13.48357) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && newkeys == KEY_NO)
	{
		if(VehicleData[veh][Vehicle_Owner] != PlayerData[playerid][Character_Name]) return SendPlayerErrorMessage(playerid, " You do not own this vehicle, you cannot modify it!");
		else
		{
			if(PlayerData[playerid][Character_Money] < 500) return SendPlayerErrorMessage(playerid, " You do not have enough money to purchase a new colour!");
			else
			{ 
				HasPlayerEnteredSprayUnit[playerid] = 1;
				MoveDynamicObject(PaintSprayDoor, 1951.66956, -1984.35400, 13.48357, 2, 0.00000, 0.00000, 0);
				
				SetPlayerCameraPos(playerid, 1937.3737,-1987.0834,15.4767);
				SetPlayerCameraLookAt(playerid, 1944.3542,-1982.2830,13.5469);
				
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
				
				ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
			}		
		}
	}
	if(IsPlayerInViewState_Binco[playerid] == 1)
	{				
		if(newkeys == KEY_SPRINT)
		{
		    if(newkeys == KEY_SPRINT)
		    {
			    do
			    {
			        currentSkinIndex[playerid] ++;
			
			        if (currentSkinIndex[playerid] >= 31) 
			        {
			            currentSkinIndex[playerid] = 0;
			        }
			
			    } while (PurcasheableSkins[currentSkinIndex[playerid]][SkinType] != 1);
			
				new tdstring1[500];
				format(tdstring1, sizeof(tdstring1), "Welcome to the ~y~Binco Clothing Store~n~~n~~w~Name: %s~n~Cost: $%d~n~~n~Press ~g~Jump~w~ To Change Skins~n~~n~Press ~g~Fire~w~ To Confirm~n~~n~Press ~r~Aim~w~ To Leave or Purchase", PurcasheableSkins[currentSkinIndex[playerid]][SkinName], PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]);
				PlayerTextDrawSetString(playerid, PlayerText:Store_Textdraw, tdstring1);
				PlayerTextDrawShow(playerid, PlayerText:Store_Textdraw);

			    SetPlayerSkin(playerid, PurcasheableSkins[currentSkinIndex[playerid]][SkinID]);
		    }
		}
		if(newkeys == KEY_FIRE)
	    {
			if(PlayerData[playerid][Character_Money] < PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]) return SendPlayerErrorMessage(playerid, " You do not have enough money to purchase a new skin!");
	  		if(PlayerData[playerid][Character_Skin_1] > 0 || PlayerData[playerid][Character_Skin_2] > 0 || PlayerData[playerid][Character_Skin_3] > 0)
	        {
	            new option1[256], option2[256], option3[256], options[256];
	            
	            if(PlayerData[playerid][Character_Skin_1] == 0)
	            {
	            	format(option1, sizeof(option1), "Outfit 1 - [Nothing Saved]");
				}
				else if(PlayerData[playerid][Character_Skin_1] != 0)
				{
					format(option1, sizeof(option1), "Outfit 1");
				}
				
				if(PlayerData[playerid][Character_Skin_2] == 0)
	            {
	            	format(option2, sizeof(option2), "Outfit 2 - [Nothing Saved]");
				}
				else if(PlayerData[playerid][Character_Skin_2] != 0)
				{
					format(option2, sizeof(option2), "Outfit 2");
				}
				
				if(PlayerData[playerid][Character_Skin_3] == 0)
	            {
	            	format(option3, sizeof(option3), "Outfit 3 - [Nothing Saved]");
				}
				else if(PlayerData[playerid][Character_Skin_3] != 0)
				{
					format(option3, sizeof(option3), "Outfit 3");
				}
				
				format(options, sizeof(options), "%s\n%s\n%s", option1, option2, option3);
				
				ShowPlayerDialog(playerid, DIALOG_PLAYER_SHOP_SKIN, DIALOG_STYLE_LIST, "Select your clothing slot", options, "Set", "Close");
	        }
		}
		if(newkeys == KEY_AIM)
	    {
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid,true);
			SetPlayerVirtualWorld(playerid, Binco_Current_VW[playerid]);
			
			if(Binco_New_Outfit[playerid] == 1)
			{ 
				SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]); 
				
				PlayerData[playerid][Character_Money] -= PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney];
				
				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$%d",PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]);
				GameTextForPlayer(playerid, text_value, 3000, 1);
				
				new dstring[256];
				format(dstring, sizeof(dstring), "- You have just purchased a skin for $%d", PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]);
				SendClientMessage(playerid, COLOR_ACTION, dstring);
			}
			else if(Binco_New_Outfit[playerid] == 2) 
			{ 
				SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_2]); 
				
				PlayerData[playerid][Character_Money] -= PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney];
				
				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$%d",PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]);
				GameTextForPlayer(playerid, text_value, 3000, 1);
				
				new dstring[256];
				format(dstring, sizeof(dstring), "- You have just purchased a skin for $%d", PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]);
				SendClientMessage(playerid, COLOR_ACTION, dstring);
			}
			else if(Binco_New_Outfit[playerid] == 3) 
			{ 
				SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_3]); 
				
				PlayerData[playerid][Character_Money] -= PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney];
				
				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$%d",PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]);
				GameTextForPlayer(playerid, text_value, 3000, 1);
				
				new dstring[256];
				format(dstring, sizeof(dstring), "- You have just purchased a skin for $%d", PurcasheableSkins[currentSkinIndex[playerid]][SkinMoney]);
				SendClientMessage(playerid, COLOR_ACTION, dstring);
			}
			else if(Binco_New_Outfit[playerid] == 0) 
			{ 	
				SetPlayerSkin(playerid, Binco_Current_Outfit[playerid]); 
			}
			
			if(GetPlayerSkin(playerid) == 0)
			{
			    SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
			}
			
			IsPlayerInViewState_Binco[playerid] = 0;
			Binco_Current_Outfit[playerid] = 0;
			Binco_New_Outfit[playerid] = 0;
			Binco_Current_VW[playerid] = 0;
			currentSkinIndex[playerid] = 0;
			
			PlayerTextDrawHide(playerid, PlayerText:Store_Textdraw);
		}
    }
    if(newkeys == KEY_SECONDARY_ATTACK)
    {
  		DynamicDoorEntry(playerid);
    }
	if(newkeys == KEY_FIRE && GetPlayerWeapon(playerid) == WEAPON_FIREEXTINGUISHER || newkeys == KEY_FIRE && GetVehicleModel(veh) == 407)
    {
        if(PlayerData[playerid][Character_Faction] == 2 && LSFDJobHouseFire == 1 && LSFDJobHouseFireAccepted == 1)
		{
		    if(LSFDJobHouseFireHealth > 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 10.0, HouseData[LSFDJobHouseFireID][House_Outside_X], HouseData[LSFDJobHouseFireID][House_Outside_Y], HouseData[LSFDJobHouseFireID][House_Outside_Z]))
			    {
			        LSFDJobHouseFireHealth -= 10;
			        
			        printf("LSFD Job Fire Health: %d", LSFDJobHouseFireHealth);
			    }
			}
			else if(LSFDJobHouseFireHealth == 0)
			{
			    LSFDJobHouseFire = 0;
			    LSFDJobHouseFireHealth = 0;
			    LSFDJobHouseFireID = 0;

			    DestroyObject(LSFDJobHouseFireObject);
			    DestroyObject(LSFDJobHouseSmokeObject);

			    LSFDJobHouseFireObject = 0;
			    LSFDJobHouseSmokeObject = 0;

			    for (new i = 0; i < MAX_PLAYERS; i++)
				{
					LSFDJobHouseFirePlayer[playerid] = 0;
				}

			    new dstring[256];
				format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} The recent property fire has been put out by your team! Well done");
				SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);
				
				PlayerData[playerid][Character_Money] += 2500;
				
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$2500");
				GameTextForPlayer(playerid, text_value1, 3000, 1);

				print("LSFD Job Fire Completed");
			}
		}
   	}
	if(newkeys == KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new Float:vehiclehealth;

		GetVehicleHealth(vehicleid, vehiclehealth);
			
		new string[156];
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

		if(engine == 1)
		{
			SetVehicleParamsEx(vehicleid, false, lights, alarm, doors, bonnet, boot, objective);

			format(string, sizeof(string), "> %s has just turned the key of their vehicle off", GetRPName(playerid));
	   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

   			PlayerTextDrawSetString(playerid, SpeedBoxFuelAmount, "-");

   			KillTimer(Fuel_Timer[playerid]);
   			KillTimer(Vehicle_Timer[playerid]);

   			Fuel_Timer[playerid] = 0;
			Vehicle_Timer[playerid] = 0;

			printf("%s has turned thier vehicle off", GetName(playerid));
		}
		else
		{
		    if(vehiclehealth <= 300) return SendPlayerErrorMessage(playerid, " This vehicle is two damaged to turn on, call a mechanic!");
			else if(vehiclehealth > 300)
			{
			    SetVehicleParamsEx(vehicleid, true, lights, alarm, doors, bonnet, boot, objective);

			    format(string, sizeof(string), "> %s has just turned the key of their vehicle around and turned it on", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

				Fuel_Timer[playerid] = SetTimerEx("FuelTimer", 10000, true, "i", playerid);
				Vehicle_Timer[playerid] = SetTimerEx("VehicleTimer", 250, true, "i", playerid);

				printf("%s has turned thier vehicle on", GetName(playerid));
			}
		}
	}
   	if(newkeys == KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
  	{
  	    if(IsTowVehicle(playerid) && PlayerData[playerid][Character_Faction] == 5)
  	    {
		    new playerVehicleID = GetPlayerVehicleID(playerid);

		    if (GetVehicleModel(playerVehicleID) == 525)
			{
		        new Float:pX, Float:pY, Float:pZ;
		        GetPlayerPos(playerid, pX, pY, pZ);

		        //new found = false;

		        for (new vid = 0; vid < MAX_VEHICLES; vid++)
				{
		            if (vid == playerVehicleID) continue;

		            new Float:vX, Float:vY, Float:vZ;
		            GetVehiclePos(vid, vX, vY, vZ);

		            if (floatabs(pX - vX) < 7.0 && floatabs(pY - vY) < 7.0 && floatabs(pZ - vZ) < 7.0)
					{
		                //found = true;

		                if (IsTrailerAttachedToVehicle(playerVehicleID))
						{
		                    DetachTrailerFromVehicle(playerVehicleID);
		                }
						else
						{
		                    AttachTrailerToVehicle(vid, playerVehicleID);

		                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s lowers the arm on the tow vehicle and attaches it to the vehicle behind them", GetRPName(playerid));

		                    new dstring[256];
		                    format(dstring, sizeof(dstring), "- You have just hooked up a car to your tow vehicle!");
		                    SendClientMessage(playerid, COLOR_YELLOW, dstring);
		                }
		                break;
		            }
		        }
		    }
		}
	}
    return 1;
}
 
public OnRconLoginAttempt(ip[], password[], success)
{
    return 1;
}
 
public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerLogged[playerid])
		{
            CheckUserMoney(playerid);
			CheckUserWeaponHack(playerid);
			CheckUserAmmoHack(playerid);
			CheckUserHealthHack(playerid);
		}
	}
	
    return 1;
}
 
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(HasPlayerUsedMask[playerid] > 0)
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
		
		Attach3DTextLabelToPlayer(Text3D:textLabelID[playerid], playerid, 0.0, 0.0, 0.0);
	}
    return 1;
}
 
public OnPlayerStreamOut(playerid, forplayerid)
{
    return 1;
}
 
public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(IsPlayerConnected(forplayerid))
	{
		if(VehicleData[vehicleid][Vehicle_Lock_Status] == 1)	
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, true, bonnet, boot, objective);							
		}
	}
    return 1;
}
 
public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}
 
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    switch(dialogid)
    {
	    case DIALOG_LOGIN:
	    {
	        if(!response) return Kick(playerid);
	        if(strcmp(inputtext, PlayerData[playerid][Character_Password]) == 0)
	        {
	        
	            if(PlayerData[playerid][Character_Registered] == 0)
	            {
	                ShowPlayerDialog(playerid, DIALOG_REGISTER_EMAIL, DIALOG_STYLE_INPUT, "Account Creation - Email", "(YOU HAVEN'T COMPLETED YOUR CHARACTER REGISTRATION YET, PLEASE START FROM THE BEGINING)\n\nPlease enter a valid email address\n\n(This email will be used for the future User Control Panel system on the website!)", "Next", "Quit");
	            }
	            else
	            {
		        	IsPlayerLogged[playerid] = 1;

				    TogglePlayerSpectating(playerid, false);

					LoginSpawn(playerid);
				}
	        }
	        else
	        {
	            ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Open Roleplay - Login [Incorrect Password]", "Welcome back, %s!\n\nThis account has been registered before.\n\nPlease enter in the accounts password below:", "Login", "Quit", GetName(playerid));
	        }
	    }
	    case DIALOG_REGISTER:
	    {
	        if(!response) return Kick(playerid);
	        if(strlen(inputtext) <= 5) return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Open Roleplay - Registration", "You have failed to provide a long enough or secure enough password!\n\nThis account has not been registered before on this server.\n\nPlease enter in a password that you will remember.", "Register", "Quit");
			
			new string[129];
			format(string, sizeof(string), "%s", inputtext);
			PlayerData[playerid][Character_Password] = string;
			
			new query[2000];
	        mysql_format(connection, query, sizeof(query), "INSERT INTO `user_accounts` (`character_name`, `character_password`) VALUES ('%e', '%s')", PlayerData[playerid][Character_Name], PlayerData[playerid][Character_Password]);
			mysql_tquery(connection, query, "OnAccountCreation", "i", playerid);
			
	        ShowPlayerDialog(playerid, DIALOG_REGISTER_EMAIL, DIALOG_STYLE_INPUT, "Account Creation - Email", "Please enter a valid email address\n\n(This email will be used for the future User Control Panel system on the website)", "Next", "Quit");
	    }
	    case DIALOG_REGISTER_EMAIL:
	    {
	   		if(!response) return Kick(playerid);
	        if(!strlen(inputtext)) return  ShowPlayerDialog(playerid, DIALOG_REGISTER_EMAIL, DIALOG_STYLE_INPUT, "Account Creation - Email", "You did not provide a valid email address!\n\nPlease enter a valid email address\n\n(This email will be used for the future User Control Panel system on the website!)", "Next", "Quit");
			if(strfind(inputtext, "@") == -1) return  ShowPlayerDialog(playerid, DIALOG_REGISTER_EMAIL, DIALOG_STYLE_INPUT, "Account Creation - Email", "You did not provide a valid email address!\n\nPlease enter a valid email address\n\n(This email will be used for the future User Control Panel system on the website!)", "Next", "Quit");

			else
			{
			    new IPValue[16];
            	PlayerData[playerid][Account_IP] = GetPlayerIp(playerid, IPValue, sizeof(IPValue));
            	
            	new string[129];
				format(string, sizeof(string), "%s", inputtext);
				PlayerData[playerid][Account_Email] = string;
            
	        	ShowPlayerDialog(playerid, DIALOG_REGISTER_AGE, DIALOG_STYLE_INPUT, "Character Creation - Age", "Please set your new characters in-game age:", "Next", "Quit");
			}
		}
	    case DIALOG_REGISTER_AGE:
	    {
	    	if(!response) return Kick(playerid);
	        if(!strlen(inputtext)) return  ShowPlayerDialog(playerid, DIALOG_REGISTER_AGE, DIALOG_STYLE_INPUT, "Character Creation - Age", "You did not provide a valid age for your character!\n\nPlease set your new characters in-game age:", "Next", "Quit");
			if(strval(inputtext) > 90 || strval(inputtext) < 16) return  ShowPlayerDialog(playerid, DIALOG_REGISTER_AGE, DIALOG_STYLE_INPUT, "Character Creation - Age", "You did not provide a valid age for your character!\n\nPlease set your new characters in-game age:", "Next", "Quit");

            PlayerData[playerid][Character_Age] = strval(inputtext);

	        ShowPlayerDialog(playerid, DIALOG_REGISTER_SEX, DIALOG_STYLE_LIST, "Character Creation - Sex", "Male\nFemale", "Next", "Quit");
	    }
	    case DIALOG_REGISTER_SEX:
	    {
	    	if(!response) return Kick(playerid);
			if(response)
			{
			    new stext[126];
			    
			    switch(listitem)
			    {
			        case 0: { stext = "Male"; SetPlayerSkin(playerid, 3); }
			        case 1: { stext = "Female"; SetPlayerSkin(playerid, 41); }
			    }
			    
			    PlayerData[playerid][Character_Skin_1] = GetPlayerSkin(playerid);
			    
			    new string[129];
				format(string, sizeof(string), "%s", stext);
				PlayerData[playerid][Character_Sex] = string;
                
	        	ShowPlayerDialog(playerid, DIALOG_REGISTER_BP, DIALOG_STYLE_LIST, "Character Creation - Birthplace", "Los Santos\nLiberty City\nVice City\nUnknown", "Complete", "Quit");
			}
		}
	    case DIALOG_REGISTER_BP:
	    {
	    	if(!response) return Kick(playerid);

			if(response)
			{
			    new stext[126];
			    switch(listitem)
			    {
			        case 0: { stext = "Los Santos"; }
			        case 1: { stext = "Liberty City"; }
			        case 2: { stext = "Vice City"; }
			        case 3: { stext = "Unknown"; }
			    }
			    
			    new string[129];
				format(string, sizeof(string), "%s", stext);
				PlayerData[playerid][Character_Birthplace] = string;
				
				PlayerData[playerid][Character_Registered] = 1;

	        	ShowPlayerDialog(playerid, DIALOG_REGISTER_END, DIALOG_STYLE_MSGBOX, "Character Creation - Complete", "Thank you for creating a new character and welcome to our community.\n\nYou are about to embark on a short tutorial which will give you the basics of this community", "Next", "");
			}

     	}
	    case DIALOG_REGISTER_END:
	    {
	        new acquery[2000];
	        mysql_format(connection, acquery, sizeof(acquery), "UPDATE `user_accounts` SET `account_email` = '%s', `character_registered` = '%i', `character_age` = '%i',`character_sex` = '%s',`character_birthplace` ='%s', `character_skin_1` ='%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Account_Email], PlayerData[playerid][Character_Registered], PlayerData[playerid][Character_Age], PlayerData[playerid][Character_Sex], PlayerData[playerid][Character_Birthplace], PlayerData[playerid][Character_Skin_1], PlayerData[playerid][Character_Name]);
    		mysql_tquery(connection, acquery);

			TutorialStep[playerid] = 1;
			
			Tutorial_Timer[playerid] = SetTimerEx("TutorialRunThroughOne", 1000, false, "i", playerid);
	    }
		case DIALOG_GUIDE_LIST:
		{
		    if(!response) return 1;
		    
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: { ShowPlayerDialog(playerid, DIALOG_GUIDE_JOBS, DIALOG_STYLE_MSGBOX, "Open Roleplay Guide - Jobs", "This server holds an array of jobs to chose from. Once you gain a mobile phone from any eletronic store, you can\nuse your device to locate these jobs.\n\nSome of the local jobs are:\n> Rubbish Collector\n> Pizza Delivery\n> Electrician\n\nIf you require any help in obtaining a job, please reach out to the staff team by using /assistance)", "Close", ""); }
		            case 1: { ShowPlayerDialog(playerid, DIALOG_GUIDE_FACTIONS, DIALOG_STYLE_MSGBOX, "Open Roleplay Guide - Factions", "This server holds many different types of factions. You don't need to join on a forum anymore, simply\napply in game (/joinfaction).\n\nSome of the local factions are:\n> LSPD\n> LSFD\n> LSMC\n> Mechanic\n> Trucking\n> LS Bank\n\nIf you require any help in obtaining a faction position, please reach out to the staff team by using /assistance)", "Close", ""); }
		            case 2: { ShowPlayerDialog(playerid, DIALOG_GUIDE_COMMANDS, DIALOG_STYLE_MSGBOX, "Open Roleplay Guide - Commands", "There are alot of commands for this server, due to the ammount you can view these all by typing /commands\n\nStarting roleplay commands are:\n\n1. /me - roleplay the actions of the user\n2. /do - asks the response of the action or result of the said action\n3. /ooc - local out of character chat\n4. /global - server network public chat for all users to communicate out of character wise", "Close", ""); }
		            case 3: { ShowPlayerDialog(playerid, DIALOG_GUIDE_VEHICLES, DIALOG_STYLE_MSGBOX, "Open Roleplay Guide - Vehicles", "Within this server we have standard vehicles placed throughout the city to help with daily life. Sadly,\nthese vehicles are not player owned and if pulled over in one could get you arrested.\n\nYou can buy or rent vehicles from our local dealerships, these can be found with the GPS system\nwithin your cellphone.", "Close", ""); }
		            case 4: { ShowPlayerDialog(playerid, DIALOG_GUIDE_HOUSES, DIALOG_STYLE_MSGBOX, "Open Roleplay Guide - Houses", "We have many features within this server and houses for players to buy is one of them.\n\nThere are currently 200 houses within the server and all are custom built with either basic interiors or custom mapped ones depending on location.\nIf you want to view a house, all you need to do is, go up to a green pickup icon and type /buyproperty\n\nYou can also sell your property by standing next to your hosue and typing /sellproperty", "Close", ""); }
		            case 5: { ShowPlayerDialog(playerid, DIALOG_GUIDE_ADMINS, DIALOG_STYLE_MSGBOX, "Open Roleplay Guide - Admins", "Due to we are in early stages of development, this project will host many types of admins from different locations.\n\nPlease take note that this is volunteer basis and noone is getting paid to be here. Please respect all admins\nand staff while in game and have a great time on our server.", "Close", ""); }
		        }
		    }
		}
		case DIALOG_COMMANDS_MAIN:
		{
		    if(!response) return 1;
		    if(response)
		    {
			    switch(listitem)
			    {
					case 0:
					{
						SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Generic Commands {F2F746}***{FFFFFF}");
      					SendClientMessage(playerid, COLOR_YELLOW, "Community:{FFFFFF} /staff /factions /helpme /assistance /report /commands /guide /time /unstuck /changepassword /paymenttype");
						SendClientMessage(playerid, COLOR_YELLOW, "Community:{FFFFFF} /coins /rules /cityhelp");
						SendClientMessage(playerid, COLOR_YELLOW, "Chat:{FFFFFF} /w(hisper) /s(hout) /o(oc) /g(lobal) /clearchat /radio(r) /pm");
						SendClientMessage(playerid, COLOR_YELLOW, "Phone:{FFFFFF} /phonebook /phonenumber /togglephone /call /pickup /endcall /gps /cancelgps");
						SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /me /do /stats /pay /paybill /bills /billcustomer /acceptdeath /searchbin /buildparts /buildweapon");
						SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /getlicense /stoplicense /licenses /showlicenses /rego /showrego /pockets /change /shop /tie /givegun");
						SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rappel /hack /rob /hw(hotwire) /lockpick /gate /bankaccount /smuggle /bake /usedrugs /blindfold /drink /eat");
						SendClientMessage(playerid, COLOR_YELLOW, "Vehicle:{FFFFFF} /engine /lights /bonnet /boot /rentcar /unrentcar /fillup /recyclecar /changeownership /park /flash");
						SendClientMessage(playerid, COLOR_YELLOW, "Misc:{FFFFFF} /buyfaction /sellfaction /rent /unrent /joinfaction /cancelrequest /plant /crop");
					}
			        case 1:
					{
					    if(PlayerData[playerid][Character_Faction] == 0)
					    {
					        SendPlayerErrorMessage(playerid, " You are not currently apart of any faction. You can join one by typing /joinfaction at the faction icon position!");
					    }
					    else if(PlayerData[playerid][Character_Faction] == 1)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LSPD) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /megaphone /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /search /removeweapons /cancelbackup(cbu) /backup(bu) /mdc /ticket /arrest /placeincar(pic)");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /cuff /taser /acceptjob /canceljob /acceptcall /drag /respond /cancelrespond /bolo");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LSPD) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /megaphone /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /search /removeweapons /cancelbackup(cbu) /backup(bu) /mdc /ticket /arrest /placeincar(pic)");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /cuff /taser /acceptjob /canceljob /acceptcall /drag /respond /cancelrespond /bolo");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /issuelicense /setrankname");
							}
					    }
					    else if(PlayerData[playerid][Character_Faction] == 2)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LSFD) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /megaphone /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /fireex /acceptjob /canceljob /acceptcall");
							}
							else
							{
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LSFD) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /megaphone /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /fireex /acceptjob /canceljob /acceptcall");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 3)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LSMC) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /megaphone /duty /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptcall /drag /heal /placeincar(pic)");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LSMC) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /megaphone /duty /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptcall /drag /heal /placeincar(pic)");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 4)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LS Bank) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /computer /funds");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (LS Bank) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /computer /funds");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
					    else if(PlayerData[playerid][Character_Faction] == 5)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
					            SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Tow Co) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptcall");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Tow Co) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /gr(adio) /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptcall");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 6)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Taxi Co) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /startjob /stopjob");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Taxi Co) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /startjob /stopjob");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 7)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Truck Co) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /pickroute /endroute");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Truck Co) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /pickroute /endroute");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
					    else if(PlayerData[playerid][Character_Faction] == 8)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
					            SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Dudefix) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /duty /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptjob /canceljob /shovel /fixpipe");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Dudefix) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /duty /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptjob /canceljob /shovel /fixpipe");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
					    else if(PlayerData[playerid][Character_Faction] == 9)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
					            SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Mechanic) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptcall /acceptjob /canceljob /tools /checkgear /fix /fillvehicle");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Mechanic) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /duty /joinfaction /quitfaction /gate");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /acceptcall /acceptjob /canceljob /tools /checkgear /fix /fillvehicle");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 10)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Grove Street) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Grove Street) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 11)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (La Familia) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (La Familia) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 12)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Hells Angels) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Hells Angels) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 13)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Hendrix Familia) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Hendrix Familia) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 14)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Ballas) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Ballas) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 15)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
		        				SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Southside) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Southside) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /rob /hw(hotwire) /hack");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
						else if(PlayerData[playerid][Character_Faction] == 16)
					    {
					        if(PlayerData[playerid][Character_Faction_Rank] != 6)
					        {
					            SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Driving School) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fradio(factionradio) /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /issuelicense /starttest /stoptest");
							}
							else
							{						
								SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Faction Commands (Driving School) {F2F746}***{FFFFFF}");
						        SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /fchat(factionchat) /fstaff /joinfaction /quitfaction");
						        SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /issuelicense /starttest /stoptest");
								SendClientMessage(playerid, COLOR_YELLOW, "Leader:{FFFFFF} /hire /fire /setrank /offlinerequests /requests /acceptrequest /rejectrequest /setrankname");
							}
					    }
					}
			        case 2:
					{
						SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay House Commands {F2F746}***{FFFFFF}");
						SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /buyproperty /sellproperty /lock /alarm /installlock /installalarm /installsafe /storage /houses");
					}
			        case 3:
					{
					    SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Business Commands {F2F746}***{FFFFFF}");
						SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /buybusiness /sellbusiness /checkfunds /getfunds");
					}
			        case 4:
					{						
						if(PlayerData[playerid][Character_Job] == 1)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Job Commands (Pizza Delivery) {F2F746}***{FFFFFF}");
						    SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /joinjob /quitjob");
						    SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /startjob /stopjob");
					    }
						else if(PlayerData[playerid][Character_Job] == 2)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Job Commands (Garbage Collector) {F2F746}***{FFFFFF}");
						    SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /joinjob /quitjob");
						    SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /startjob /stopjob");
					    }
						else if(PlayerData[playerid][Character_Job] == 3)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Job Commands (Electrician) {F2F746}***{FFFFFF}");
						    SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /joinjob /quitjob");
						    SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /startjob /stopjob /flash");
					    }
						else if(PlayerData[playerid][Character_Job] == 4)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Job Commands (Taxi Driver) {F2F746}***{FFFFFF}");
						    SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /joinjob /quitjob");
						    SendClientMessage(playerid, COLOR_YELLOW, "General:{FFFFFF} /billcustomer");
					    }
						else return SendPlayerErrorMessage(playerid, " You are not apart of any job company at this point in time!");
					}
					case 5:
					{
					    if(PlayerData[playerid][Character_VIP] > 0)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay VIP Commands {F2F746}***{FFFFFF}");
						    SendClientMessage(playerid, COLOR_YELLOW, "Basic:{FFFFFF} /vipchat /viplocker /summon");
						    SendClientMessage(playerid, COLOR_YELLOW, "TIP:{FFFFFF} There is a building located near All Saints General Hospital, which is your safe haven!");
					    }
						else return SendPlayerErrorMessage(playerid, " You are not a VIP member!");
					}
			        case 6:
					{
						if(PlayerData[playerid][Helper_Level] == 0 && PlayerData[playerid][Moderator_Level] == 0 && PlayerData[playerid][Admin_Level] == 0)
					    {
							SendPlayerErrorMessage(playerid, " You are not a staff member of this community!");
					    }
						else if(PlayerData[playerid][Helper_Level] == 1)
					    {
							SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
					    }
						else if(PlayerData[playerid][Moderator_Level] == 1)
					    {
							SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
							SendClientMessage(playerid, COLOR_YELLOW, "Moderator:{FFFFFF} /moderatorchat(m) /kick /reports /closereport /gotocar /gotodoor /gotobiz /gotohouse /jetpack");
					    }
					    else if(PlayerData[playerid][Admin_Level] == 1)
					    {
							SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
							SendClientMessage(playerid, COLOR_YELLOW, "Moderator:{FFFFFF} /moderatorchat(m) /kick /reports /closereport /gotocar /gotodoor /gotobiz /gotohouse /jetpack");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /adminchat(a) /gotols /sendtols /gotopos /ajail /rajail /ban /offlineban /unban /checkstats /settime");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /staffduty /setweather");
					    }
					    else if(PlayerData[playerid][Admin_Level] == 2)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
							SendClientMessage(playerid, COLOR_YELLOW, "Moderator:{FFFFFF} /moderatorchat(m) /kick /reports /closereport /gotocar /gotodoor /gotobiz /gotohouse /jetpack");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /adminchat(a) /gotols /sendtols /gotopos /ajail /rajail /ban /offlineban /unban /checkstats /settime");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /staffduty /setweather");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 2:{FFFFFF} /getcar /getplayer /gotoplayer /unmute /mute /sethealth");
					    }
					    else if(PlayerData[playerid][Admin_Level] == 3)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
							SendClientMessage(playerid, COLOR_YELLOW, "Moderator:{FFFFFF} /moderatorchat(m) /kick /reports /closereport /gotocar /gotodoor /gotobiz /gotohouse /jetpack");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /adminchat(a) /gotols /sendtols /gotopos /ajail /rajail /ban /offlineban /unban /checkstats /settime");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /staffduty /setweather");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 2:{FFFFFF} /getcar /getplayer /gotoplayer /unmute /mute /sethealth");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 3:{FFFFFF} /avrespawn /avrefill /setskin /setarmour /giveitem /giveweapon");
					    }
					    else if(PlayerData[playerid][Admin_Level] == 4)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
							SendClientMessage(playerid, COLOR_YELLOW, "Moderator:{FFFFFF} /moderatorchat(m) /kick /reports /closereport /gotocar /gotodoor /gotobiz /gotohouse /jetpack");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /adminchat(a) /gotols /sendtols /gotopos /ajail /rajail /ban /offlineban /unban /checkstats /settime");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /staffduty /setweather");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 2:{FFFFFF} /getcar /getplayer /gotoplayer /unmute /mute /sethealth");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 3:{FFFFFF} /avrespawn /avrefill /setskin /setarmour /giveitem /giveweapon");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 4:{FFFFFF} /setlicense /givephone /setstat /weaponban /rweaponban /factionban /rfactionban");
					    }
					    else if(PlayerData[playerid][Admin_Level] == 5)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
							SendClientMessage(playerid, COLOR_YELLOW, "Moderator:{FFFFFF} /moderatorchat(m) /kick /reports /closereport /gotocar /gotodoor /gotobiz /gotohouse /jetpack");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /adminchat(a) /gotols /sendtols /gotopos /ajail /rajail /ban /offlineban /unban /checkstats /settime");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /staffduty /setweather");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 2:{FFFFFF} /getcar /getplayer /gotoplayer /unmute /mute /sethealth");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 3:{FFFFFF} /avrespawn /avrefill /setskin /setarmour /giveitem /giveweapon");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 4:{FFFFFF} /setlicense /givephone /setstat /weaponban /rweaponban /factionban /rfactionban");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 5:{FFFFFF} /starttornado /stoptornado");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 5:{FFFFFF} /vinfo /vdelete /vcreate /vpark /vremoveowner /vsetowner /vremovefaction /vsetfaction /vsetjob /vsettype");
					    }
					    else if(PlayerData[playerid][Admin_Level] == 6)
					    {
					        SendClientMessage(playerid, COLOR_YELLOW, "{F2F746}***{FFFFFF} Open Roleplay Staff Commands {F2F746}***{FFFFFF}");
							SendClientMessage(playerid, COLOR_YELLOW, "Helper:{FFFFFF} /helperchat(h) /helpmetoggle /spectate /endspectate /nudge /slap /playertype /freeze /unfreeze /trueid");
							SendClientMessage(playerid, COLOR_YELLOW, "Moderator:{FFFFFF} /moderatorchat(m) /kick /reports /closereport /gotocar /gotodoor /gotobiz /gotohouse /jetpack");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /adminchat(a) /gotols /sendtols /gotopos /ajail /rajail /ban /offlineban /unban /checkstats /settime");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 1:{FFFFFF} /staffduty /setweather");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 2:{FFFFFF} /getcar /getplayer /gotoplayer /unmute /mute /sethealth");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 3:{FFFFFF} /avrespawn /avrefill /setskin /setarmour /giveitem /giveweapon");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 4:{FFFFFF} /setlicense /givephone /setstat /weaponban /rweaponban /factionban /rfactionban");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 5:{FFFFFF} /starttornado /stoptornado");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 5:{FFFFFF} /vinfo /vdelete /vcreate /vpark /vremoveowner /vsetowner /vremovefaction /vsetfaction /vsetjob /vsettype");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 6:{FFFFFF} /fnext /finfo /ficonpos /fsetcost /fsettype /fsetowner /fremoveowner /fname /frankname /fdelete");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 6:{FFFFFF} /ddnext /ddinfo /ddname /ddsettype //ddedit /dddelete");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 6:{FFFFFF} /hnext /hinfo /hedit /hpreset /hdelete /hsetaddress /hsetcost /hsetowner /hremoveowner");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 6:{FFFFFF} /bnext /binfo /bedit /bdelete /bsetname /bsetcost /bsettype /bsetowner /bremoveowner");
							SendClientMessage(playerid, COLOR_YELLOW, "Admin Level 6:{FFFFFF} /setleader /sethelper /setmoderator /setadmin /gmx /givecoins /globalchat /xmasevent");
					    }
					}
			    }
			}
		}
		case DIALOG_PLAYER_STATS:
  		{
  		    if(!response) return 1;
  		    else
  		    {
	  		    new titlestring[100], dialogstring[2000];

				if(PlayerData[playerid][Character_VIP] > 0)
				{
		  		    format(titlestring, sizeof(titlestring), "%s - Statistics", GetName(playerid));
					format(dialogstring, sizeof(dialogstring), " Coins: \t%i\n Money: \t$%i\n Bank: \t$%d\n\n Houses: \t%d/2\n Vehicles: \t%d/2\n Businesses: \t%d/2", PlayerData[playerid][Character_Coins], PlayerData[playerid][Character_Money], PlayerData[playerid][Character_Bank_Money], PlayerData[playerid][Character_Total_Houses], PlayerData[playerid][Character_Total_Vehicles], PlayerData[playerid][Character_Total_Businesses]);
			        ShowPlayerDialog(playerid, DIALOG_PLAYER_STATS_MORE, DIALOG_STYLE_TABLIST, titlestring, dialogstring, "Prev", "Close");
				}
				else
				{
					format(titlestring, sizeof(titlestring), "%s - Statistics", GetName(playerid));
					format(dialogstring, sizeof(dialogstring), " Coins: \t%i\n Money: \t$%i\n Bank: \t$%d\n\n Houses: \t%d/2\n Vehicles: \t%d/1\n Businesses: \t%d/1", PlayerData[playerid][Character_Coins], PlayerData[playerid][Character_Money], PlayerData[playerid][Character_Bank_Money], PlayerData[playerid][Character_Total_Houses], PlayerData[playerid][Character_Total_Vehicles], PlayerData[playerid][Character_Total_Businesses]);
			        ShowPlayerDialog(playerid, DIALOG_PLAYER_STATS_MORE, DIALOG_STYLE_TABLIST, titlestring, dialogstring, "Prev", "Close");
				}
			}
	        
  		}
		case DIALOG_PLAYER_STATS_MORE:
		{
		    if(!response) return 1;
  		    else
  		    {
  		        new titlestring[100], dialogstring[2000], staffname[50];
				new fstring[20], frankstring[20], jstring[50], vstring[50];
				new factionid;
		
				if(PlayerData[playerid][Helper_Level] == 1) { format(staffname, sizeof(staffname), "Helper"); }
				else if(PlayerData[playerid][Moderator_Level] == 1) { format(staffname, sizeof(staffname), "Moderator"); }
				else if(PlayerData[playerid][Admin_Level] == 1) { format(staffname, sizeof(staffname), "Admin - Level 1"); }
				else if(PlayerData[playerid][Admin_Level] == 2) { format(staffname, sizeof(staffname), "Admin - Level 2"); }
				else if(PlayerData[playerid][Admin_Level] == 3) { format(staffname, sizeof(staffname), "Admin - Level 3"); }
				else if(PlayerData[playerid][Admin_Level] == 4) { format(staffname, sizeof(staffname), "Admin - Level 4"); }
				else if(PlayerData[playerid][Admin_Level] == 5) { format(staffname, sizeof(staffname), "Admin - Level 5"); }
				else if(PlayerData[playerid][Admin_Level] == 6) { format(staffname, sizeof(staffname), "Admin - Level 6"); }
	
				factionid = PlayerData[playerid][Character_Faction];
	
				if(PlayerData[playerid][Character_Faction] == 0)
				{
					fstring = "None";
				}
				else
				{
					format(fstring, sizeof(fstring), "%s", FactionData[factionid][Faction_Name]);
				}
	
				switch(PlayerData[playerid][Character_Faction_Rank])
				{
					case 0: { format(frankstring, sizeof(frankstring), "None"); }
					case 1: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_1]); }
					case 2: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_2]); }
					case 3: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_3]); }
					case 4: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_4]); }
					case 5: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_5]); }
					case 6: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_6]); }
				}
					
				switch(PlayerData[playerid][Character_Job])
				{
					case 0: { format(jstring, sizeof(jstring), "None"); }
					case 1: { format(jstring, sizeof(jstring), "Pizza Delivery"); }
					case 2: { format(jstring, sizeof(jstring), "Garbage Collector"); }
					case 3: { format(jstring, sizeof(jstring), "Electrician"); }
				}
				
				switch(PlayerData[playerid][Character_VIP])
				{
					case 0: { format(vstring, sizeof(vstring), "No"); }
					case 1: { format(vstring, sizeof(vstring), "Yes"); }
				}
		        
		        format(titlestring, sizeof(titlestring), "%s - Statistics", GetName(playerid));
				format(dialogstring, sizeof(dialogstring), " Character Name: \t%s\n Character Age: \t%i\n Character Sex: \t%s\n Character Birthplace: \t%s\n\n Character Level: \t%i\n Character Exp: \t%i/8\n Character VIP: \t%s\n Character VIP Exp: \t%s\n Staff Level: \t%s\n Faction: \t%s\n Faction Rank: \t%s\n Job: \t%s", PlayerData[playerid][Character_Name], PlayerData[playerid][Character_Age], PlayerData[playerid][Character_Sex], PlayerData[playerid][Character_Birthplace],PlayerData[playerid][Character_Level] , PlayerData[playerid][Character_Level_Exp], vstring, PlayerData[playerid][Character_VIP_Exp], staffname, fstring, frankstring, jstring);
		        ShowPlayerDialog(playerid, DIALOG_PLAYER_STATS, DIALOG_STYLE_TABLIST, titlestring, dialogstring, "More", "Close");
  		    }
		}
		case DIALOG_BANK_LOGIN:
	    {
	        if(!response) return 1;
	        if(strcmp(inputtext, PlayerData[playerid][Character_Bank_Pin]) == 0)
	        {
             	ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        }
	        else
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN, DIALOG_STYLE_PASSWORD, "Los Santos Bank", "(INCORRECT PASSWORD!)\n\nWelcome back to the Los Santos Bank!\n\nPlease enter in the password you used to set the account up.", "Login", "Close");
	        }
	    }
	    case DIALOG_BANK_REGISTER:
	    {
	        if(!response) return 1;
	        if(strlen(inputtext) < 1 || strlen(inputtext) > 6) return ShowPlayerDialog(playerid, DIALOG_BANK_REGISTER, DIALOG_STYLE_PASSWORD, "Los Santos Bank", "(Choose a different password, 6 characters or numbers!)\n\nIt appears that you do not have an open account with us!\n\nPlease enter in a password below that you want to use for this account.\n\n(There will be a $100 fee to the end user for the cost of setting the account up)", "Register", "Close");

			new string[129];
			format(string, sizeof(string), "%s", inputtext);
			PlayerData[playerid][Character_Bank_Pin] = string;
			PlayerData[playerid][Character_Bank_Account] = 1;
			
			PlayerData[playerid][Character_Money] += -100;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~r~~h~-$100");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
			
			new dstring[256];
			format(dstring, sizeof(dstring), "[BANK]:{FFFFFF} Thank you for opening a new account with us. We have taken a $100 fee for set up costs!");
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			new bankquery[2000];
	        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `user_accounts` SET `character_bank_account` = '1', `character_bank_pin` = '%s' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Bank_Pin], PlayerData[playerid][Character_Name]);
    		mysql_tquery(connection, bankquery);

	        ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	    }
	    case DIALOG_BANK_MENU:
	    {
			if(!response) return 1;
			else
			{
		        switch(listitem)
		        {
		            case 0:
		            {
		                new bodytext[256];
		                format(bodytext, sizeof(bodytext), "Balance: $%d\n1.\tWithdraw\n2.\tDeposit", PlayerData[playerid][Character_Bank_Money]);

						ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNT, DIALOG_STYLE_LIST, "Bank Account - Personal", bodytext, "Select", "Go Back");
		            }
		            case 1:
		            {
	                    new bodytext[256];
		                format(bodytext, sizeof(bodytext), "New Application\nExisting Applications");

						ShowPlayerDialog(playerid, DIALOG_BANK_BUSINESS, DIALOG_STYLE_LIST, "Bank Account - Loans", bodytext, "Select", "Go Back");
		            }
		            case 2:
		            {
	                    new bodytext[256];
		                format(bodytext, sizeof(bodytext), "You are about to close your bank accounnt!\n\nAre you sure that you want to continue?\nAll money will be transferred to your on person wallet!");

						ShowPlayerDialog(playerid, DIALOG_BANK_CLOSE, DIALOG_STYLE_MSGBOX, "Bank Account - Close Of Account", bodytext, "Confirm", "Go Back");
		            }
		        }
			}
	    }
	    case DIALOG_BANK_ACCOUNT:
	    {
         	if(!response) return ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        switch(listitem)
	        {
	            case 0:
				{
				    new bodytext[256];
	                format(bodytext, sizeof(bodytext), "Balance: $%i\n1.\tWithdraw\n2.\tDeposit", PlayerData[playerid][Character_Bank_Money]);

					ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNT, DIALOG_STYLE_LIST, "Bank Account - Personal", bodytext, "Select", "Go Back");
	            }
	            case 1:
	            {
	                ShowPlayerDialog(playerid, DIALOG_BANK_AWITHDRAW, DIALOG_STYLE_INPUT, "Bank Account - Withdraw", "Please enter in the amount that you would like to withdraw:", "Withdraw", "Go Back");
	            }
	            case 2:
	            {
	                ShowPlayerDialog(playerid, DIALOG_BANK_ADEPOSIT, DIALOG_STYLE_INPUT, "Bank Account - Deposit", "Please enter in the amount that you would like to deposit into your account:", "Deposit", "Go Back");
	            }
	        }
	    }
	    case DIALOG_BANK_AWITHDRAW:
	    {
	        if(!response)
	        {
                new bodytext[256];
                format(bodytext, sizeof(bodytext), "Balance: $%i\n1.\tWithdraw\n2.\tDeposit", PlayerData[playerid][Character_Bank_Money]);

				ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNT, DIALOG_STYLE_LIST, "Bank Account - Personal", bodytext, "Select", "Go Back");
	        }
	        else
	        {
	            if(strval(inputtext) > PlayerData[playerid][Character_Bank_Money])
		        {
		            ShowPlayerDialog(playerid, DIALOG_BANK_AWITHDRAW, DIALOG_STYLE_INPUT, "Bank Account - Withdraw", "(ERROR - You cannot request more than what you have in your account!)\n\nPlease enter in the amount that you would like to withdraw:", "Withdraw", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_BANK_AWITHDRAW, DIALOG_STYLE_INPUT, "Bank Account - Withdraw", "(ERROR - You cannot withdraw negative amount from the bank!)\n\nPlease enter in the amount that you would like to withdraw:", "Withdraw", "Go Back");
		        }
		        else
		        {
		            PlayerData[playerid][Character_Money] += strval(inputtext);
		            PlayerData[playerid][Character_Bank_Money] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `user_accounts` SET `character_bank_money` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Bank_Money], GetName(playerid));
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[BANK]:{FFFFFF} You have just withdrawn $%i, out of your bank account!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new bodytext[256];
	                format(bodytext, sizeof(bodytext), "Balance: $%i\n1.\tWithdraw\n2.\tDeposit", PlayerData[playerid][Character_Bank_Money]);

					ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNT, DIALOG_STYLE_LIST, "Bank Account - Personal", bodytext, "Select", "Go Back");
		        }
			}
	    }
	    case DIALOG_BANK_ADEPOSIT:
	    {
	        if(!response)
	        {
                new bodytext[256];
                format(bodytext, sizeof(bodytext), "Balance: $%i\n1.\tWithdraw\n2.\tDeposit", PlayerData[playerid][Character_Bank_Money]);

				ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNT, DIALOG_STYLE_LIST, "Bank Account - Personal", bodytext, "Select", "Go Back");
	        }
	        else
	        {
	            if(strval(inputtext) > PlayerData[playerid][Character_Money])
		        {
		            ShowPlayerDialog(playerid, DIALOG_BANK_ADEPOSIT, DIALOG_STYLE_INPUT, "Bank Account - Deposit", "(ERROR - You cannot deposit more than what you have in your wallet!)\n\nPlease enter in the amount that you would like to deposit:", "Deposit", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_BANK_ADEPOSIT, DIALOG_STYLE_INPUT, "Bank Account - Deposit", "(ERROR - You cannot deposit negative amounts into the bank!)\n\nPlease enter in the amount that you would like to deposit:", "Deposit", "Go Back");
		        }
		        else
		        {
		            PlayerData[playerid][Character_Money] -= strval(inputtext);
		            PlayerData[playerid][Character_Bank_Money] += strval(inputtext);
		
					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$%d",strval(inputtext));
					GameTextForPlayer(playerid, text_value, 3000, 1);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `user_accounts` SET `character_bank_money` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Bank_Money], GetName(playerid));
		    		mysql_tquery(connection, bankquery);

		            new dstring[256];
					format(dstring, sizeof(dstring), "[BANK]:{FFFFFF} You have just deposited $%i, into your bank account!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new bodytext[256];
	                format(bodytext, sizeof(bodytext), "Balance: $%i\n1.\tWithdraw\n2.\tDeposit", PlayerData[playerid][Character_Bank_Money]);

					ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNT, DIALOG_STYLE_LIST, "Bank Account - Personal", bodytext, "Select", "Go Back");
		        }
			}
	    }
	    case DIALOG_BANK_CLOSE:
	    {
	        if(!response)
	        {
                ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        }
	        else
	        {
	    		PlayerData[playerid][Character_Bank_Account] = 0;
	    		PlayerData[playerid][Character_Bank_Pin] = 0;

	    		PlayerData[playerid][Character_Money] += PlayerData[playerid][Character_Bank_Money];
	    		PlayerData[playerid][Character_Bank_Money] = 0;

	    		new bankquery[2000];
		        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `user_accounts` SET `character_bank_account` = '0', `character_bank_pin` = '0', `character_bank_money` = '0' WHERE `character_name` = '%e' LIMIT 1", GetName(playerid));
	    		mysql_tquery(connection, bankquery);

	    		new dstring[256];
				format(dstring, sizeof(dstring), "[BANK]:{FFFFFF} You have just closed your bank account and your saved money has been added to your wallet!");
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
			}
	    }
	    case DIALOG_BANK_FAC_LOGIN:
	    {
	        if(!response) return 1;
	        if(strcmp(inputtext, "1111") == 0)
	        {
             	new query[128];
			    mysql_format(connection, query, sizeof(query), "SELECT * FROM `loan_information` WHERE `loan_status` = '0'");
				mysql_tquery(connection, query, "OnLoanCheck", "i", playerid);
	        }
	        else
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_FAC_LOGIN, DIALOG_STYLE_PASSWORD, "Los Santos Bank - Computer (Invalid Credentials)", "Welcome to the Los Santos Bank Computer System\n\nThis system is where you will be able to review requested loans.\n\nPlease enter in your work password:", "Login", "Close");
	        }
	    }
	    case DIALOG_BANK_FAC_LOANS:
	    {
	        if(!response)
	        {
	            SelectedLoanID[playerid] = 0;
	            SelectedLoanAmount[playerid] = 0;
	            
	            new name[50];
	            format(name, sizeof(name), "0");
	            SelectedLoanName[playerid] = name;
	        }
			else
	        {
	            SelectedLoanID[playerid] = SQL_LOAN_ID[playerid][listitem];
	            SelectedLoanAmount[playerid] = SQL_LOAN_AMOUNT[playerid][listitem];
	            
	            new query[128];
			    mysql_format(connection, query, sizeof(query), "SELECT * FROM `loan_information` WHERE `loan_id` = %d", SelectedLoanID);
			    mysql_tquery(connection, query, "OnLoanDetails", "i", playerid);
	        }
	    }
	    case DIALOG_BANK_FAC_LOAN_INFO:
	    {
	        if(!response)
	        {
             	SelectedLoanID[playerid] = 0;
	            SelectedLoanAmount[playerid] = 0;

	            new name[50];
	            format(name, sizeof(name), "0");
	            SelectedLoanName[playerid] = name;
	            
	            new query[128];
			    mysql_format(connection, query, sizeof(query), "SELECT * FROM `loan_information` WHERE `loan_status` = '0'");
				mysql_tquery(connection, query, "OnLoanCheck", "i", playerid);
	        }
			else
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_FAC_LOAN_STAT, DIALOG_STYLE_LIST, "Los Santos Bank - Loan Status", "1. Approve Loan\n2. Reject Loan", "Select", "Go Back");
	        }
	    }
	    case DIALOG_BANK_FAC_LOAN_STAT:
	    {
	        if(!response)
	        {
             	SelectedLoanID[playerid] = 0;
	            SelectedLoanAmount[playerid] = 0;

	            new name[50];
	            format(name, sizeof(name), "0");
	            SelectedLoanName[playerid] = name;

	            new query[128];
			    mysql_format(connection, query, sizeof(query), "SELECT * FROM `loan_information` WHERE `loan_status` = '0'");
				mysql_tquery(connection, query, "OnLoanCheck", "i", playerid);
	        }
			else
	        {
	            switch(listitem)
		        {
		            case 0:
		            {
		                if(PlayerData[playerid][Character_Faction] == 4 && FactionData[4][Faction_Money] >= SelectedLoanAmount[playerid])
						{
				    		new acquery[2000];
				        	mysql_format(connection, acquery, sizeof(acquery), "UPDATE `loan_information` SET `loan_status` = '1' WHERE `loan_id` = '%d' LIMIT 1", SelectedLoanID[playerid]);
				        	mysql_tquery(connection, acquery);

				            ShowPlayerDialog(playerid, DIALOG_BANK_FAC_APPROVAL, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Loan Approval", "You have just approved a loan.\n\nTo transfer the funds to the bank account, click 'Transfer'", "Transfer", "Close");
						}
						else
						{
						    SelectedLoanID[playerid] = 0;
				            SelectedLoanAmount[playerid] = 0;

				            new name[50];
				            format(name, sizeof(name), "0");
				            SelectedLoanName[playerid] = name;
	            
						    ShowPlayerDialog(playerid, DIALOG_BANK_FAC_LENDP, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Lending Power", "You have loaned out too much money this week, please wait for your stock to increase", "Close", "");
						}
		            }
		            case 1:
		            {
	                    new acquery[2000];
      					mysql_format(connection, acquery, sizeof(acquery), "UPDATE `loan_information` SET `loan_status` = '2' WHERE `loan_id` = '%d' LIMIT 1", SelectedLoanID[playerid]);
				    	mysql_tquery(connection, acquery);

         				SelectedLoanID[playerid] = 0;
			            SelectedLoanAmount[playerid] = 0;

			            new name[50];
			            format(name, sizeof(name), "0");
			            SelectedLoanName[playerid] = name;
			            
			            ShowPlayerDialog(playerid, DIALOG_BANK_FAC_REJECTION, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Loan Rejection", "You have just rejected a loan.\n\nPlease make contact with the customer to inform them of their loss", "Close", "");
		            }
		        }
	        }
	    }
	    case DIALOG_BANK_FAC_APPROVAL:
	    {
	        if(!response)
	        {
             	SelectedLoanID[playerid] = 0;
	            SelectedLoanAmount[playerid] = 0;

	            new name[50];
	            format(name, sizeof(name), "0");
	            SelectedLoanName[playerid] = name;
	        }
			else
	        {				
	            new uquery[2000];
        		mysql_format(connection, uquery, sizeof(uquery), "UPDATE `user_accounts` SET `character_bank_loan` = 0, `character_bank_money` = character_bank_money + %d WHERE `character_name` = '%s' LIMIT 1", SelectedLoanAmount[playerid], SelectedLoanName[playerid]);
				mysql_tquery(connection, uquery);
				
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(strcmp(GetName(i), SelectedLoanName[playerid]) == 0)
					{
						PlayerData[i][Character_Bank_Money] = PlayerData[i][Character_Bank_Money] + SelectedLoanAmount[playerid];
						
						new string[256];
						format(string, sizeof(string), "- Your bank loan has just been approved while you are online, go and check it out!");
						SendClientMessage(i, COLOR_YELLOW, string);
						break;
					}
				}
				
				ShowPlayerDialog(playerid, DIALOG_BANK_FAC_END, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Transfered Funds", "You have just transfered the funds.", "Close", "");
	        }
	    }
		case DIALOG_BANK_FAC_REJECTION:
	    {
	        if(!response)
	        {
             	SelectedLoanID[playerid] = 0;
	            SelectedLoanAmount[playerid] = 0;

	            new name[50];
	            format(name, sizeof(name), "0");
	            SelectedLoanName[playerid] = name;
	        }
			else
	        {
	            new uquery[2000];
        		mysql_format(connection, uquery, sizeof(uquery), "UPDATE `user_accounts` SET `character_bank_loan` = '0' WHERE `character_name` = '%s' LIMIT 1", SelectedLoanName[playerid]);
				mysql_tquery(connection, uquery);
				
				ShowPlayerDialog(playerid, DIALOG_BANK_FAC_ENDR, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Rejection", "You have closed the application of the user!", "Close", "");
	        }
	    }
	    case DIALOG_BANK_FAC_END:
	    {
	        if(!response)
	        {
	            FactionData[4][Faction_Money] -= SelectedLoanAmount[playerid];
	            
	            new fquery[2000];
        		mysql_format(connection, fquery, sizeof(fquery), "UPDATE `faction_information` SET `faction_money` = faction_money - %d WHERE `faction_id` = '4' LIMIT 1", SelectedLoanAmount[playerid]);
				mysql_tquery(connection, fquery);
				
	            SelectedLoanID[playerid] = 0;
  				SelectedLoanAmount[playerid] = 0;

	            new name[50];
	            format(name, sizeof(name), "0");
	            SelectedLoanName[playerid] = name;
	        }
	        else
	        {
	            FactionData[4][Faction_Money] -= SelectedLoanAmount[playerid];
	            
	            new fquery[2000];
        		mysql_format(connection, fquery, sizeof(fquery), "UPDATE `faction_information` SET `faction_money` = faction_money - %d WHERE `faction_id` = '4' LIMIT 1", SelectedLoanAmount[playerid]);
				mysql_tquery(connection, fquery);
				
	            SelectedLoanID[playerid] = 0;
  				SelectedLoanAmount[playerid] = 0;

	            new name[50];
	            format(name, sizeof(name), "0");
	            SelectedLoanName[playerid] = name;
	        }
	    }
	    case DIALOG_BANK_VIEW_LOANS:
	    {
	        if(!response)
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        }
	        else
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        }
	    }
	    case DIALOG_BANK_BUSINESS:
	    {
	        if(!response)
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        }
	        else
	        {
	            switch(listitem)
		        {
		            case 0:
		            {
		                if(PlayerData[playerid][Character_Bank_Loan] == 1)
						{
						    ShowPlayerDialog(playerid, DIALOG_BANK_LOAN_SUBM, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Existing Application", "You already have an existing application open, please wait before applying again or speak to the bank!", "Close", "");
						}
						else
						{
						    ShowPlayerDialog(playerid, DIALOG_BANK_LOAN_AMOUNT, DIALOG_STYLE_INPUT, "Los Santos Bank - Application", "Please enter in the amount you would like to borrow:\n\n(Please remember to be realistic or they might deny your application)", "Next", "Go Back");
						}
					}
					case 1:
					{
					    new cquery[256];
					    mysql_format(connection, cquery, sizeof(cquery), "SELECT * FROM `loan_information` WHERE `loan_status` = '0' AND `loan_name` = '%e'", GetName(playerid));
						mysql_tquery(connection, cquery, "OnLoanCheckCustomer", "i", playerid);
					}
				}
	        }
	    }
	    case DIALOG_BANK_LOAN_AMOUNT:
	    {
	        if(!response)
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        }
	        else
	        {
	           	ApplicationLoanAmount[playerid] = strval(inputtext);
	            
	            ShowPlayerDialog(playerid, DIALOG_BANK_LOAN_REASON, DIALOG_STYLE_INPUT, "Los Santos Bank - Application", "Please enter in a reason for your loan:", "Submit", "Go Back");
	        }
	    }
	    case DIALOG_BANK_LOAN_REASON:
	    {
	        if(!response)
	        {
	            ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST, "Los Santos Bank", "Account Information\nLoan Information\nClose Bank Account", "Select", "Close");
	        }
	        else
	        {
				if(strlen(inputtext) > 50) return ShowPlayerDialog(playerid, DIALOG_BANK_LOAN_REASON, DIALOG_STYLE_INPUT, "Los Santos Bank - Application [Reason too long]", "Please enter in a reason for your loan:", "Submit", "Go Back");
				else				
				{
		            new string[50], Reason[50];
					format(string, sizeof(string), "%s", inputtext);
					Reason = string;
	
	                new query[256];
					mysql_format(connection, query, sizeof(query), "INSERT INTO `loan_information` (`loan_name`, `loan_amount`, `loan_reason`) VALUES ('%s', '%d', '%s')", GetName(playerid), ApplicationLoanAmount[playerid], Reason);
					mysql_tquery(connection, query);
					
					PlayerData[playerid][Character_Bank_Loan] = 1;
	
		            ShowPlayerDialog(playerid, DIALOG_BANK_LOAN_SUBM, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Submitted Application", "Thank you for submitting a loan application.\n\nThe staff of the bank will review this loan shortly", "Close", "");
				}	        
			}
	    }
		case DIALOG_FACTION_APP_VIEW:
	    {
	        if(!response)
	        {
				SelectedAppID[playerid] = 0;
				
				new name[50];
	            format(name, sizeof(name), "0");
	            SelectedAppName[playerid] = name;
	        }
			else
	        {
	            SelectedAppID[playerid] = SQL_APP_ID[playerid][listitem];
	            
	            new query[128];
			    mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `account_id` = %d", SelectedAppID[playerid]);
			    mysql_tquery(connection, query, "OnApplicationDetails", "i", playerid);
	        }
	    }
		case DIALOG_FACTION_APP_DET:
	    {
	        if(!response)
	        {
				new count;
				
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(strcmp(GetName(i), SelectedAppName[playerid]) == 0)
					{
						count = i;
						break;
					}
				}
				
				if(count > 0)
				{
					PlayerData[count][Character_Faction] = 0;
					
					new string[256];
					format(string, sizeof(string), "- You have just rejected an application while the player is online!");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					
					new string1[256];
					format(string1, sizeof(string1), "- Your application to join the faction has been rejected!");
					SendClientMessage(count, COLOR_YELLOW, string1);
					
					SelectedAppID[playerid] = 0;
					
					new name[50];
		            format(name, sizeof(name), "0");
		            SelectedAppName[playerid] = name;
				}
				else
				{
		            new uquery[2000];
	        		mysql_format(connection, uquery, sizeof(uquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '0' WHERE `account_id` = '%d' LIMIT 1", SelectedAppID[playerid]);
					mysql_tquery(connection, uquery);
					
					new string[256];
					format(string, sizeof(string), "- You have just rejected an offline application to join the faction!");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					
	             	SelectedAppID[playerid] = 0;
	
					new name[50];
		            format(name, sizeof(name), "0");
		            SelectedAppName[playerid] = name;
				}
	        }
			else
	        {
				new count;
				
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(strcmp(GetName(i), SelectedAppName[playerid]) == 0)
					{
						count = i;
						break;
					}
				}
				
				if(count > 0)
				{
					PlayerData[count][Character_Faction] = PlayerData[playerid][Character_Faction];
					PlayerData[count][Character_Faction_Rank] = 1;
					
					new string[256];
					format(string, sizeof(string), "- You have just approved an application while the player is online!");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					
					new string1[256];
					format(string1, sizeof(string1), "- Your application to join the faction has been approved!");
					SendClientMessage(count, COLOR_YELLOW, string1);
					
					SelectedAppID[playerid] = 0;
				}
				else
				{
		            new uquery[2000];
	        		mysql_format(connection, uquery, sizeof(uquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '0', `character_faction` = '%d', `character_faction_rank` = 1 WHERE `account_id` = '%d' LIMIT 1", PlayerData[playerid][Character_Faction], SelectedAppID[playerid]);
					mysql_tquery(connection, uquery);
					
					new string[256];
					format(string, sizeof(string), "- You have just approved an offline application to join the faction!");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					
	             	SelectedAppID[playerid] = 0;
				}
	        }
	    }
		case DIALOG_MDC_BOLOS:
	    {
	        if(!response)
	        {
	            ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
	        }
			else
	        {
	            new boloID = SQL_BOLO_ID[playerid][listitem];
	            
	            new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `crime_information` SET `crime_bolo_type` = 0 WHERE `crime_report_id` = '%d' LIMIT 1", boloID);
				mysql_tquery(connection, updatequery);
				
				ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
	        }
	    }
	    case DIALOG_MDC_MENU:
	    {
			if(!response) return 1;
			else
			{
		        switch(listitem)
		        {
		            case 0:
		            {
		                new bodytext[256];
		                format(bodytext, sizeof(bodytext), "Please enter in the player name that you need to check: (Firstname_Lastname)");

						ShowPlayerDialog(playerid, DIALOG_MDC_PLAYER_SEARCH, DIALOG_STYLE_INPUT, "MDC - Player Search", bodytext, "Search", "Go Back");
		            }
		            case 1:
		            {
	                    new bodytext[256];
		                format(bodytext, sizeof(bodytext), "Please enter in the license plate number of the vehicle: (ORP 001)");

						ShowPlayerDialog(playerid, DIALOG_MDC_VEHICLE_SEARCH, DIALOG_STYLE_INPUT, "MDC - Vehicle Search", bodytext, "Search", "Go Back");
		            }
					case 2:
		            {
	                    new cquery[256];
					    mysql_format(connection, cquery, sizeof(cquery), "SELECT * FROM `crime_information` WHERE `crime_type` = 3 AND `crime_bolo_type` <> 0");
						mysql_tquery(connection, cquery, "OnBoloCheck", "i", playerid);
		            }
		        }
			}
	    }
	    case DIALOG_MDC_PLAYER_SEARCH:
	    {
	        if(!response) return ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
			else
			{
			    new foundPlayer = false;
			    
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(strcmp(inputtext, PlayerData[i][Character_Name]) == 0)
					{
						new charactername[50];
						format(charactername, sizeof(charactername),"%s",PlayerData[i][Character_Name]);
						SQL_CHARACTER_NAME[playerid] = charactername;
						
					    new lastcrimestring[50], lastjailedstring[50];
					    new L1[20], L2[20], L3[20], L4[20], L5[20], L6[20];
					    
					    if(strlen(PlayerData[i][Character_Last_Crime]) == 0) { format(lastcrimestring, sizeof(lastcrimestring), "No records"); }
						else { format(lastcrimestring, sizeof(lastcrimestring), "%s", PlayerData[i][Character_Last_Crime]); }
						
						if(strlen(PlayerData[i][Character_Jail_Reason]) == 0) { format(lastjailedstring, sizeof(lastjailedstring), "No records"); }
						else { format(lastjailedstring, sizeof(lastjailedstring), "%s", PlayerData[i][Character_Jail_Reason]); }
				        
				        if(PlayerData[i][Character_License_Car] == 1) { format(L1, sizeof(L1), "Issued"); }
				        else if(PlayerData[i][Character_License_Car] == 0) { format(L1, sizeof(L1), "Not Obtained"); }
				        
				        if(PlayerData[i][Character_License_Truck] == 1) { format(L2, sizeof(L2), "Issued"); }
				        else if(PlayerData[i][Character_License_Truck] == 0) { format(L2, sizeof(L2), "Not Obtained"); }
				        
				        if(PlayerData[i][Character_License_Motorcycle] == 1) { format(L3, sizeof(L3), "Issued"); }
				        else if(PlayerData[i][Character_License_Motorcycle] == 0) { format(L3, sizeof(L3), "Not Obtained"); }
				        
				        if(PlayerData[i][Character_License_Boat] == 1) { format(L4, sizeof(L4), "Issued"); }
				        else if(PlayerData[i][Character_License_Boat] == 0) { format(L4, sizeof(L4), "Not Obtained"); }
				        
				        if(PlayerData[i][Character_License_Flying] == 1) { format(L5, sizeof(L5), "Issued"); }
				        else if(PlayerData[i][Character_License_Flying] == 0) { format(L5, sizeof(L5), "Not Obtained"); }
				        
				        if(PlayerData[i][Character_License_Firearms] == 1) { format(L6, sizeof(L6), "Issued"); }
				        else if(PlayerData[i][Character_License_Firearms] == 0) { format(L6, sizeof(L6), "Not Obtained"); }
				  
				        new bodytext[2000];
	           			format(bodytext, sizeof(bodytext), "Name:\t%s\nAge:\t%i\nSex:\t%s\n \nOutstanding Tickets:\t$%i\nLastest Crime:\t%s\nLast Jailed Reason:\t%s\n \nMotorcycle License:\t%s\nDrivers License:\t%s\nTruck License:\t%s\nBoat License:\t%s\nFlying License:\t%s\nFirearms License:\t%s", PlayerData[i][Character_Name], PlayerData[i][Character_Age], PlayerData[i][Character_Sex], PlayerData[i][Character_Total_Ticket_Amount], lastcrimestring, lastjailedstring, L1, L2, L3, L4, L5, L6);

						ShowPlayerDialog(playerid, DIALOG_MDC_PLAYER_RESULTS, DIALOG_STYLE_TABLIST, "MDC - Player Results", bodytext, "View Crimes", "Go Back");
						
						foundPlayer = true;
						break;
				    }
				}
				if(!foundPlayer)
    			{
					new bodytext[256];
	           		format(bodytext, sizeof(bodytext), "(ERROR - Invalid Player Name)\n\nPlease enter in the player name that you need to check: (Firstname_Lastname)");

					ShowPlayerDialog(playerid, DIALOG_MDC_PLAYER_SEARCH, DIALOG_STYLE_INPUT, "MDC - Player Search", bodytext, "Search", "Go Back");
			    }
			}
		}
		case DIALOG_MDC_PLAYER_RESULTS:
	    {
	        if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
			}
			else
			{
			    new cquery[256];
				mysql_format(connection, cquery, sizeof(cquery), "SELECT * FROM `crime_information` WHERE `crime_character_name` = '%e' AND `crime_type` IN(1,2) AND `crime_voided` = 0", SQL_CHARACTER_NAME[playerid]);
				mysql_tquery(connection, cquery, "OnCrimeCheck", "i", playerid);
			}
		}
		case DIALOG_CRIME_CHECK:
	    {
	        if(!response) return 1;
			else
			{
			 	ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
			}
		}
		case DIALOG_MDC_VEHICLE_SEARCH:
	    {
	        if(!response) return ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
			else
			{
			    new foundVehicle = false;

			    for(new i = 0; i < MAX_VEHICLES; i++)
				{
				    if(strcmp(inputtext, VehicleData[i][Vehicle_License_Plate]) == 0)
					{
     			        new bodytext[500], modelname[50], ownername[50];
     			        
		                if(VehicleData[i][Vehicle_Faction] == 0)
						{
							format(ownername, sizeof(ownername), "%s", VehicleData[i][Vehicle_Owner]);
						}
						else if(VehicleData[i][Vehicle_Faction] == 1) { format(ownername, sizeof(ownername), "LSPD"); }
						else if(VehicleData[i][Vehicle_Faction] == 2) { format(ownername, sizeof(ownername), "LSFD"); }
						else if(VehicleData[i][Vehicle_Faction] == 3) { format(ownername, sizeof(ownername), "LSMC"); }
						else if(VehicleData[i][Vehicle_Faction] == 4) { format(ownername, sizeof(ownername), "LS BANK"); }
						else if(VehicleData[i][Vehicle_Faction] == 5) { format(ownername, sizeof(ownername), "Tow Company"); }
						else if(VehicleData[i][Vehicle_Faction] == 6) { format(ownername, sizeof(ownername), "Transport Company"); }
						else if(VehicleData[i][Vehicle_Faction] == 7) { format(ownername, sizeof(ownername), "Truck Company"); }
						else if(VehicleData[i][Vehicle_Faction] == 8) { format(ownername, sizeof(ownername), "Dudefix Company"); }
						else if(VehicleData[i][Vehicle_Faction] == 9) { format(ownername, sizeof(ownername), "Mechanics Company"); }
						else if(VehicleData[i][Vehicle_Faction] == 10) { format(ownername, sizeof(ownername), "Grove Street"); }
						else if(VehicleData[i][Vehicle_Faction] == 11) { format(ownername, sizeof(ownername), "La Familia"); }
						else if(VehicleData[i][Vehicle_Faction] == 12) { format(ownername, sizeof(ownername), "Hell Angels"); }
						else if(VehicleData[i][Vehicle_Faction] == 13) { format(ownername, sizeof(ownername), "Hendrix Familia"); }
						else if(VehicleData[i][Vehicle_Faction] == 14) { format(ownername, sizeof(ownername), "Ballas"); }
						else if(VehicleData[i][Vehicle_Faction] == 15) { format(ownername, sizeof(ownername), "Southsiders"); }
						else if(VehicleData[i][Vehicle_Faction] == 16) { format(ownername, sizeof(ownername), "Driving School"); }
						
     			        format(modelname, sizeof(modelname), "%s", GetVehicleModelName(VehicleData[i][Vehicle_Model]));
 						format(bodytext, sizeof(bodytext), "Vehicle Model:\t%s\nVehicle Plate:\t%s\nVehicle Owner:\t%s\n \nRelated Crime:\tNo Records\nImpounded:\tNo Records", modelname, VehicleData[i][Vehicle_License_Plate], ownername);

						ShowPlayerDialog(playerid, DIALOG_MDC_VEHICLE_RESULTS, DIALOG_STYLE_TABLIST, "MDC - Vehicle Results", bodytext, "Go Back", "Close");

						foundVehicle = true;
						break;
				    }
				}
				if(!foundVehicle)
    			{
					new bodytext[256];
	           		format(bodytext, sizeof(bodytext), "(ERROR - Invalid License Plate Number)\n\nPlease enter in the license plate number of the vehicle: (ORP 001)");

					ShowPlayerDialog(playerid, DIALOG_MDC_VEHICLE_SEARCH, DIALOG_STYLE_INPUT, "MDC - Vehicle Search", bodytext, "Search", "Go Back");
			    }
			}
		}
		case DIALOG_MDC_VEHICLE_RESULTS:
	    {
	        if(!response) return 1;
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
			}
		}
		case DIALOG_PLAYER_SKINS:
	    {
			if(!response) return 1;
			else
			{
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PlayerData[playerid][Character_Skin_1] > 0) 
						{
							SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
							
							new string[256];
						    format(string, sizeof(string), "> %s removes some clothing from their pockets and puts on a new set", GetRPName(playerid));
						    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}
		                else return SendPlayerErrorMessage(playerid, " You do not have an outfit saved in this slot to put any clothes on!");
		            }
		            case 1:
		            {
	                    if(PlayerData[playerid][Character_Skin_2] > 0) 
						{
							SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_2]);
							
							new string[256];
						    format(string, sizeof(string), "> %s removes some clothing from their pockets and puts on a new set", GetRPName(playerid));
						    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}
		                else return SendPlayerErrorMessage(playerid, " You do not have an outfit saved in this slot to put any clothes on!");
		            }
		            case 2:
		            {
	                    if(PlayerData[playerid][Character_Skin_3] > 0) 
						{
							SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_3]);
							
							new string[256];
						    format(string, sizeof(string), "> %s removes some clothing from their pockets and puts on a new set", GetRPName(playerid));
						    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}
		                else return SendPlayerErrorMessage(playerid, " You do not have an outfit saved in this slot to put any clothes on!");
		            }
		        }
			}
	    }
		case DIALOG_PLAYER_SHOP_SKIN:
	    {
			if(!response) return 1;
			else
			{
		        switch(listitem)
		        {
		            case 0:
		            {
		                PlayerData[playerid][Character_Skin_1] =  GetPlayerSkin(playerid);
						Binco_New_Outfit[playerid] = 1;
						
						new string[256];
						format(string, sizeof(string), "- You have just selected your skins slot, click on the Aim button to purchase!");
						SendClientMessage(playerid, COLOR_YELLOW, string);
		            }
		            case 1:
		            {
	                    PlayerData[playerid][Character_Skin_2] =  GetPlayerSkin(playerid);
						Binco_New_Outfit[playerid] = 2;
						
						new string[256];
						format(string, sizeof(string), "- You have just selected your skins slot, click on the Aim button to purchase!");
						SendClientMessage(playerid, COLOR_YELLOW, string);
		            }
		            case 2:
		            {
	                    PlayerData[playerid][Character_Skin_3] =  GetPlayerSkin(playerid);
						Binco_New_Outfit[playerid] = 3;
						
						new string[256];
						format(string, sizeof(string), "- You have just selected your skins slot, click on the Aim button to purchase!");
						SendClientMessage(playerid, COLOR_YELLOW, string);
		            }
		        }
			}
	    }
	    case DIALOG_LSPD_SEARCH:
	    {
	        if(!response) return 1;
	        else
	        {
	            new targetid, string[256];
	            targetid = WhoHasBeenSearched[playerid];
	            
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(PlayerData[targetid][Character_Has_Rope] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Rope] = 0;
                            
                            format(string, sizeof(string), "> %s has just removed ropes off of %s", GetName(playerid), GetName(targetid));
   							SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed ropes from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
	                    
	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any ropes on their person!", "Go Back", "Close");
	                }
	                case 1:
	                {
	                    if(PlayerData[targetid][Character_Has_Fuelcan] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Fuelcan] = 0;

                            format(string, sizeof(string), "> %s has just removed fuelcans from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed fuelcans from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any fuelcans on their person!", "Go Back", "Close");
	                }
	                case 2:
	                {
	                    if(PlayerData[targetid][Character_Has_Lockpick] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Lockpick] = 0;

                            format(string, sizeof(string), "> %s has just removed lockpicks from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed lockpicks from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any lockpicks on their person!", "Go Back", "Close");
	                }
	                case 3:
	                {
	                    if(PlayerData[targetid][Character_Has_Drugs] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Drugs] = 0;

                            format(string, sizeof(string), "> %s has just removed drugs from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed drugs from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any drugs on their person!", "Go Back", "Close");
	                }
					case 4:
	                {
	                    if(PlayerData[targetid][Character_Drug_Cocaine] > 0)
	                    {
                            PlayerData[targetid][Character_Drug_Cocaine] = 0;

                            format(string, sizeof(string), "> %s has just removed cocaine from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed cocaine from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any cocaine on their person!", "Go Back", "Close");
	                }
					case 5:
	                {
	                    if(PlayerData[targetid][Character_Drug_Heroin] > 0)
	                    {
                            PlayerData[targetid][Character_Drug_Heroin] = 0;

                            format(string, sizeof(string), "> %s has just removed heroin from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed heroin from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any heroin on their person!", "Go Back", "Close");
	                }
					case 6:
	                {
	                    if(PlayerData[targetid][Character_Drug_Weed] > 0)
	                    {
                            PlayerData[targetid][Character_Drug_Weed] = 0;

                            format(string, sizeof(string), "> %s has just removed weed from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed weed from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any weed on their person!", "Go Back", "Close");
	                }
	                case 7:
	                {
	                    if(PlayerData[targetid][Character_Has_Food] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Food] = 0;

                            format(string, sizeof(string), "> %s has just removed food from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed food from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any food on their person!", "Go Back", "Close");
	                }
	                case 8:
	                {
	                    if(PlayerData[targetid][Character_Has_Drinks] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Drinks] = 0;

                            format(string, sizeof(string), "> %s has just removed drinks from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed drinks from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any drinks on their person!", "Go Back", "Close");
	                }
	                case 9:
	                {
	                    if(PlayerData[targetid][Character_Has_Alcohol] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Alcohol] = 0;

                            format(string, sizeof(string), "> %s has just removed alcohol from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed alochol from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any alochol on their person!", "Go Back", "Close");
	                }
	                case 10:
	                {
	                    if(PlayerData[targetid][Character_Has_Device] > 0)
	                    {
                            PlayerData[targetid][Character_Has_Device] = 0;

                            format(string, sizeof(string), "> %s has just removed hacking devices from %s", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have just removed hacking devices from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);

	                        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
	                    }
	                    else return ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH_RESULTS, DIALOG_STYLE_MSGBOX, "Searched Inventory.. - [Unsucessful]", "This character does not hold any alochol on their person!", "Go Back", "Close");
	                }
	            }
	        }
	    }
	    case DIALOG_LSPD_SEARCH_RESULTS:
	    {
			if(!response) return 1;
			else
			{
			    new targetid;
	            targetid = WhoHasBeenSearched[playerid];
	            
			    new bodytext[2000];
    			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);
				ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
			}
	    }
	    case DIALOG_SHOP_TYPE_ONE:
		{
		    if(!response) return 1;

		    if(response)
		    {        
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PlayerData[playerid][Character_Money] >= 12)
		                {
			                PlayerData[playerid][Character_Has_Food] += 1;
			                PlayerData[playerid][Character_Money] -= 12;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$12");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a hotdog for $12");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a hotdog from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(12 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
		            case 1:
		            {
		                if(PlayerData[playerid][Character_Money] >= 4)
		                {
			                PlayerData[playerid][Character_Has_Drinks] += 1;
			                PlayerData[playerid][Character_Money] -= 4;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$4");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			                
			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a soda for $4");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a soda from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(4 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
                        else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
		            case 2:
		            {
		                if(PlayerData[playerid][Character_Money] >= 30)
		                {
			                PlayerData[playerid][Character_Has_Alcohol] += 1;
			                PlayerData[playerid][Character_Money] -= 30;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$30");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased alcohol for $30");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased alcohol from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(30 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
		            case 3:
		            {
		                if(PlayerData[playerid][Character_Money] >= 800)
		                {
			                PlayerData[playerid][Character_Has_Lockpick] += 1;
			                PlayerData[playerid][Character_Money] -= 800;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$800");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a lockpick for $800");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a lockpick from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(800 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
		            case 4:
		            {
		                if(PlayerData[playerid][Character_Money] >= 200)
		                {
			                PlayerData[playerid][Character_Has_Rope] += 1;
			                PlayerData[playerid][Character_Money] -= 200;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$200");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a rope for $200");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a rope from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(200 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
					case 5:
		            {
		                if(PlayerData[playerid][Character_Money] >= 2500)
		                {							
			                PlayerData[playerid][Character_Has_Mask] += 1;
			                PlayerData[playerid][Character_Money] -= 2500;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$2500");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a mask for $2500");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a mask from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(2500 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
					case 6:
		            {
		                if(PlayerData[playerid][Character_Money] >= 3500)
		                {
			                PlayerData[playerid][Character_Radio] += 1;
			                PlayerData[playerid][Character_Money] -= 3500;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$3500");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			              
			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a radio for $3500");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a radio from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(3500 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
					case 7:
		            {
		                if(PlayerData[playerid][Character_Money] >= 50)
		                {
			                PlayerData[playerid][Character_Has_Blindfold] += 1;
			                PlayerData[playerid][Character_Money] -= 50;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$50");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a blindfold for $50");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a blindfold from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(50 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
						}
		            }
		        }
		    }
		}
		case DIALOG_SHOP_TYPE_TWO:
		{
		    if(!response) return 1;

		    if(response)
		    {
		        new string[256];

		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PlayerData[playerid][Character_Money] >= 4)
		                {
			                PlayerData[playerid][Character_Has_Food] += 1;
			                PlayerData[playerid][Character_Money] -= 4;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$4");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			               
			                format(string, sizeof(string), "> %s has just purchased some fruit from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(4 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
						}
		            }
		            case 1:
		            {
		                if(PlayerData[playerid][Character_Money] >= 3)
		                {
			                PlayerData[playerid][Character_Has_Food] += 1;
			                PlayerData[playerid][Character_Money] -= 3;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$3");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased some vegetables from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(3 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
                        else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
						}
		            }
		            case 2:
		            {
		                if(PlayerData[playerid][Character_Money] >= 50)
		                {
			                PlayerData[playerid][Character_Has_Drinks] += 1;
			                PlayerData[playerid][Character_Money] -= 50;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$50");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased some drinks from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(50 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
						}
		            }
		            case 3:
		            {
		                if(PlayerData[playerid][Character_Money] >= 5)
		                {
			                PlayerData[playerid][Character_Has_Drinks] += 1;
			                PlayerData[playerid][Character_Money] -= 5;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$5");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			
			                format(string, sizeof(string), "> %s has just purchased some milk from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(5 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
						}
		            }
		            case 4:
		            {
		                if(PlayerData[playerid][Character_Money] >= 12)
		                {
			                PlayerData[playerid][Character_Has_Food] += 1;
			                PlayerData[playerid][Character_Money] -= 12;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$12");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased some cheese from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(12 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
						}
		            }
		            case 5:
		            {
		                SendPlayerErrorMessage(playerid, " This item doesn't exist yet within the server (coming soon)!");
		                ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
		                /*if(PlayerData[playerid][Character_Money] >= 250)
		                {
			                PlayerData[playerid][Character_Has_Rope] += 1;
			                PlayerData[playerid][Character_Money] -= 250;

			                format(string, sizeof(string), "> %s has just purchased some metal fragments from the store", GetName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(250 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
						}*/
		            }
		            case 6:
		            {
		                if(PlayerData[playerid][Character_Money] >= 8)
		                {
			                PlayerData[playerid][Character_Has_Food] += 1;
			                PlayerData[playerid][Character_Money] -= 8;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$8");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased some meat from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(8 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
						}
		            }
		        }
		    }
		}
		case DIALOG_SHOP_TYPE_THREE:
		{
		    if(!response) return 1;

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
		            }
		            case 1:
		            {
		                ShowPlayerDialog(playerid, DIALOG_SHOP_3_SIM, DIALOG_STYLE_TABLIST, "Electronic Store - Sim Cards", "1. Telecom Network\t$250\n2. Valley Network\t$450", "Purchase", "Go Back");
		            }
					case 2:
		            {
		                ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
		            }
		        }
		    }
		}
		case DIALOG_SHOP_3_MOB:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_THREE, DIALOG_STYLE_LIST, "Electronic Store", "1. Mobile Phone\n2. Sim Card\n3. House Items", "Next", "Close");

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PlayerData[playerid][Character_Money] >= 500)
		                {
			                PlayerData[playerid][Character_Has_Phone] = 1;
			                PlayerData[playerid][Character_Money] -= 500;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$500");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a nokia phone for $500");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a mobile phone from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(500 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
							
							ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
		            }
		            case 1:
		            {
		                if(PlayerData[playerid][Character_Money] >= 2000)
		                {
			                PlayerData[playerid][Character_Has_Phone] = 2;
			                PlayerData[playerid][Character_Money] -= 2000;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$2000");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a samsung phone for $2000");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a mobile phone from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(2000 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
							
							ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
		            }
					case 2:
		            {
		                if(PlayerData[playerid][Character_Money] >= 2500)
		                {
			                PlayerData[playerid][Character_Has_Phone] = 3;
			                PlayerData[playerid][Character_Money] -= 2500;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$2500");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			               
			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a iphone for $2500");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a mobile phone from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(2500 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
							
							ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
		            }
		            case 3:
		            {
		                if(PlayerData[playerid][Character_Money] >= 5000)
		                {
			                PlayerData[playerid][Character_Has_Device] += 1;
			                PlayerData[playerid][Character_Money] -= 5000;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$5000");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a hacking device for $5000");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a device from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(5000 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
							
							ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_MOB, DIALOG_STYLE_TABLIST, "Electronic Store - Mobile Phones", "1. Nokia\t$500\n2. Samsung\t$2000\n3. iPhone\t$2500\n4. Hacking Device\t$5000", "Purchase", "Go Back");
						}
		            }
		        }
		    }
		}
		case DIALOG_SHOP_3_SIM:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_THREE, DIALOG_STYLE_LIST, "Electronic Store", "1. Mobile Phone\n2. Sim Card\n3. House Items", "Next", "Close");

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PlayerData[playerid][Character_Money] >= 250)
		                {
			                PlayerData[playerid][Character_Has_SimCard] = 1;
			                PlayerData[playerid][Character_Money] -= 250;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$250");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			                
			                SQL_PHONENUMBER_USED = 0;

				            new MAX_ATTEMPTS = 3;
				            for (new i = 0; i < MAX_ATTEMPTS; i++)
				            {
				                if(SQL_PHONENUMBER_USED == 0)
				                {
				                    SQL_PHONENUMBER_GENERATED = 100000 + random(900000);

				                    new query[128];
								    mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `character_phonenumber` = '%i' LIMIT 1", SQL_PHONENUMBER_GENERATED);
									mysql_tquery(connection, query, "GetNextPhoneNumber");
				                }
				                else return 1;
				            }

				            PlayerData[playerid][Character_Phonenumber] = SQL_PHONENUMBER_GENERATED;

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a telecom network simcard for $250");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a simcard from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(250 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
							
							ShowPlayerDialog(playerid, DIALOG_SHOP_3_SIM, DIALOG_STYLE_TABLIST, "Electronic Store - Sim Cards", "1. Telecom Network\t$250\n2. Valley Network\t$450", "Purchase", "Go Back");
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_SIM, DIALOG_STYLE_TABLIST, "Electronic Store - Sim Cards", "1. Telecom Network\t$250\n2. Valley Network\t$450", "Purchase", "Go Back");
						}
		            }
		            case 1:
		            {
		                if(PlayerData[playerid][Character_Money] >= 450)
		                {
			                PlayerData[playerid][Character_Has_SimCard] = 2;
			                PlayerData[playerid][Character_Money] -= 450;
			
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$450");
							GameTextForPlayer(playerid, text_value, 3000, 1);
			                
			                SQL_PHONENUMBER_USED = 0;

				            new MAX_ATTEMPTS = 3;
				            for (new i = 0; i < MAX_ATTEMPTS; i++)
				            {
				                if(SQL_PHONENUMBER_USED == 0)
				                {
				                    SQL_PHONENUMBER_GENERATED = 100000 + random(900000);

				                    new query[128];
								    mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `character_phonenumber` = '%i' LIMIT 1", SQL_PHONENUMBER_GENERATED);
									mysql_tquery(connection, query, "GetNextPhoneNumber");
				                }
				                else return 1;
				            }
				            
				            PlayerData[playerid][Character_Phonenumber] = SQL_PHONENUMBER_GENERATED;

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a valley network simcard for $450");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
				
							new string[256];
			                format(string, sizeof(string), "> %s has just purchased a simcard from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(250 * 0.003);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
							
							ShowPlayerDialog(playerid, DIALOG_SHOP_3_SIM, DIALOG_STYLE_TABLIST, "Electronic Store - Sim Cards", "1. Telecom Network\t$250\n2. Valley Network\t$450", "Purchase", "Go Back");
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_SIM, DIALOG_STYLE_TABLIST, "Electronic Store - Sim Cards", "1. Telecom Network\t$250\n2. Valley Network\t$450", "Purchase", "Go Back");
						}
					}
		        }
		    }
		}
		case DIALOG_SHOP_3_HOUSE:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_THREE, DIALOG_STYLE_LIST, "Electronic Store", "1. Mobile Phone\n2. Sim Card\n3. House Items", "Next", "Close");

		    if(response)
		    {
		        switch(listitem)
		        {					
		            case 0:
		            {						
		                if(PlayerData[playerid][Character_Money] >= 2500)
		                {
							for(new a = 1; a < MAX_HOUSES; a++)
							{
								if(strcmp(HouseData[a][House_Owner], PlayerData[playerid][Character_Name]) == 0)
								{
								    FoundPlayerHouseID[playerid] = a;
									break;
								}
							}
							
							if(FoundPlayerHouseID[playerid] == 0) 
							{
								SendPlayerErrorMessage(playerid, " You do not own a property to buy a lock for!");
								ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
							}
							else
							{
								PlayerData[playerid][Character_Money] -= 5500;
								PlayerData[playerid][Character_House_Lock] += 1;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$5500");
								GameTextForPlayer(playerid, text_value, 3000, 1);
						
								FoundPlayerHouseID[playerid] = 0;
									
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just purchased a house lock for $2500");
								SendClientMessage(playerid, COLOR_ACTION, dstring);
					
								new string[256];
				                format(string, sizeof(string), "> %s has just purchased a lock from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(5500 * 0.003);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
								
								ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
							}
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
						}
		            }
		            case 1:
		            {
		                if(PlayerData[playerid][Character_Money] >= 5500)
		                {
							for(new a = 1; a < MAX_HOUSES; a++)
							{
								if(strcmp(HouseData[a][House_Owner], PlayerData[playerid][Character_Name]) == 0)
								{
								    FoundPlayerHouseID[playerid] = a;
									break;
								}
							}
							
							if(FoundPlayerHouseID[playerid] == 0) 
							{
								SendPlayerErrorMessage(playerid, " You do not own a property to buy an alarm for!");
								ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
							}
							else
							{
								PlayerData[playerid][Character_Money] -= 5500;
								PlayerData[playerid][Character_House_Alarm] += 1;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$5500");
								GameTextForPlayer(playerid, text_value, 3000, 1);
						
								FoundPlayerHouseID[playerid] = 0;
									
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just purchased a house alarm for $5500");
								SendClientMessage(playerid, COLOR_ACTION, dstring);
					
								new string[256];
				                format(string, sizeof(string), "> %s has just purchased an alarm from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(5500 * 0.003);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
								
								ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
							}
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
						}
		            }
					case 2:
		            {						
		                if(PlayerData[playerid][Character_Coins] >= 30)
		                {
							for(new a = 1; a < MAX_HOUSES; a++)
							{
								if(strcmp(HouseData[a][House_Owner], PlayerData[playerid][Character_Name]) == 0)
								{
								    FoundPlayerHouseID[playerid] = a;
									break;
								}
							}
							
							if(FoundPlayerHouseID[playerid] == 0) 
							{
								SendPlayerErrorMessage(playerid, " You do not own a property to buy a safe for!");
								ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
							}
							else if(PlayerData[playerid][Character_House_Safe] > 0) 
							{
								SendPlayerErrorMessage(playerid, " You cannot hold onto more than one safe in your inventory!");
								ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
							}
							else
							{
								PlayerData[playerid][Character_Coins] -= 30;
								PlayerData[playerid][Character_House_Safe] += 1;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-30 coins");
								GameTextForPlayer(playerid, text_value, 3000, 1);
						
								FoundPlayerHouseID[playerid] = 0;
									
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just purchased a house safe for 30 coins");
								SendClientMessage(playerid, COLOR_ACTION, dstring);
					
								new string[256];
				                format(string, sizeof(string), "> %s has just purchased a safe from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(5500 * 0.003);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
								
								ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
							}
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough coins to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_3_HOUSE, DIALOG_STYLE_TABLIST, "Electronic Store - House Items", "1. House Lock\t$2500\n2. House Alarm\t$5500\n3. House Safe\t30 coins", "Purchase", "Go Back");
						}
		            }
		        }
		    }
		}
		case DIALOG_SHOP_TYPE_FOUR:
		{
			if(!response) return 1;
			
			if(response)
			{
				switch(listitem)
				{					
					case 0:
					{						
						if(PlayerData[playerid][Character_Money] < 10)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_TABLIST, "Fast Food Joint", "1. Number 1\t$10\n2. Number 2\t$15\n3. Number 3\t$50\n4. Number 4\t$65\n5. Fat Guy\t$150", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 1;
							PlayerData[playerid][Character_Money] -= 10;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$10");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a number 1 for $10");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
					
							new string[256];
				            format(string, sizeof(string), "> %s has just purchased some food from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(10 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}						
					}
					case 1:
					{						
						if(PlayerData[playerid][Character_Money] < 15)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_TABLIST, "Fast Food Joint", "1. Number 1\t$10\n2. Number 2\t$15\n3. Number 3\t$50\n4. Number 4\t$65\n5. Fat Guy\t$150", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 2;
							PlayerData[playerid][Character_Money] -= 15;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$15");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(15 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a number 2 for $15");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
					
							new string[256];
				            format(string, sizeof(string), "> %s has just purchased some food from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 2:
					{						
						if(PlayerData[playerid][Character_Money] < 50)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_TABLIST, "Fast Food Joint", "1. Number 1\t$10\n2. Number 2\t$15\n3. Number 3\t$50\n4. Number 4\t$65\n5. Fat Guy\t$150", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 3;
							PlayerData[playerid][Character_Money] -= 50;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$50");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(50 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a number 3 for $50");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
					
							new string[256];
				            format(string, sizeof(string), "> %s has just purchased some food from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 3:
					{						
						if(PlayerData[playerid][Character_Money] < 65)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_TABLIST, "Fast Food Joint", "1. Number 1\t$10\n2. Number 2\t$15\n3. Number 3\t$50\n4. Number 4\t$65\n5. Fat Guy\t$150", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 5;
							PlayerData[playerid][Character_Money] -= 65;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$65");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(65 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a number 4 for $65");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
					
							new string[256];
				            format(string, sizeof(string), "> %s has just purchased some food from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 4:
					{						
						if(PlayerData[playerid][Character_Money] < 150)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_TABLIST, "Fast Food Joint", "1. Number 1\t$10\n2. Number 2\t$15\n3. Number 3\t$50\n4. Number 4\t$65\n5. Fat Guy\t$150", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 10;
							PlayerData[playerid][Character_Money] -= 150;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$150");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(150 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased a fat guy meal for $150");
							SendClientMessage(playerid, COLOR_ACTION, dstring);
					
							new string[256];
				            format(string, sizeof(string), "> %s has just purchased some food from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
				}
			}
		}
		case DIALOG_SHOP_TYPE_FIVE:
		{
			if(!response) return 1;
			
			if(response)
			{
				switch(listitem)
				{					
					case 0:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 10)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FIVE, DIALOG_STYLE_LIST, "Bar / Resturant", "Vodka ($10)\nRose Bud ($15)\nBeer ($20)\nPeanuts ($4)\nCrisps ($6)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Alcohol] += 1;
							PlayerData[playerid][Character_Money] -= 10;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$10");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(10 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased a Vodka from the bar", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 1:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 15)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FIVE, DIALOG_STYLE_LIST, "Bar / Resturant", "Vodka ($10)\nRose Bud ($15)\nBeer ($20)\nPeanuts ($4)\nCrisps ($6)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Alcohol] += 1;
							PlayerData[playerid][Character_Money] -= 15;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$15");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(15 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased a Rose Bud from the bar", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 2:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 20)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FIVE, DIALOG_STYLE_LIST, "Bar / Resturant", "Vodka ($10)\nRose Bud ($15)\nBeer ($20)\nPeanuts ($4)\nCrisps ($6)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Alcohol] += 1;
							PlayerData[playerid][Character_Money] -= 20;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$20");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(20 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased a Beer from the bar", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 3:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 4)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_LIST, "Food Store", "Number 1 ($10)\nNumber 2 ($15)\nNumber 3 ($50)\nNumber 4 ($65)\nFat Guy ($150)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 1;
							PlayerData[playerid][Character_Money] -= 4;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$4");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(4 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased some Peanuts from the bar", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 4:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 6)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_LIST, "Food Store", "Number 1 ($10)\nNumber 2 ($15)\nNumber 3 ($50)\nNumber 4 ($65)\nFat Guy ($150)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 1;
							PlayerData[playerid][Character_Money] -= 6;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$6");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(6 * 0.03);
		
							new equery[2000];
					     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased a bag of Crisps from the bar", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
				}
			}
		}
		case DIALOG_SHOP_TYPE_SIX:
		{
		    if(!response) return 1;

		    if(response)
		    {
		    }
		}
		case DIALOG_SHOP_TYPE_SEVEN:
		{
		    if(!response) return 1;

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, DIALOG_SHOP_7_WEAPONS, DIALOG_STYLE_TABLIST, "Ammunation Store - Weapon", "Knife\t$200\n9mm Pistol\t$1500\nShotgun\t$3500\nAK-47\t$10500\nRifle\t$15000\nSniper Rifle\t$35000", "Purchase", "Close");
		            }
		            case 1:
		            {
		                ShowPlayerDialog(playerid, DIALOG_SHOP_7_EXTRAS, DIALOG_STYLE_TABLIST, "Ammunation Store - Extras", "Tear Gas\t$650\nMolotov\t$1500\nBrass Knuckles\t$2500\nArmour\t$3000", "Purchase", "Close");
		            }
		        }
		    }
		}
		case DIALOG_SHOP_7_WEAPONS:
		{
		    if(!response) return 1;

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                new string[256];
		                
		                if(PlayerData[playerid][Character_License_Firearms] == 1)
		                {
			                if(PlayerData[playerid][Character_Money] >= 200)
			                {
								GivePlayerWeapon(playerid, WEAPON_KNIFE, 1);
								
								PlayerData[playerid][Character_Money] -= 200;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$200");
								GameTextForPlayer(playerid, text_value, 3000, 1);

				                format(string, sizeof(string), "> %s has just purchased a Knife from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(200 * 0.03);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
							}
							else
							{
							    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							    ShowPlayerDialog(playerid, DIALOG_SHOP_7_WEAPONS, DIALOG_STYLE_TABLIST, "Ammunation Store - Weapon", "Knife\t$200\n9mm Pistol\t$1500\nShotgun\t$3500\nAK-47\t$10500\nRifle\t$15000\nSniper Rifle\t$35000", "Purchase", "Close");
							}
						}
						else if(PlayerData[playerid][Character_License_Firearms] == 0)
						{
						    ShowPlayerDialog(playerid, DIALOG_SHOP_ROB_SRIFLE, DIALOG_STYLE_MSGBOX, "Ammunation Store - Failure", "You currently do not have a weapon license and are restricted from purchasing certain weapons.\n\nTo obtain your weapon license, you can either do this at City Hall or get in contact with a police officer!", "Close", "");
						}
		            }
		            case 1:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_License_Firearms] == 1)
		                {
			                if(PlayerData[playerid][Character_Money] >= 1500)
			                {
								GivePlayerWeapon(playerid, WEAPON_COLT45, 50);

								PlayerData[playerid][Character_Money] -= 1500;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$1500");
								GameTextForPlayer(playerid, text_value, 3000, 1);

				                format(string, sizeof(string), "> %s has just purchased a 9mm Pistol from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(1500 * 0.03);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
							}
							else
							{
							    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							    ShowPlayerDialog(playerid, DIALOG_SHOP_7_WEAPONS, DIALOG_STYLE_TABLIST, "Ammunation Store - Weapon", "Knife\t$200\n9mm Pistol\t$1500\nShotgun\t$3500\nAK-47\t$10500\nRifle\t$15000\nSniper Rifle\t$35000", "Purchase", "Close");
							}
						}
						else if(PlayerData[playerid][Character_License_Firearms] == 0)
						{
						    ShowPlayerDialog(playerid, DIALOG_SHOP_ROB_SRIFLE, DIALOG_STYLE_MSGBOX, "Ammunation Store - Failure", "You currently do not have a weapon license and are restricted from purchasing certain weapons.\n\nTo obtain your weapon license, you can either do this at City Hall or get in contact with a police officer!", "Close", "");
						}
		            }
		            case 2:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_License_Firearms] == 1)
		                {
			                if(PlayerData[playerid][Character_Money] >= 3500)
			                {
								GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 30);

								PlayerData[playerid][Character_Money] -= 3500;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$3500");
								GameTextForPlayer(playerid, text_value, 3000, 1);

				                format(string, sizeof(string), "> %s has just purchased a Shotgun from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(3500 * 0.03);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
							}
							else
							{
							    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							    ShowPlayerDialog(playerid, DIALOG_SHOP_7_WEAPONS, DIALOG_STYLE_TABLIST, "Ammunation Store - Weapon", "Knife\t$200\n9mm Pistol\t$1500\nShotgun\t$3500\nAK-47\t$10500\nRifle\t$15000\nSniper Rifle\t$35000", "Purchase", "Close");
							}
						}
						else if(PlayerData[playerid][Character_License_Firearms] == 0)
						{
						    ShowPlayerDialog(playerid, DIALOG_SHOP_ROB_SRIFLE, DIALOG_STYLE_MSGBOX, "Ammunation Store - Failure", "You currently do not have a weapon license and are restricted from purchasing certain weapons.\n\nTo obtain your weapon license, you can either do this at City Hall or get in contact with a police officer!", "Close", "");
						}
		            }
		            case 3:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_License_Firearms] == 1)
		                {
			                if(PlayerData[playerid][Character_Money] >= 10500)
			                {
								GivePlayerWeapon(playerid, WEAPON_AK47, 80);

								PlayerData[playerid][Character_Money] -= 10500;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$10500");
								GameTextForPlayer(playerid, text_value, 3000, 1);

				                format(string, sizeof(string), "> %s has just purchased a AK-47 from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(10500 * 0.03);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
							}
							else
							{
							    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							    ShowPlayerDialog(playerid, DIALOG_SHOP_7_WEAPONS, DIALOG_STYLE_TABLIST, "Ammunation Store - Weapon", "Knife\t$200\n9mm Pistol\t$1500\nShotgun\t$3500\nAK-47\t$10500\nRifle\t$15000\nSniper Rifle\t$35000", "Purchase", "Close");
							}
						}
						else if(PlayerData[playerid][Character_License_Firearms] == 0)
						{
						    ShowPlayerDialog(playerid, DIALOG_SHOP_ROB_SRIFLE, DIALOG_STYLE_MSGBOX, "Ammunation Store - Failure", "You currently do not have a weapon license and are restricted from purchasing certain weapons.\n\nTo obtain your weapon license, you can either do this at City Hall or get in contact with a police officer!", "Close", "");
						}
		            }
		            case 4:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_License_Firearms] == 1)
		                {
			                if(PlayerData[playerid][Character_Money] >= 15000)
			                {
								GivePlayerWeapon(playerid, WEAPON_RIFLE, 30);

								PlayerData[playerid][Character_Money] -= 15000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$15000");
								GameTextForPlayer(playerid, text_value, 3000, 1);

				                format(string, sizeof(string), "> %s has just purchased a Rifle from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(15000 * 0.03);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
							}
							else
							{
							    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							    ShowPlayerDialog(playerid, DIALOG_SHOP_7_WEAPONS, DIALOG_STYLE_TABLIST, "Ammunation Store - Weapon", "Knife\t$200\n9mm Pistol\t$1500\nShotgun\t$3500\nAK-47\t$10500\nRifle\t$15000\nSniper Rifle\t$35000", "Purchase", "Close");
							}
						}
						else if(PlayerData[playerid][Character_License_Firearms] == 0)
						{
						    ShowPlayerDialog(playerid, DIALOG_SHOP_ROB_SRIFLE, DIALOG_STYLE_MSGBOX, "Ammunation Store - Failure", "You currently do not have a weapon license and are restricted from purchasing certain weapons.\n\nTo obtain your weapon license, you can either do this at City Hall or get in contact with a police officer!", "Close", "");
						}
		            }
		            case 5:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_License_Firearms] == 1)
		                {
			                if(PlayerData[playerid][Character_Money] >= 35000)
			                {
								GivePlayerWeapon(playerid, WEAPON_SNIPER, 20);

								PlayerData[playerid][Character_Money] -= 35000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$35000");
								GameTextForPlayer(playerid, text_value, 3000, 1);

				                format(string, sizeof(string), "> %s has just purchased a Sniper Rifle from the store", GetRPName(playerid));
								SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
								
								IsPlayerNearBusinessShopPoint(playerid);
								new shopid = PlayerAtBusinessBuyPointID[playerid];
								new bizamount = floatround(35000 * 0.03);
			
								new equery[2000];
						     	mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
								mysql_tquery(connection, equery);
							}
							else
							{
							    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							    ShowPlayerDialog(playerid, DIALOG_SHOP_7_WEAPONS, DIALOG_STYLE_TABLIST, "Ammunation Store - Weapon", "Knife\t$200\n9mm Pistol\t$1500\nShotgun\t$3500\nAK-47\t$10500\nRifle\t$15000\nSniper Rifle\t$35000", "Purchase", "Close");
							}
						}
						else if(PlayerData[playerid][Character_License_Firearms] == 0)
						{
						    ShowPlayerDialog(playerid, DIALOG_SHOP_ROB_SRIFLE, DIALOG_STYLE_MSGBOX, "Ammunation Store - Failure", "You currently do not have a weapon license and are restricted from purchasing certain weapons.\n\nTo obtain your weapon license, you can either do this at City Hall or get in contact with a police officer!", "Close", "");
						}
		            }
		        }
		    }
		}
		case DIALOG_SHOP_7_EXTRAS:
		{
		    if(!response) return 1;

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_Money] >= 650)
	                	{
							GivePlayerWeapon(playerid, WEAPON_TEARGAS, 2);

							PlayerData[playerid][Character_Money] -= 650;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$650");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased a Tear Gas Bundle from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(650 * 0.03);
			
							new equery[2000];
						    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_7_EXTRAS, DIALOG_STYLE_TABLIST, "Ammunation Store - Extras", "Tear Gas\t$650\nMolotov\t$1500\nBrass Knuckles\t$2500\nArmour\t$3000", "Purchase", "Close");
						}
		            }
		            case 1:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_Money] >= 1500)
	                	{
							GivePlayerWeapon(playerid, WEAPON_MOLTOV, 2);

							PlayerData[playerid][Character_Money] -= 1500;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$1500");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased a Molotov Bundle from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(1500 * 0.03);
			
							new equery[2000];
						    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_7_EXTRAS, DIALOG_STYLE_TABLIST, "Ammunation Store - Extras", "Tear Gas\t$650\nMolotov\t$1500\nBrass Knuckles\t$2500\nArmour\t$3000", "Purchase", "Close");
						}
		            }
		            case 2:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_Money] >= 2500)
	                	{
							GivePlayerWeapon(playerid, WEAPON_BRASSKNUCKLE, 1);

							PlayerData[playerid][Character_Money] -= 2500;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$2500");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased Brass Knuckles from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(2500 * 0.03);
			
							new equery[2000];
						    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_7_EXTRAS, DIALOG_STYLE_TABLIST, "Ammunation Store - Extras", "Tear Gas\t$650\nMolotov\t$1500\nBrass Knuckles\t$2500\nArmour\t$3000", "Purchase", "Close");
						}
		            }
		            case 3:
		            {
		                new string[256];

		                if(PlayerData[playerid][Character_Money] >= 3000)
	                	{
							SetPlayerArmour(playerid, 100.0);

							PlayerData[playerid][Character_Money] -= 3000;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$3000");
							GameTextForPlayer(playerid, text_value, 3000, 1);

			                format(string, sizeof(string), "> %s has just purchased Armour from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(3000 * 0.03);
			
							new equery[2000];
						    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);
						}
						else
						{
						    SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
						    ShowPlayerDialog(playerid, DIALOG_SHOP_7_EXTRAS, DIALOG_STYLE_TABLIST, "Ammunation Store - Extras", "Tear Gas\t$650\nMolotov\t$1500\nBrass Knuckles\t$2500\nArmour\t$3000", "Purchase", "Close");
						}
		            }
		        }
		    }
		}
		case DIALOG_SHOP_TYPE_EIGHT:
		{
			if(!response) return 1;
			
			if(response)
			{
				switch(listitem)
				{					
					case 0:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 10)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_EIGHT, DIALOG_STYLE_LIST, "Donut Shop", "Sprinkles ($10)\nStuffed ($15)\nMystery Filled ($25)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 1;
							PlayerData[playerid][Character_Money] -= 10;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$10");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(10 * 0.03);
			
							new equery[2000];
						    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased a Sprinkled Donut from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 1:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 15)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_EIGHT, DIALOG_STYLE_LIST, "Donut Shop", "Sprinkles ($10)\nStuffed ($15)\nMystery Filled ($25)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 1;
							PlayerData[playerid][Character_Money] -= 15;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$15");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(15 * 0.03);
			
							new equery[2000];
						    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased a Stuffed Donut from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
					case 2:
					{
						new string[256];
						
						if(PlayerData[playerid][Character_Money] < 25)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_EIGHT, DIALOG_STYLE_LIST, "Donut Shop", "Sprinkles ($10)\nStuffed ($15)\nMystery Filled ($25)", "Purchase", "Close");
						}
						else
						{
							PlayerData[playerid][Character_Has_Food] += 1;
							PlayerData[playerid][Character_Money] -= 25;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$25");
							GameTextForPlayer(playerid, text_value, 3000, 1);
							
							IsPlayerNearBusinessShopPoint(playerid);
							new shopid = PlayerAtBusinessBuyPointID[playerid];
							new bizamount = floatround(25 * 0.03);
			
							new equery[2000];
						    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value + %d WHERE `business_id` = '%i' LIMIT 1", bizamount, shopid);
							mysql_tquery(connection, equery);

			                format(string, sizeof(string), "> %s has just purchased a Mystery Filled Donut from the store", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}						
					}
				}
			}
		}
		case DIALOG_GPS_MAIN:
		{
		    if(!response) return 1;

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: return ShowPlayerDialog(playerid, DIALOG_GPS_TOP, DIALOG_STYLE_LIST, "GPS Device - Popular Locations", "Bank\nHospital\nImpound\nGas Station\nElectronic Store\nDriving School\nCity Hall", "Select", "Back");
		            case 1: return ShowPlayerDialog(playerid, DIALOG_GPS_FACTIONS, DIALOG_STYLE_LIST, "GPS Device - Faction Locations", "LSPD\nLSFD\nLSMC\nLS Bank\nTow Co\nTaxi Co\nTruck Co\nDudefix\nGrove Street Gang\nLa Familia Gang\nHell Angels", "Select", "Back");
		            case 2: return ShowPlayerDialog(playerid, DIALOG_GPS_JOBS, DIALOG_STYLE_LIST, "GPS Device - Job Locations", "Pizza Delivery\nRubbish Driver\nElectrician", "Select", "Back");
				}
		    }
		}
		case DIALOG_GPS_TOP:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_GPS_MAIN, DIALOG_STYLE_LIST, "GPS Device", "Popular Locations\nFaction Locations\nJob Locations", "Next", "Close");
		    
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
					{
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 981.7438, -1161.8739, 25.0859, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Bank Location]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 1: 
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1172.6438, -1323.1779, 15.4026, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Hospital]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 2: 
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1520.2769, -1452.6620, 14.2053, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Impound]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
												
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 3: 
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1938.3093, -1777.7871, 13.4416, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Gas Station]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 4: 
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1103.2216, -1439.9008, 15.7969, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Electronic Store]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
					case 5: 
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1376.2294,-1423.9144,13.5768, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Driving School]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
					case 6: 
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1381.6302,-1088.6614,27.6749, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [City Hall]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		        }
		    }
		}
		case DIALOG_GPS_FACTIONS:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_GPS_MAIN, DIALOG_STYLE_LIST, "GPS Device", "Popular Locations\nFaction Locations\nJob Locations", "Next", "Close");

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
					{
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1554.0565, -1675.5317, 16.1953, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [LSPD]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 1:
					{
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1781.3510, -1717.3450, 13.7177, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [LSFD]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 2:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2033.3623, -1402.9315, 17.2871, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [LSMC]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 3:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 981.8309, -1162.0126, 25.0859, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [LS Bank]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 4:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1521.0380, -1452.7711, 14.2062, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Towing Company]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 5:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2046.4102, -1908.6200, 13.5469, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Taxi Company]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 6:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2190.8887, -2253.3914, 13.5098, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Truck Company]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
					case 7:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2526.6453, -2134.5295, 13.5469, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Dudefix]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 8:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2462.1221, -1666.1908, 13.4745, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Grove Street Gang]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 9:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2634.6858, -1055.3274, 69.6235, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [La Familia Gang]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 10:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 1115.6753, -962.1698, 42.7583, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Hells Angels Gang]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		        }
		    }
		}
		case DIALOG_GPS_JOBS:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_GPS_MAIN, DIALOG_STYLE_LIST, "GPS Device", "Popular Locations\nFaction Locations\nJob Locations", "Next", "Close");

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
					{
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2102.2109, -1789.1084, 13.5547, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Pizza Delivery Job]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 1:
					{
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 2201.1582, -1974.1382, 13.5576, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Rubbish Collector Job]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		            case 2:
		            {
					    GPSOn[playerid] = true;
						SetPlayerCheckpoint(playerid, 992.1624, -1453.3606, 13.5469, 3.0);
						
						new dstring[256];
						format(dstring, sizeof(dstring), "- You have set your GPS [Electrician Job]!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						HasGPSBeenDisabled[playerid] = 1;
					}
		        }
		    }
		}
        case DIALOG_DEALERSHIP_1_MAIN:
		{
		    if(!response)
		    {
                SetCameraBehindPlayer(playerid);
                
                VEHICLEPROCESS = 0;
                HasPlayerConfirmedVehicleID[playerid] = 0;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
					{
					    VehicleModelPurchasing[playerid] = 474;
					    
					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tHermes\nVehicle Price:\t$25,000", "Confirm", "Go Back");
					}
					case 1:
					{
					    VehicleModelPurchasing[playerid] = 526;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tFortune\nVehicle Price:\t$35,000", "Confirm", "Go Back");
					}
					case 2:
					{
					    VehicleModelPurchasing[playerid] = 587;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tEuros\nVehicle Price:\t$45,000", "Confirm", "Go Back");
					}
					case 3:
					{
					    VehicleModelPurchasing[playerid] = 589;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tClub\nVehicle Price:\t$45,000", "Confirm", "Go Back");
					}
					case 4:
					{
					    VehicleModelPurchasing[playerid] = 545;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tHustler\nVehicle Price:\t$65,000", "Confirm", "Go Back");
					}
					case 5:
					{
					    VehicleModelPurchasing[playerid] = 421;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tWashington\nVehicle Price:\t$80,000", "Confirm", "Go Back");
					}
					case 6:
					{
					    VehicleModelPurchasing[playerid] = 579;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tHuntley\nVehicle Price:\t$90,000", "Confirm", "Go Back");
					}
		        }
		    }
		}
		case DIALOG_DEALERSHIP_1_SELECT:
		{
		    if(!response)
			{
			    VehicleModelPurchasing[playerid] = 0;
			    
				new title[256];
    			format(title, sizeof(title), "Vehicle Options");
		    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
			}
		    if(response)
		    {
		        if(PlayerData[playerid][Character_Total_Vehicles] == 2)
		        {
		            SetCameraBehindPlayer(playerid);

                    VehicleModelPurchasing[playerid] = 0;
                	VEHICLEPROCESS = 0;

                	SendPlayerErrorMessage(playerid, " You cannot own more than two vehicles, please go recycle or sell one if you need to purchase a new one!");
		        }
		        else
		        {
			        if(VehicleModelPurchasing[playerid] == 474)
			        {
			            if(PlayerData[playerid][Character_Money] >= 25000)
			            {
							if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 25000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$25000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 526)
			        {
			            if(PlayerData[playerid][Character_Money] >= 35000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 35000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$35000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 587)
			        {
			            if(PlayerData[playerid][Character_Money] >= 45000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 45000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$45000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 589)
			        {
			            if(PlayerData[playerid][Character_Money] >= 45000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 45000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$45000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 545)
			        {
			            if(PlayerData[playerid][Character_Money] >= 65000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 65000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$65000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 421)
			        {
			            if(PlayerData[playerid][Character_Money] >= 80000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 80000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$80000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 579)
			        {
			            if(PlayerData[playerid][Character_Money] >= 90000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 90000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$90000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
						}
			        }
				}
		    }
		}
		case DIALOG_DEALERSHIP_2_MAIN:
		{
		    if(!response)
		    {
                SetCameraBehindPlayer(playerid);

                HasPlayerConfirmedVehicleID[playerid] = 0;
                VEHICLEPROCESS = 0;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
					{
					    VehicleModelPurchasing[playerid] = 429;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tBanshee\nVehicle Price:\t$50,000", "Confirm", "Go Back");
					}
					case 1:
					{
					    VehicleModelPurchasing[playerid] = 480;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tComet\nVehicle Price:\t$52,000", "Confirm", "Go Back");
					}
					case 2:
					{
					    VehicleModelPurchasing[playerid] = 565;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tFlash\nVehicle Price:\t$52,000", "Confirm", "Go Back");
					}
					case 3:
					{
					    VehicleModelPurchasing[playerid] = 559;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tJester\nVehicle Price:\t$55,000", "Confirm", "Go Back");
					}
					case 4:
					{
					    VehicleModelPurchasing[playerid] = 506;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tSuper GT\nVehicle Price:\t$70,000", "Confirm", "Go Back");
					}
					case 5:
					{
					    VehicleModelPurchasing[playerid] = 451;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tTurismo\nVehicle Price:\t100 Coins", "Confirm", "Go Back");
					}
					case 6:
					{
					    VehicleModelPurchasing[playerid] = 411;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tInfernus\nVehicle Price:\t150 Coins", "Confirm", "Go Back");
					}
		        }
		    }
		}
		case DIALOG_DEALERSHIP_2_SELECT:
		{
		    if(!response)
			{
			    VehicleModelPurchasing[playerid] = 0;

				new title[256];
    			format(title, sizeof(title), "Vehicle Options");
		    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
			}
		    if(response)
		    {
		        if(PlayerData[playerid][Character_Total_Vehicles] == 2)
		        {
		            SetCameraBehindPlayer(playerid);

                    VehicleModelPurchasing[playerid] = 0;
                	VEHICLEPROCESS = 0;

                	SendPlayerErrorMessage(playerid, " You cannot own more than two vehicles, please go recycle or sell one if you need to purchase a new one!");
		        }
		        else
		        {
			        if(VehicleModelPurchasing[playerid] == 429)
			        {
			            if(PlayerData[playerid][Character_Money] >= 50000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 50000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$50000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 480)
			        {
			            if(PlayerData[playerid][Character_Money] >= 52000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 52000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$52000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 565)
			        {
			            if(PlayerData[playerid][Character_Money] >= 52000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 52000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$52000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 559)
			        {
			            if(PlayerData[playerid][Character_Money] >= 55000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 55000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$55000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 506)
			        {
			            if(PlayerData[playerid][Character_Money] >= 70000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 70000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$70000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 451)
			        {
			            if(PlayerData[playerid][Character_Coins] >= 100)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Coins] -= 100;
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Coins)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 411)
			        {
			            if(PlayerData[playerid][Character_Coins] >= 150)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Coins] -= 150;
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Vehicle Options - (Not Enough Coins)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
						}
			        }
				}
		    }
		}
		case DIALOG_DEALERSHIP_3_MAIN:
		{
		    if(!response)
		    {
                SetCameraBehindPlayer(playerid);

                VEHICLEPROCESS = 0;
                HasPlayerConfirmedVehicleID[playerid] = 0;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
					{
					    VehicleModelPurchasing[playerid] = 462;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tFaggio\nVehicle Price:\t$5,000", "Confirm", "Go Back");
					}
					case 1:
					{
					    VehicleModelPurchasing[playerid] = 468;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tSanchez\nVehicle Price:\t$15,000", "Confirm", "Go Back");
					}
					case 2:
					{
					    VehicleModelPurchasing[playerid] = 581;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tBF-400\nVehicle Price:\t$30,000", "Confirm", "Go Back");
					}
					case 3:
					{
					    VehicleModelPurchasing[playerid] = 461;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tPCJ-600\nVehicle Price:\t$50,000", "Confirm", "Go Back");
					}
					case 4:
					{
					    VehicleModelPurchasing[playerid] = 522;

					    new title[256];
			    	    format(title, sizeof(title), "Order Confirmation");
					    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_SELECT, DIALOG_STYLE_MSGBOX, title, "You are about to purchase the following vehicle, please confirm you are happy with it:\n\nVehicle Name:\tNRG-500\nVehicle Price:\t$150,000", "Confirm", "Go Back");
					}
		        }
		    }
		}
		case DIALOG_DEALERSHIP_3_SELECT:
		{
		    if(!response)
			{
       			VehicleModelPurchasing[playerid] = 0;

				new title[256];
    			format(title, sizeof(title), "Bike Options");
		    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_MAIN, DIALOG_STYLE_TABLIST, title, "Faggio \t$5,000\nSanchez \t$15,000\nBF-400 \t$30,000\nPCJ-600 \t$50,000\nNRG-500 \t$150,000", "Select", "Close");
			}
		    if(response)
		    {
		        if(PlayerData[playerid][Character_Total_Vehicles] == 2)
		        {
		            SetCameraBehindPlayer(playerid);

                    VehicleModelPurchasing[playerid] = 0;
                	VEHICLEPROCESS = 0;
                	
                	SendPlayerErrorMessage(playerid, " You cannot own more than two vehicles, please go recycle or sell one if you need to purchase a new one!");
		        }
		        else
		        {
			        if(VehicleModelPurchasing[playerid] == 462)
			        {
			            if(PlayerData[playerid][Character_Money] >= 5000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 5000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$5000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Bike Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_MAIN, DIALOG_STYLE_TABLIST, title, "Faggio \t$5,000\nSanchez \t$7,000\nBF-400 \t$12,000\nPCJ-600 \t$15,000\nNRG-500 \t$50,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 468)
			        {
			            if(PlayerData[playerid][Character_Money] >= 15000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 15000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$15000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Bike Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_MAIN, DIALOG_STYLE_TABLIST, title, "Faggio \t$5,000\nSanchez \t$7,000\nBF-400 \t$12,000\nPCJ-600 \t$15,000\nNRG-500 \t$50,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 581)
			        {
			            if(PlayerData[playerid][Character_Money] >= 30000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 30000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$90000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Bike Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_MAIN, DIALOG_STYLE_TABLIST, title, "Faggio \t$5,000\nSanchez \t$7,000\nBF-400 \t$12,000\nPCJ-600 \t$15,000\nNRG-500 \t$50,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 461)
			        {
			            if(PlayerData[playerid][Character_Money] >= 50000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 50000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$50000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Bike Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_MAIN, DIALOG_STYLE_TABLIST, title, "Faggio \t$5,000\nSanchez \t$7,000\nBF-400 \t$12,000\nPCJ-600 \t$15,000\nNRG-500 \t$50,000", "Select", "Close");
						}
			        }
			        else if(VehicleModelPurchasing[playerid] == 522)
			        {
			            if(PlayerData[playerid][Character_Money] >= 150000)
			            {
			                if(HasPlayerConfirmedVehicleID[playerid] == 0)
			    			{
								new query[128];
							    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
							    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
							
								PlayerData[playerid][Character_Money] -= 150000;
								
								new text_value[256];
								format(text_value, sizeof(text_value), "~r~~h~-$150000");
								GameTextForPlayer(playerid, text_value, 3000, 1);
							}
						}
						else
						{
						    VehicleModelPurchasing[playerid] = 0;

						    new title[256];
			    			format(title, sizeof(title), "Bike Options - (Not Enough Money)");
					    	ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_MAIN, DIALOG_STYLE_TABLIST, title, "Faggio \t$5,000\nSanchez \t$7,000\nBF-400 \t$12,000\nPCJ-600 \t$15,000\nNRG-500 \t$50,000", "Select", "Close");
						}
			        }
				}
		    }
		}
		case DIALOG_JOB_VIEW:
		{
		    if(!response) return 1;
			else
	        {
                switch(listitem)
			    {
			        case 0:
					{
						if(TruckJobMoneyStarted == 1)
						{
                            SendPlayerErrorMessage(playerid, " A player has already started this job, please try another one!");
						
						    ShowPlayerDialog(playerid, DIALOG_JOB_VIEW, DIALOG_STYLE_LIST, "Trucking Company - Jobs", "1. Money Transport\n2. Parcel Transport\n3. Goods Transport", "Next", "Close");
						}
						else
						{
						    if(TruckJobMoneyStarted == 0 && FactionData[4][Faction_Money] > 100000)
						    {
						        SendPlayerErrorMessage(playerid, " The bank has enough money already, please try another job!");
						        
						        ShowPlayerDialog(playerid, DIALOG_JOB_VIEW, DIALOG_STYLE_LIST, "Trucking Company - Jobs", "1. Money Transport\n2. Parcel Transport\n3. Goods Transport", "Next", "Close");
						    }
						    else if(TruckJobMoneyStarted == 0 && FactionData[4][Faction_Money] <= 100000)
						    {
								HasGPSBeenDisabled[playerid] = 1;
								
						        TruckJobMoneyStarted = 1;
						        TruckJobMoneyPlayer[playerid] = 1;
						        
						        new dstring[256];
								format(dstring, sizeof(dstring), "- You have just started the money job, LSPD has been advised. Grab a vehicle and head to the docks!");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
						        
						        SetPlayerCheckpoint(playerid, 2788.4670,-2494.4106,13.4753, 20.0);

								format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} All Units, Trucking Company has just started a money drop job", GetName(playerid));
								SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);

								print("Truck Money Job Accepted");
						    }
						}
					}
			        case 1:
					{
						RouteChosen[playerid] = 1;
						
						HasGPSBeenDisabled[playerid] = 1;
						
                        TruckJobPlayer[playerid] = 1;
                        TruckJobCount[playerid] = 0;
                        
                        new dstring[256];
						format(dstring, sizeof(dstring), "- You have just started the parcel delivery job. Grab a van and head to the locations!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						new randomNumber = GetValidHouseJobNumber();
						SetPlayerCheckpoint(playerid, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z], 5.0);
					}
					case 2:
					{
						RouteChosen[playerid] = 1;
						
						HasGPSBeenDisabled[playerid] = 1;
						
                        TruckJobPlayer[playerid] = 2;
                        TruckJobCount[playerid] = 0;
                        
                        new dstring[256];
						format(dstring, sizeof(dstring), "- You have just started the goods delivery job. Grab a van and head to the docks to pick up the goods!");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
						SetPlayerCheckpoint(playerid, 2412.0876,-2471.1479,14.2171, 10.0);
					}
			    }
	        }
		}
		case DIALOG_LICENSE_VIEW:
		{
		    if(!response) return 1;
			else
	        {
                switch(listitem)
			    {
			        case 0:
					{
					    if(PlayerData[playerid][Character_Money] < 240) return SendPlayerErrorMessage(playerid, " You do not have enough money to completed this course!");
						else
						{
						    PlayerData[playerid][Character_Money] -= 240;
						
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$240");
							GameTextForPlayer(playerid, text_value, 3000, 1);
						    
							DrivingBikePlayer[playerid] = 1;
	                        DrivingBikeCount[playerid] = 1;
						
							HasGPSBeenDisabled[playerid] = 1;

	                        new dstring[256];
							format(dstring, sizeof(dstring), "- You have just started to obtain your motorcycle license, make your way outside and grab a bike!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);

							SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1367.2766,-1439.1588,13.1764, 1355.1953,-1418.6083,12.9861, 5.0);
						}
					}
					case 1:
					{
						if(PlayerData[playerid][Character_Money] < 500) return SendPlayerErrorMessage(playerid, " You do not have enough money to complete this course!");
						else
						{
						    PlayerData[playerid][Character_Money] -= 500;
						
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$500");
							GameTextForPlayer(playerid, text_value, 3000, 1);
						    
							DrivingCarPlayer[playerid] = 1;
	                        DrivingCarCount[playerid] = 1;
	
							HasGPSBeenDisabled[playerid] = 1;

	                        new dstring[256];
							format(dstring, sizeof(dstring), "- You have just started to obtain your car license, make your way outside and grab a car!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);

							SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1367.2766,-1439.1588,13.1764, 1355.1953,-1418.6083,12.9861, 5.0);
						}
					}
					case 2:
					{
						if(PlayerData[playerid][Character_Money] < 1000) return SendPlayerErrorMessage(playerid, " You do not have enough money to complete this course!");
						else
						{
						    PlayerData[playerid][Character_Money] -= 1000;
						
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$1000");
							GameTextForPlayer(playerid, text_value, 3000, 1);
						    
							DrivingTruckPlayer[playerid] = 1;
	                        DrivingTruckCount[playerid] = 1;
	
							HasGPSBeenDisabled[playerid] = 1;

	                        new dstring[256];
							format(dstring, sizeof(dstring), "- You have just started to obtain your truck license, make your way outside and grab a truck!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);

							SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_NORMAL, 1367.2766,-1439.1588,13.1764, 1355.1953,-1418.6083,12.9861, 5.0);
						}
					}
			    }
	        }
		}
		case DIALOG_DRUG_SELECTION:
		{
		    if(!response) return 1;
			else
	        {
                switch(listitem)
			    {
			        case 0:
					{
					    if(PlayerData[playerid][Character_Has_Drugs] == 0) return SendPlayerErrorMessage(playerid, " You do not have enough drugs to complete this baking!");
						else
						{
							TogglePlayerControllable(playerid, false);
							
							GameTextForPlayer(playerid, "BAKING COCAINE...", 10000, 3);
							ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, false, false, false, false, 0, SYNC_ALL);
							
							HasPlayerBakedDrugs[playerid] = 1;
							
							DrugBaking_Timer[playerid] = SetTimerEx("DrugBakingCocaine", 10000, false, "i", playerid);
						}
					}
					case 1:
					{
						if(PlayerData[playerid][Character_Has_Drugs] < 2) return SendPlayerErrorMessage(playerid, " You do not have enough drugs to complete this baking!");
						else
						{
							TogglePlayerControllable(playerid, false);
							
							GameTextForPlayer(playerid, "BAKING COCAINE...", 15000, 3);
							ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, false, false, false, false, 0, SYNC_ALL);
							
							HasPlayerBakedDrugs[playerid] = 1;
							
							DrugBaking_Timer[playerid] = SetTimerEx("DrugBakingHeroin", 15000, false, "i", playerid);
						}
					}
			    }
	        }
		}
		case DIALOG_TRANSFENDER:
		{
			if(!response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				
				MoveDynamicObject(PaintSprayDoor, 1951.66956, -1984.35400, 10.12055, 2, 0.00000, 0.00000, 0);
				
				HasPlayerEnteredSprayUnit[playerid] = 0;
				
				SetCameraBehindPlayer(playerid);
				
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, true, lights, alarm, doors, bonnet, boot, objective);
			}
			else
	        {				
				switch(listitem)
			    {
			        case 0:
					{
					    ShowPlayerDialog(playerid, DIALOG_TRANSFEN_REPAIR, DIALOG_STYLE_MSGBOX, "Transfender - Repairs", "You are about to repair your vehicle, as you sure you want to do this?", "Confirm", "Go Back");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_SPRAY_PAINT, DIALOG_STYLE_LIST, "Transfender - Colors (Pick your poison)", "Black\nWhite\nLight Blue\nDark Blue\nRed\nOrange\nGreen\nGold\nYellow\nNeon Pink\nNeon Purple\nNeon Green", "Preview", "Go Back");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, DIALOG_TRANSFEN_LOCK, DIALOG_STYLE_MSGBOX, "Transfender - Locks", "You are about to purchase a lock, are you sure you want to?", "Confirm", "Go Back");
					}
					case 3:
					{
						if(PlayerData[playerid][Character_Coins] < 100)
						{
							SendPlayerErrorMessage(playerid, " You do not have enough coins to make this purchase!");
							
							ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_PLATE_CHANGE, DIALOG_STYLE_INPUT, "License Plate - Selection", "Enter in a six character number or word for your vehicles license plate", "Check", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_TRANSFEN_REPAIR:
		{
			if(!response)
			{			
				new vehicleid = GetPlayerVehicleID(playerid);
					
				ChangeVehicleColours(vehicleid, VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2]);
				
				ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
			}
			else
	        {
				new vehicleid = GetPlayerVehicleID(playerid);
				
				if(PlayerData[playerid][Character_Money] >= 1500)
				{
					SetVehicleHealth(vehicleid, 1000);
					
					RepairVehicle(vehicleid);
					
					new dstring[256];						
					format(dstring, sizeof(dstring), "- You have just spent $1500 on a vehicle repair!");
					SendClientMessage(playerid, COLOR_ACTION, dstring);
					
					PlayerData[playerid][Character_Money] -= 1500;
					
					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$1500");
					GameTextForPlayer(playerid, text_value, 3000, 1);
					
					ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
				}
				else
				{
					SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
					
					ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
				}
			}
		}
		case DIALOG_TRANSFEN_LOCK:
		{
			if(!response)
			{			
				new vehicleid = GetPlayerVehicleID(playerid);
					
				ChangeVehicleColours(vehicleid, VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2]);
				
				ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
			}
			else
	        {
				new vehicleid = GetPlayerVehicleID(playerid);
				
				if(PlayerData[playerid][Character_Money] >= 3500)
				{
					VehicleData[vehicleid][Vehicle_Lock] = 1;
					VehicleData[vehicleid][Vehicle_Lock_Status] = 0;
					
					new fquery[2000];
					mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_lock` = 1 WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_ID]);
					mysql_tquery(connection, fquery);
					
					new dstring[256];					
					format(dstring, sizeof(dstring), "- You have just spent $3500 on a vehicle lock! (You can now use /lock)");
					SendClientMessage(playerid, COLOR_ACTION, dstring);
					
					PlayerData[playerid][Character_Money] -= 3500;
					
					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$3500");
					GameTextForPlayer(playerid, text_value, 3000, 1);
					
					ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
				}
				else
				{
					SendPlayerErrorMessage(playerid, " You do not have enough money to make this purchase!");
					
					ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
				}
			}
		}
		case DIALOG_SPRAY_PAINT:
		{
			if(!response)
			{			
				new vehicleid = GetPlayerVehicleID(playerid);
					
				ChangeVehicleColours(vehicleid, VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2]);
				
				ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
			}
			else
	        {
				new vehicleid = GetPlayerVehicleID(playerid);
				
				switch(listitem)
			    {
			        case 0:
					{
					    ChangeVehicleColours(vehicleid, 0, 0);
						HasPlayerChangedVehicleColour[playerid] = 0;						
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 1:
					{
						ChangeVehicleColours(vehicleid, 1, 1);
						HasPlayerChangedVehicleColour[playerid] = 1;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 2:
					{
						ChangeVehicleColours(vehicleid, 2, 2);
						HasPlayerChangedVehicleColour[playerid] = 2;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 3:
					{
						ChangeVehicleColours(vehicleid, 53, 53);
						HasPlayerChangedVehicleColour[playerid] = 53;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");					
					}
					case 4:
					{
						ChangeVehicleColours(vehicleid, 3, 3);
						HasPlayerChangedVehicleColour[playerid] = 3;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 5:
					{
						ChangeVehicleColours(vehicleid, 158, 158);
						HasPlayerChangedVehicleColour[playerid] = 158;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 6:
					{
						ChangeVehicleColours(vehicleid, 128, 128);
						HasPlayerChangedVehicleColour[playerid] = 128;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 7:
					{
						ChangeVehicleColours(vehicleid, 194, 194);
						HasPlayerChangedVehicleColour[playerid] = 194;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 8:
					{
						ChangeVehicleColours(vehicleid, 6, 6);
						HasPlayerChangedVehicleColour[playerid] = 6;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 9:
					{
						ChangeVehicleColours(vehicleid, 146, 146);
						HasPlayerChangedVehicleColour[playerid] = 146;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 10:
					{
						ChangeVehicleColours(vehicleid, 211, 211);
						HasPlayerChangedVehicleColour[playerid] = 165;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
					case 11:
					{
						ChangeVehicleColours(vehicleid, 145, 145);
						HasPlayerChangedVehicleColour[playerid] = 145;
						
						ShowPlayerDialog(playerid, DIALOG_SPRAY_CONFIRM, DIALOG_STYLE_MSGBOX, "Vehicle Colour Confirmation", "You are about to adjust the vehicle colour, are you sure you want to change?", "Confirm", "Go Back");
					}
			    }
			}
		}
		case DIALOG_SPRAY_CONFIRM:
		{
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_SPRAY_PAINT, DIALOG_STYLE_LIST, "Vehicle Colour - Select your new vehilce colour", "Black\nWhite\nLight Blue\nDark Blue\nRed\nOrange\nGreen\nGold\nYellow\nNeon Pink\nNeon Purple\nNeon Green", "Preview", "Close");
			}
			else
	        {
				new vehicleid = GetPlayerVehicleID(playerid);
				
				VehicleData[vehicleid][Vehicle_Color_1] = HasPlayerChangedVehicleColour[playerid];
				VehicleData[vehicleid][Vehicle_Color_2] = HasPlayerChangedVehicleColour[playerid];
				
				new fquery[2000];
				mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_color_1` = '%i', `vehicle_color_2` = '%i' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2], VehicleData[vehicleid][Vehicle_ID]);
				mysql_tquery(connection, fquery);
				
				PlayerData[playerid][Character_Money] -= 500;
				
				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$500");
				GameTextForPlayer(playerid, text_value, 3000, 1);
				
				new dstring[256];					
				format(dstring, sizeof(dstring), "- You have just spent $500 on a repainting your vehicle!");
				SendClientMessage(playerid, COLOR_ACTION, dstring);
				
				HasPlayerChangedVehicleColour[playerid] = 0;
				
				ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
			}
		}
		case DIALOG_PLATE_CHANGE:
		{
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom License Plate\t100 coins", "Select", "Close");
			}
			else
	        {
				new foundVehicle = false;

			    for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(strcmp(inputtext, VehicleData[i][Vehicle_License_Plate]) == 0)
					{
						foundVehicle = true;	
						break;
				    }
				}
				if(foundVehicle)
    			{
					ShowPlayerDialog(playerid, DIALOG_PLATE_CHANGE, DIALOG_STYLE_INPUT, "License Plate - Selection", "(A vehicle already has this license plate number)\n\nEnter in a six character number or word for your vehicles license plate", "Check", "Go Back");
			    }
				else
				{
					if(inputtext[0] == 'O' && inputtext[1] == 'R' && inputtext[2] == 'P')
					{
					    ShowPlayerDialog(playerid, DIALOG_PLATE_CHANGE, DIALOG_STYLE_INPUT, "License Plate - Selection", "(You cannot set your license plate to be a server sided plate number)\n\nEnter in a six character number or word for your vehicles license plate", "Check", "Go Back");
					}
					else if (strlen(inputtext) > 6)
				    {
				        ShowPlayerDialog(playerid, DIALOG_PLATE_CHANGE, DIALOG_STYLE_INPUT, "License Plate - Selection", "(The license plate cannot exceed six characters)\n\nPlease enter a valid plate number.", "Retry", "Go Back");
				    }
					else
					{						
						new vehicleid = GetPlayerVehicleID(playerid);
						
     			        new fquery[2000];
						mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_license_plate` = '%s' WHERE `vehicle_id` = '%i' LIMIT 1", inputtext, VehicleData[vehicleid][Vehicle_ID]);
						mysql_tquery(connection, fquery);
						
						new licenseplate[10];
						format(licenseplate, sizeof(licenseplate), "%s", inputtext);
						SetVehicleNumberPlate(vehicleid, licenseplate);
						
						VehicleData[vehicleid][Vehicle_License_Plate] = licenseplate;
						
						PlayerData[playerid][Character_Coins] -= 100;
									
						new dstring[256];					
						format(dstring, sizeof(dstring), "- You have just spent 100 coins on a custom license plate for your vehicle!");
						SendClientMessage(playerid, COLOR_ACTION, dstring);
						
						SetVehicleSpawnInfo(vehicleid, VehicleData[vehicleid][Vehicle_Model], 1943.4330,-1984.2910,13.5385,89.6716, 0, 0);
						SetVehicleToRespawn(vehicleid);
						PutPlayerInVehicle(playerid, vehicleid, 0);
						
						SetVehicleSpawnInfo(vehicleid, VehicleData[vehicleid][Vehicle_Model], VehicleData[vehicleid][Vehicle_Spawn_X],VehicleData[vehicleid][Vehicle_Spawn_Y],VehicleData[vehicleid][Vehicle_Spawn_Z],VehicleData[vehicleid][Vehicle_Spawn_A], 0, 0);
						
						ShowPlayerDialog(playerid, DIALOG_TRANSFENDER, DIALOG_STYLE_TABLIST, "Transfender - Menu", "1. Repair Vehicle\t$1,500\n2. Change Color\t$2,500\n3. Vehicle Lock\t$3,500\n4. Custom license Plate\t100 coins", "Select", "Close");					
					}
				}
			}
		}
		case DIALOG_LOCKER_VIP:
		{	
			if(!response) return 1;
			else
			{
				switch(listitem)
				{
					case 0:
					{
						if(PlayerData[playerid][Character_Coins] >= 5)						
						{
							SetPlayerArmour(playerid, 100);
							
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased your full armour for the day, come back later for another refill!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
							VIPLockerUse[playerid] = 3600;
							PlayerData[playerid][Character_Coins] -= 5;
						}
						else
						{
							SendPlayerErrorMessage(playerid, " You do not have enough coins to make this purchase!");
							
							ShowPlayerDialog(playerid, DIALOG_LOCKER_VIP, DIALOG_STYLE_TABLIST, "Open Roleplay - V.I.P Menu", "Full Armour\t5 Coins\nFull Health\t10 Coins\nWeapon - Bat\t2 Coins\nWeapon - Deagle\t12 Coins\nWeapon - Shotgun\t25 Coins", "Select", "Close");	
						} 
					}
					case 1:
					{
						if(PlayerData[playerid][Character_Coins] >= 10)						
						{
							SetPlayerHealth(playerid, 100);
							
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased your full health for the day, come back later for another refill!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
							VIPLockerUse[playerid] = 3600;
							PlayerData[playerid][Character_Coins] -= 10;
						}
						else
						{
							SendPlayerErrorMessage(playerid, " You do not have enough coins to make this purchase!");
							
							ShowPlayerDialog(playerid, DIALOG_LOCKER_VIP, DIALOG_STYLE_TABLIST, "Open Roleplay - V.I.P Menu", "Full Armour\t5 Coins\nFull Health\t10 Coins\nWeapon - Bat\t2 Coins\nWeapon - Deagle\t12 Coins\nWeapon - Shotgun\t25 Coins", "Select", "Close");	
						} 
					}
					case 2:
					{
						if(PlayerData[playerid][Character_Coins] >= 2)						
						{
							GivePlayerWeapon(playerid, WEAPON_BAT, 1);
							
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased your bat for the day, come back later for another purchase!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
							VIPLockerUse[playerid] = 3600;
							PlayerData[playerid][Character_Coins] -= 2;
						}
						else
						{
							SendPlayerErrorMessage(playerid, " You do not have enough coins to make this purchase!");
							
							ShowPlayerDialog(playerid, DIALOG_LOCKER_VIP, DIALOG_STYLE_TABLIST, "Open Roleplay - V.I.P Menu", "Full Armour\t5 Coins\nFull Health\t10 Coins\nWeapon - Bat\t2 Coins\nWeapon - Deagle\t12 Coins\nWeapon - Shotgun\t25 Coins", "Select", "Close");	
						} 
					}
					case 3:
					{
						if(PlayerData[playerid][Character_Coins] >= 12)						
						{
							GivePlayerWeapon(playerid, WEAPON_DEAGLE, 12);
							
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased your deagle for the day, come back later for another purchase!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
							VIPLockerUse[playerid] = 3600;
							PlayerData[playerid][Character_Coins] -= 12;
						}
						else
						{
							SendPlayerErrorMessage(playerid, " You do not have enough coins to make this purchase!");
							
							ShowPlayerDialog(playerid, DIALOG_LOCKER_VIP, DIALOG_STYLE_TABLIST, "Open Roleplay - V.I.P Menu", "Full Armour\t5 Coins\nFull Health\t10 Coins\nWeapon - Bat\t2 Coins\nWeapon - Deagle\t12 Coins\nWeapon - Shotgun\t25 Coins", "Select", "Close");	
						} 
					}
					case 4:
					{
						if(PlayerData[playerid][Character_Coins] >= 25)						
						{
							GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 20);
							
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just purchased your shotgun for the day, come back later for another purchase!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
							VIPLockerUse[playerid] = 3600;
							PlayerData[playerid][Character_Coins] -= 25;
						}
						else
						{
							SendPlayerErrorMessage(playerid, " You do not have enough coins to make this purchase!");
							
							ShowPlayerDialog(playerid, DIALOG_LOCKER_VIP, DIALOG_STYLE_TABLIST, "Open Roleplay - V.I.P Menu", "Full Armour\t5 Coins\nFull Health\t10 Coins\nWeapon - Bat\t2 Coins\nWeapon - Deagle\t12 Coins\nWeapon - Shotgun\t25 Coins", "Select", "Close");	
						} 
					}
				}
			}
		}
		case DIALOG_RENTAL_CAR:
		{
			if(!response) return 1;
			else
			{
				if(IsPlayerRentingCar[playerid] == 0)
		        {
		            IsPlayerRentingCar[playerid] = 1;

		            PlayerData[playerid][Character_Money] -= 250;
		
					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$250");
					GameTextForPlayer(playerid, text_value, 3000, 1);						

					new dstring[256];
					format(dstring, sizeof(dstring), "[RENTAL YARD]:{FFFFFF} Please pick a vehicle of your liking and have an awesome day!");
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					format(dstring, sizeof(dstring), "- You have just paid $250.00 to rent a vehicle from the airport terminal");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);

					printf("%s has just rented a vehicle", GetName(playerid));
		        }				
			}		
		}
		case DIALOG_COINS_PERKS:
		{
			if(!response) return 1;
			else
			{	
				if(PlayerData[playerid][Character_VIP] == 0)
				{
					switch(listitem)
					{
						case 0:
						{
							if(PlayerData[playerid][Character_Jail] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not in player jail!");						
							if(PlayerData[playerid][Character_Coins] < 5)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}							
							else if(PlayerData[playerid][Character_Jail_Time] > 5)
							{
								PlayerData[playerid][Character_Jail_Time] -= 5;
								PlayerData[playerid][Character_Coins] -= 5;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 5 coins to reduce your player jail time by 5 minutes [New Time: %d]", PlayerData[playerid][Character_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}
							else if(PlayerData[playerid][Character_Jail_Time] <= 5)
							{
								PlayerData[playerid][Character_Jail_Time] = 1;
								PlayerData[playerid][Character_Coins] -= 5;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 5 coins to reduce your player jail time down to one minute", PlayerData[playerid][Character_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}
						}
						case 1:
						{
							if(PlayerData[playerid][Admin_Jail] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not in admin jail!");						
							if(PlayerData[playerid][Character_Coins] < 10)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}							
							else if(PlayerData[playerid][Admin_Jail_Time] > 5)
							{
								PlayerData[playerid][Admin_Jail_Time] -= 5;
								PlayerData[playerid][Character_Coins] -= 10;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 10 coins to reduce your admin jail time by 5 minutes [New Time: %d]", PlayerData[playerid][Admin_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}
							else if(PlayerData[playerid][Admin_Jail_Time] <= 5)
							{
								PlayerData[playerid][Admin_Jail_Time] = 1;
								PlayerData[playerid][Character_Coins] -= 10;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 10 coins to reduce your admin jail time down to one minute", PlayerData[playerid][Admin_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}
						}
						case 2:
						{					
							if(PlayerData[playerid][Character_Coins] < 20)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}							
							else
							{
								PlayerData[playerid][Character_Coins] -= 20;
								
								PerkWeatherMan[playerid] += 1;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 20 coins to adjust the weather [Use /setweather now | This will disappear when you logout]");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}
						}
						case 3:
						{
							if(IsPlayerWeaponBanned[playerid] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not weapon banned!");						
							if(PlayerData[playerid][Character_Coins] < 30)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}							
							else
							{
								PlayerData[playerid][Character_Coins] -= 30;
								
								IsPlayerWeaponBanned[playerid] = 0;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 30 coins to remove your weapon ban");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}
						}
						case 4:
						{
							if(PlayerData[playerid][Character_Faction_Ban] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not faction banned!");						
							if(PlayerData[playerid][Character_Coins] < 30)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}							
							else
							{
								PlayerData[playerid][Character_Coins] -= 30;
								
								PlayerData[playerid][Character_Faction_Ban] = 0;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 30 coins to remove your faction ban");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
							}
						}
						case 5:
						{
							SendPlayerErrorMessage(playerid, " This perk is not avaliable yet!");
							ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
						}
						case 6:
						{
							SendPlayerErrorMessage(playerid, " This perk is not avaliable yet!");
							ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");
						}
					}
				}
				else
				{
					switch(listitem)
					{
						case 0:
						{
							if(PlayerData[playerid][Character_Jail] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not in player jail!");						
							if(PlayerData[playerid][Character_Coins] < 3)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");			
							}							
							else if(PlayerData[playerid][Character_Jail_Time] > 5)
							{
								PlayerData[playerid][Character_Jail_Time] -= 5;
								PlayerData[playerid][Character_Coins] -= 3;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 3 coins to reduce your player jail time by 5 minutes [New Time: %d]", PlayerData[playerid][Character_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");			
							}
							else if(PlayerData[playerid][Character_Jail_Time] <= 5)
							{
								PlayerData[playerid][Character_Jail_Time] = 1;
								PlayerData[playerid][Character_Coins] -= 3;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 3 coins to reduce your player jail time down to one minute", PlayerData[playerid][Character_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");			
							}
						}
						case 1:
						{
							if(PlayerData[playerid][Admin_Jail] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not in admin jail!");						
							if(PlayerData[playerid][Character_Coins] < 6)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}							
							else if(PlayerData[playerid][Admin_Jail_Time] > 5)
							{
								PlayerData[playerid][Admin_Jail_Time] -= 5;
								PlayerData[playerid][Character_Coins] -= 6;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 6 coins to reduce your admin jail time by 5 minutes [New Time: %d]", PlayerData[playerid][Admin_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}
							else if(PlayerData[playerid][Admin_Jail_Time] <= 5)
							{
								PlayerData[playerid][Admin_Jail_Time] = 1;
								PlayerData[playerid][Character_Coins] -= 6;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 6 coins to reduce your admin jail time down to one minute", PlayerData[playerid][Admin_Jail_Time]);
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}
						}
						case 2:
						{					
							if(PlayerData[playerid][Character_Coins] < 12)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}							
							else
							{
								PlayerData[playerid][Character_Coins] -= 12;
								
								PerkWeatherMan[playerid] += 1;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 12 coins to adjust the weather [Use /setweather now | This will disappear when you logout]");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}
						}
						case 3:
						{
							if(IsPlayerWeaponBanned[playerid] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not weapon banned!");						
							if(PlayerData[playerid][Character_Coins] < 25)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}							
							else
							{
								PlayerData[playerid][Character_Coins] -= 25;
								
								IsPlayerWeaponBanned[playerid] = 0;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 25 coins to remove your weapon ban");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}
						}
						case 4:
						{
							if(PlayerData[playerid][Character_Faction_Ban] == 0) return	SendPlayerErrorMessage(playerid, " You cannot use this perk at the moment because you are not faction banned!");						
							if(PlayerData[playerid][Character_Coins] < 25)
							{
								SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough coins!");
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}							
							else
							{
								PlayerData[playerid][Character_Coins] -= 25;
								
								PlayerData[playerid][Character_Faction_Ban] = 0;
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just paid 25 coins to remove your faction ban");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PerkUse[playerid] = 1800;
								
								ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
							}
						}
						case 5:
						{
							SendPlayerErrorMessage(playerid, " This perk is not avaliable yet!");
							ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
						}
						case 6:
						{
							SendPlayerErrorMessage(playerid, " This perk is not avaliable yet!");
							ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
						}
						case 7:
						{
							SendPlayerErrorMessage(playerid, " This perk is not avaliable yet!");
							ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
						}
						case 8:
						{
							SendPlayerErrorMessage(playerid, " This perk is not avaliable yet!");
							ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");
						}
					}
				}
			}
		}
		case DIALOG_BUILD_WEAPON:
		{
			if(!response) return 1;
			else
			{
				if(HasPlayerBuiltWeapon[playerid] == 1) return SendPlayerErrorMessage(playerid, " You have recently built a weapon, please try again later!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							if(PlayerData[playerid][Character_Has_Parts] < 5) return SendPlayerErrorMessage(playerid, " You do not have enough parts to construct this weapon!");
							{
								new string[256];
								format(string, sizeof(string), "> %s removes an object after build a weapon (Knife)", GetRPName(playerid));
								SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just built a knife, you can build again in 10 minutes");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PlayerData[playerid][Character_Has_Parts] -= 10;
								
								new updatequery[2000];
								mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_parts` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Parts], GetName(playerid));
								mysql_tquery(connection, updatequery);
								
								GivePlayerWeapon(playerid, WEAPON_KNIFE, 1);
								
								HasPlayerBuiltWeapon[playerid] = 1;
								
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
								
								WeaponBuild_Timer[playerid] = SetTimerEx("WeaponBuildTimer", 600000, false, "i", playerid);
							}
						}
						case 1:
						{
							if(PlayerData[playerid][Character_Has_Parts] < 10) return SendPlayerErrorMessage(playerid, " You do not have enough parts to construct this weapon!");
							{
								new string[256];
								format(string, sizeof(string), "> %s removes an object after build a weapon (Sword)", GetRPName(playerid));
								SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just built a sword, you can build again in 10 minutes");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PlayerData[playerid][Character_Has_Parts] -= 10;
								
								new updatequery[2000];
								mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_parts` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Parts], GetName(playerid));
								mysql_tquery(connection, updatequery);
								
								GivePlayerWeapon(playerid, WEAPON_KATANA, 1);
								
								HasPlayerBuiltWeapon[playerid] = 1;
								
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
								
								WeaponBuild_Timer[playerid] = SetTimerEx("WeaponBuildTimer", 600000, false, "i", playerid);
							}
						}
						case 2:
						{
							if(PlayerData[playerid][Character_Has_Parts] < 20) return SendPlayerErrorMessage(playerid, " You do not have enough parts to construct this weapon!");
							{
								new string[256];
								format(string, sizeof(string), "> %s removes an object after build a weapon (Pistol)", GetRPName(playerid));
								SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just built a pistol, you can build again in 10 minutes");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PlayerData[playerid][Character_Has_Parts] -= 20;
								
								new updatequery[2000];
								mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_parts` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Parts], GetName(playerid));
								mysql_tquery(connection, updatequery);
								
								GivePlayerWeapon(playerid, WEAPON_COLT45, 30);
								
								HasPlayerBuiltWeapon[playerid] = 1;
								
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
								
								WeaponBuild_Timer[playerid] = SetTimerEx("WeaponBuildTimer", 600000, false, "i", playerid);
							}
						}
						case 3:
						{
							if(PlayerData[playerid][Character_Has_Parts] < 40) return SendPlayerErrorMessage(playerid, " You do not have enough parts to construct this weapon!");
							{
								new string[256];
								format(string, sizeof(string), "> %s removes an object after build a weapon (Shotgun)", GetRPName(playerid));
								SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just built a shotgun, you can build again in 10 minutes");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PlayerData[playerid][Character_Has_Parts] -= 40;
								
								new updatequery[2000];
								mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_parts` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Parts], GetName(playerid));
								mysql_tquery(connection, updatequery);
								
								GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 15);
								
								HasPlayerBuiltWeapon[playerid] = 1;
								
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
								
								WeaponBuild_Timer[playerid] = SetTimerEx("WeaponBuildTimer", 600000, false, "i", playerid);
							}
						}
						case 4:
						{
							if(PlayerData[playerid][Character_Has_Parts] < 80) return SendPlayerErrorMessage(playerid, " You do not have enough parts to construct this weapon!");
							{
								new string[256];
								format(string, sizeof(string), "> %s removes an object after build a weapon (AK47)", GetRPName(playerid));
								SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
								
								new dstring[256];
								format(dstring, sizeof(dstring), "- You have just built a ak47, you can build again in 10 minutes");
								SendClientMessage(playerid, COLOR_YELLOW, dstring);
								
								PlayerData[playerid][Character_Has_Parts] -= 80;
								
								new updatequery[2000];
								mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_parts` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Parts], GetName(playerid));
								mysql_tquery(connection, updatequery);
								
								GivePlayerWeapon(playerid, WEAPON_AK47, 30);
								
								HasPlayerBuiltWeapon[playerid] = 1;
								
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
								
								WeaponBuild_Timer[playerid] = SetTimerEx("WeaponBuildTimer", 600000, false, "i", playerid);
							}
						}
					}
				}
			}
		}
		case DIALOG_CITY_HELP:
		{
			if(!response) return 1;
			else
			{	
				switch(listitem)
				{
					case 0:
					{
						if(PlayerData[playerid][Character_License_Firearms] == 1) return SendPlayerErrorMessage(playerid, " You already have this license and cannot obtain it again!");						
						if(PlayerData[playerid][Character_Money] < 15000)
						{
							SendPlayerErrorMessage(playerid, " You cannot purchase this perk, because you don't have enough money!");
							ShowPlayerDialog(playerid, DIALOG_CITY_HELP, DIALOG_STYLE_TABLIST, "Open Roleplay - City Hall Helpdesk","1. Obtain Weapon License\t$15,000", "Select", "Close");			
						}							
						else if(PlayerData[playerid][Character_License_Firearms] == 0)
						{
							PlayerData[playerid][Character_License_Firearms] = 1;
							PlayerData[playerid][Character_Money] -= 15000;
							
							new text_value[256];
							format(text_value, sizeof(text_value), "~r~~h~-$15000");
							GameTextForPlayer(playerid, text_value, 3000, 1);
								
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just paid $15,000 for a weapon license");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
							new updatequery[2000];
							mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_firearms` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_License_Firearms], GetName(playerid));
							mysql_tquery(connection, updatequery);
								
							ShowPlayerDialog(playerid, DIALOG_CITY_HELP, DIALOG_STYLE_TABLIST, "Open Roleplay - City Hall Helpdesk","1. Obtain Weapon License\t$15,000", "Select", "Close");			
						}
					}
				}
			}
		}
		case DIALOG_LSMC_LOCKER:
		{
			if(!response) return 1;
			else
	        {				
				switch(listitem)
			    {
			        case 0:
					{
					    if(IsPlayerOnDuty[playerid] == 1)
						{
							SetPlayerColor(playerid, COLOR_WHITE);
					
			           		SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		
						    ResetPlayerWeapons(playerid);
		
						    IsPlayerOnDuty[playerid] = 0;
		
		                    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
						    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
		
							new string[256];
				      		format(string, sizeof(string), "> %s has just changed into their civilian clothing and gone off duty", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
						}
						else if(IsPlayerOnDuty[playerid] == 0)
						{
							SetPlayerColor(playerid, COLOR_PINK);
					
							GetPlayerWeaponData(playerid, WEAPON_SLOT_MELEE, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_SHOTGUN, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_ASSAULT_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_LONG_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
							
							ResetPlayerWeapons(playerid);
		
				        	IsPlayerOnDuty[playerid] = 1;
		
							new string[256];
				      		format(string, sizeof(string), "> %s has just changed into their work clothing and gone on duty", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
						}
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_1, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Outfits", "1. Female Outfits\n2. Male Outfits", "Select", "Go Back");
					}
				}
			}
		}
		case DIALOG_LSMC_OUTFIT_1:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else
	        {
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else
				{				
					switch(listitem)
				    {
				        case 0:
						{
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSMC_OUTFIT_2:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else
	        {	
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else
				{			
					switch(listitem)
				    {
				        case 0:
						{
							SetPlayerSkin(playerid, 211);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female rookie outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							SetPlayerSkin(playerid, 308);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female officer 1 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
						case 2:
						{
						    SetPlayerSkin(playerid, 216);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female high rank outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSMC_OUTFIT_3:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else
	        {	
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else
				{			
					switch(listitem)
				    {
				        case 0:
						{
							SetPlayerSkin(playerid, 71);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male rookie outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							SetPlayerSkin(playerid, 276);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 1 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 2:
						{
						    SetPlayerSkin(playerid, 275);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 2 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 3:
						{
						    SetPlayerSkin(playerid, 274);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 3 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 4:
						{
						    SetPlayerSkin(playerid, 70);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male doctor outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 5:
						{
						    SetPlayerSkin(playerid, 305);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male high rank outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSMC_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Medical Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSFD_LOCKER:
		{
			if(!response) return 1;
			else
	        {				
				switch(listitem)
			    {
			        case 0:
					{
					    if(IsPlayerOnDuty[playerid] == 1)
						{
							SetPlayerColor(playerid, COLOR_WHITE);
					
			           		SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		
						    ResetPlayerWeapons(playerid);
		
						    IsPlayerOnDuty[playerid] = 0;
		
		                    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
						    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
		
							new string[256];
				      		format(string, sizeof(string), "> %s has just changed into their civilian clothing and gone off duty", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
						}
						else if(IsPlayerOnDuty[playerid] == 0)
						{
							SetPlayerColor(playerid, COLOR_LIGHTRED);
					
							GetPlayerWeaponData(playerid, WEAPON_SLOT_MELEE, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_SHOTGUN, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_ASSAULT_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_LONG_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
							
							ResetPlayerWeapons(playerid);
		
				        	IsPlayerOnDuty[playerid] = 1;
		
							new string[256];
				      		format(string, sizeof(string), "> %s has just changed into their work clothing and gone on duty", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
						}
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_1, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Outfits", "1. Female Outfits\n2. Male Outfits", "Select", "Go Back");
					}
				}
			}
		}
		case DIALOG_LSFD_OUTFIT_1:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else
	        {
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else
				{				
					switch(listitem)
				    {
				        case 0:
						{
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSFD_OUTFIT_2:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else
	        {	
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else
				{			
					switch(listitem)
				    {
				        case 0:
						{
							SetPlayerSkin(playerid, 211);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female rookie outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							SetPlayerSkin(playerid, 308);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female officer 1 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
						case 2:
						{
						    SetPlayerSkin(playerid, 216);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female high rank outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. High Rank 1", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSFD_OUTFIT_3:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else
	        {	
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else
				{			
					switch(listitem)
				    {
				        case 0:
						{
							SetPlayerSkin(playerid, 71);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male rookie outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							SetPlayerSkin(playerid, 278);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 1 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 2:
						{
						    SetPlayerSkin(playerid, 279);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 2 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 3:
						{
						    SetPlayerSkin(playerid, 277);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 3 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 4:
						{
						    SetPlayerSkin(playerid, 70);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male doctor outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
						case 5:
						{
						    SetPlayerSkin(playerid, 311);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male high rank outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSFD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Fire Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. Officer 3\n5. Doctor\n6. High Rank 1", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSPD_LOCKER:
		{
			if(!response) return 1;
			else
	        {				
				switch(listitem)
			    {
			        case 0:
					{
					    if(IsPlayerOnDuty[playerid] == 1)
						{
							SetPlayerColor(playerid, COLOR_WHITE);
					
			           		SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		
						    ResetPlayerWeapons(playerid);
		
						    IsPlayerOnDuty[playerid] = 0;
		
		                    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
						    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
							GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
		
							new string[256];
				      		format(string, sizeof(string), "> %s has just changed into their civilian clothing and gone off duty", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
						}
						else if(IsPlayerOnDuty[playerid] == 0)
						{
							SetPlayerColor(playerid, COLOR_LIGHTBLUE);
					
							GetPlayerWeaponData(playerid, WEAPON_SLOT_MELEE, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_SHOTGUN, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_ASSAULT_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
							GetPlayerWeaponData(playerid, WEAPON_SLOT_LONG_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
							
							ResetPlayerWeapons(playerid);
		
				        	IsPlayerOnDuty[playerid] = 1;
		
							new string[256];
				      		format(string, sizeof(string), "> %s has just changed into their work clothing and gone on duty", GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
						}
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_1, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Outfits", "1. Female Outfits\n2. Male Outfits\n3. Special Outfits", "Select", "Go Back");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, DIALOG_LSPD_WEAPON_1, DIALOG_STYLE_LIST, "Los Santos Police Department - Weapon Sets", "1. Set 1\n2. Set B\n3. S.W.A.T", "Select", "Go Back");
					}
				}
			}
		}
		case DIALOG_LSPD_OUTFIT_1:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{ 						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
			}
			else
	        {
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else
				{				
					switch(listitem)
				    {
				        case 0:
						{
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1\n5. High Rank 2", "Select", "Go Back");
						}
						case 2:
						{
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_4, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Special Outfits", "1. Motorcycle\n2. S.W.A.T", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSPD_OUTFIT_2:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{ 						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
			}
			else
	        {	
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else
				{			
					switch(listitem)
				    {
				        case 0:
						{
							SetPlayerSkin(playerid, 211);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female rookie outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1", "Select", "Go Back");
						}
						case 1:
						{
							SetPlayerSkin(playerid, 306);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female officer 1 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1", "Select", "Go Back");
						}
						case 2:
						{
						    SetPlayerSkin(playerid, 307);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female officer 2 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1", "Select", "Go Back");
						}
						case 3:
						{
						    SetPlayerSkin(playerid, 309);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the female high rank outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_2, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Female Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSPD_OUTFIT_3:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{ 						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
			}
			else
	        {	
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else
				{			
					switch(listitem)
				    {
				        case 0:
						{
							SetPlayerSkin(playerid, 71);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male rookie outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1\n5. High Rank 2", "Select", "Go Back");
						}
						case 1:
						{
							SetPlayerSkin(playerid, 280);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 1 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1\n5. High Rank 2", "Select", "Go Back");
						}
						case 2:
						{
							SetPlayerSkin(playerid, 281);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male officer 2 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1\n5. High Rank 2", "Select", "Go Back");
						}
						case 3:
						{
							SetPlayerSkin(playerid, 282);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male high rank 1 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1\n5. High Rank 2", "Select", "Go Back");
						}
						case 4:
						{
							SetPlayerSkin(playerid, 283);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the male high rank 2 outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_3, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Male Outfits", "1. Rookie\n2. Officer 1\n3. Officer 2\n4. High Rank 1\n5. High Rank 2", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSPD_OUTFIT_4:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{ 						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
			}
			else
	        {	
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select an outfit because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else
				{			
					switch(listitem)
				    {
				        case 0:
						{
							SetPlayerSkin(playerid, 284);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the special motorcycle outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_4, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Special Outfits", "1. Motorcycle\n2. S.W.A.T", "Select", "Go Back");
						}
						case 1:
						{
							SetPlayerSkin(playerid, 285);
	
							SendClientMessage(playerid, COLOR_ACTION, "- You have just put on the special swat outfit");			
							
						    ShowPlayerDialog(playerid, DIALOG_LSPD_OUTFIT_4, DIALOG_STYLE_TABLIST, "Los Santos Police Department - Special Outfits", "1. Motorcycle\n2. S.W.A.T", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_LSPD_WEAPON_1:
		{
			if(!response)
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{ 						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{						
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
			}
			else
	        {
				if(IsPlayerOnDuty[playerid] == 0)
				{
					SendPlayerErrorMessage(playerid, " You cannot select a weapon set because you are not on duty!");
					
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else
				{				
					switch(listitem)
				    {
				        case 0:
						{
						    GivePlayerWeapon(playerid, WEAPON_NITESTICK, 1);
							GivePlayerWeapon(playerid, WEAPON_DEAGLE, 24);
							GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 10);
							
							SendClientMessage(playerid, COLOR_ACTION, "- You have selected weapon set 1");
							
							ShowPlayerDialog(playerid, DIALOG_LSPD_WEAPON_1, DIALOG_STYLE_LIST, "Los Santos Police Department - Weapon Sets", "1. Set 1\n2. Set B\n3. S.W.A.T", "Select", "Go Back");
						}
						case 1:
						{
							GivePlayerWeapon(playerid, WEAPON_NITESTICK, 1);
							GivePlayerWeapon(playerid, WEAPON_DEAGLE, 24);
							GivePlayerWeapon(playerid, WEAPON_MP5, 60);
							
							SendClientMessage(playerid, COLOR_ACTION, "- You have selected weapon set 2");
							
							ShowPlayerDialog(playerid, DIALOG_LSPD_WEAPON_1, DIALOG_STYLE_LIST, "Los Santos Police Department - Weapon Sets", "1. Set 1\n2. Set B\n3. S.W.A.T", "Select", "Go Back");
						}
						case 2:
						{
						    GivePlayerWeapon(playerid, WEAPON_NITESTICK, 1);
							GivePlayerWeapon(playerid, WEAPON_DEAGLE, 24);
							GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 10);
							GivePlayerWeapon(playerid, WEAPON_M4, 60);
							GivePlayerWeapon(playerid, WEAPON_SNIPER, 5);
							
							SendClientMessage(playerid, COLOR_ACTION, "- You have selected SWAT weapon set");
							
							ShowPlayerDialog(playerid, DIALOG_LSPD_WEAPON_1, DIALOG_STYLE_LIST, "Los Santos Police Department - Weapon Sets", "1. Set 1\n2. Set B\n3. S.W.A.T", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_HOUSE_SAFE:
		{
			if(!response) return 1;
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{					
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT1, DIALOG_STYLE_LIST, "Cocaine - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT2, DIALOG_STYLE_LIST, "Heroin - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 2:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT3, DIALOG_STYLE_LIST, "Weed - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 3:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT4, DIALOG_STYLE_LIST, "Drugs - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 4:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT5, DIALOG_STYLE_LIST, "Metal - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 5:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT6, DIALOG_STYLE_LIST, "Parts - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 6:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT7, DIALOG_STYLE_LIST, "Gunpowder - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 7:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT8, DIALOG_STYLE_LIST, "Device - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 8:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT9, DIALOG_STYLE_LIST, "Lockpick - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
						case 9:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT10, DIALOG_STYLE_LIST, "Rope - Safe Contents", "Add\nRemove", "Select", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT1:
		{
			if(!response)
			{				
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT1_A, DIALOG_STYLE_INPUT, "Cocaine - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT1_R, DIALOG_STYLE_INPUT, "Cocaine - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT1_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Drug_Cocaine])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT1_A, DIALOG_STYLE_INPUT, "Cocaine - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT1_A, DIALOG_STYLE_INPUT, "Cocaine - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Drug_Cocaine] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Cocaine] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_cocaine` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Cocaine], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of cocaine to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
						
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT1_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Cocaine])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT1_R, DIALOG_STYLE_INPUT, "Cocaine - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT1_R, DIALOG_STYLE_INPUT, "Cocaine - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Drug_Cocaine] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Cocaine] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_cocaine` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Cocaine], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of cocaine from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT2:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT2_A, DIALOG_STYLE_INPUT, "Heroin - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT2_R, DIALOG_STYLE_INPUT, "Heroin - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT2_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Drug_Heroin])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT2_A, DIALOG_STYLE_INPUT, "Heroin - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT2_A, DIALOG_STYLE_INPUT, "Heroin - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Drug_Heroin] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Heroin] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_heroin` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Heroin], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of heroin to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT2_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Heroin])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT2_R, DIALOG_STYLE_INPUT, "Heroin - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT2_R, DIALOG_STYLE_INPUT, "Heroin - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Drug_Heroin] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Heroin] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_heroin` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Heroin], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of heroin from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT3:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT3_A, DIALOG_STYLE_INPUT, "Weed - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT3_R, DIALOG_STYLE_INPUT, "Weed - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT3_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Drug_Weed])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT3_A, DIALOG_STYLE_INPUT, "Weed - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT3_A, DIALOG_STYLE_INPUT, "Weed - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Drug_Weed] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Weed] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_weed` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Weed], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of weed to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT3_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Weed])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT3_R, DIALOG_STYLE_INPUT, "Weed - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT3_R, DIALOG_STYLE_INPUT, "Weed - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Drug_Weed] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Weed] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_weed` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Weed], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of weed from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT4:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT4_A, DIALOG_STYLE_INPUT, "Drugs - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT4_R, DIALOG_STYLE_INPUT, "Drugs - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT4_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Has_Drugs])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT4_A, DIALOG_STYLE_INPUT, "Drugs - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT4_A, DIALOG_STYLE_INPUT, "Drugs - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Has_Drugs] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Drugs] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_drugs` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Drugs], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of drugs to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT4_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Drugs])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT4_R, DIALOG_STYLE_INPUT, "Drugs - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT4_R, DIALOG_STYLE_INPUT, "Drugs - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Has_Drugs] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Drugs] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_drugs` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Drugs], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of drugs from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT5:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT5_A, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT5_R, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT5_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Has_Metal])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT5_A, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT5_A, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Has_Metal] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Metal] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_metal` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Metal], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of metal to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT5_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Metal])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT5_R, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT5_R, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Has_Metal] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Metal] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_metal` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Metal], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of metal from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT6:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT6_A, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT6_R, DIALOG_STYLE_INPUT, "Metal - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT6_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Has_Parts])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT6_A, DIALOG_STYLE_INPUT, "Parts - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT6_A, DIALOG_STYLE_INPUT, "Parts - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Has_Parts] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Parts] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_parts` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Parts], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of parts to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT6_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Parts])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT6_R, DIALOG_STYLE_INPUT, "Parts - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT6_R, DIALOG_STYLE_INPUT, "Parts - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Has_Parts] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Parts] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_parts` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Parts], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of parts from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT7:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT7_A, DIALOG_STYLE_INPUT, "Gunpowder - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT7_R, DIALOG_STYLE_INPUT, "Gunpowder - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT7_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Has_Gunpowder])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT7_A, DIALOG_STYLE_INPUT, "Gunpowder - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT7_A, DIALOG_STYLE_INPUT, "Gunpowder - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Has_Gunpowder] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Gunpowder] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_gunpowder` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Gunpowder], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of gunpowder to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT7_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Gunpowder])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT7_R, DIALOG_STYLE_INPUT, "Gunpowder - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT7_R, DIALOG_STYLE_INPUT, "Gunpowder - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Has_Gunpowder] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Gunpowder] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_gunpowder` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Gunpowder], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of gunpowder from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT8:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT8_A, DIALOG_STYLE_INPUT, "Device - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT8_R, DIALOG_STYLE_INPUT, "Device - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT8_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Has_Device])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT8_A, DIALOG_STYLE_INPUT, "Device - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT8_A, DIALOG_STYLE_INPUT, "Device - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Has_Device] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Device] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_device` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Device], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of device to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT8_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Device])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT8_R, DIALOG_STYLE_INPUT, "Device - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT8_R, DIALOG_STYLE_INPUT, "Device - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Has_Device] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Device] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_device` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Device], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of device from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT9:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT9_A, DIALOG_STYLE_INPUT, "Lockpick - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT9_R, DIALOG_STYLE_INPUT, "Lockpick - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT9_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Has_Lockpick])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT9_A, DIALOG_STYLE_INPUT, "Lockpick - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT9_A, DIALOG_STYLE_INPUT, "Lockpick - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Has_Lockpick] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Lockpick] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_lockpick` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Lockpick], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of lockpick to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT9_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Lockpick])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT9_R, DIALOG_STYLE_INPUT, "Lockpick - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT9_R, DIALOG_STYLE_INPUT, "Lockpick - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Has_Lockpick] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Lockpick] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_lockpick` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Lockpick], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of lockpick from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT10:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(IsPlayerLookingInSafe[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not currently looking in a property with a safe!");
				else
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT10_A, DIALOG_STYLE_INPUT, "Rope - Safe Contents", "Please enter in the amount you want to Add:", "Add", "Go Back");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT10_R, DIALOG_STYLE_INPUT, "Rope - Safe Contents", "Please enter in the amount you want to Remove:", "Remove", "Go Back");
						}
					}
				}
			}
		}
		case DIALOG_SAFE_SLOT10_A:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				if(strval(inputtext) > PlayerData[playerid][Character_Has_Rope])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT10_A, DIALOG_STYLE_INPUT, "Rope - Safe Contents", "(ERROR - You cannot add more that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT10_A, DIALOG_STYLE_INPUT, "Rope - Safe Contents", "(ERROR - You cannot add less that what you have on you)\n\nPlease enter in the amount you want to Add:", "Add", "Go Back");
		        }
		        else
		        {
					new hdoorid;
					hdoorid = IsPlayerLookingInSafe[playerid];
				
		            PlayerData[playerid][Character_Has_Rope] -= strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Rope] += strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_rope` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Rope], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just added %i units of rope to your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
		case DIALOG_SAFE_SLOT10_R:
		{
			if(!response)
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
				
				new safetitlestring[100], safebodytext[2000];
				safetitlestring = "";
				safebodytext = "";
					
				format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
				format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
				ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
			}
			else
			{
				new hdoorid;
				hdoorid = IsPlayerLookingInSafe[playerid];
					
				if(strval(inputtext) > HouseData[hdoorid][House_Inventory_Rope])
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT10_R, DIALOG_STYLE_INPUT, "Rope - Safe Contents", "(ERROR - You cannot remove more than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else if(strval(inputtext) < 0)
		        {
		            ShowPlayerDialog(playerid, DIALOG_SAFE_SLOT10_R, DIALOG_STYLE_INPUT, "Rope - Safe Contents", "(ERROR - You cannot remove less than what your safe has)\n\nPlease enter in the amount you want to Remove:", "Remove", "Go Back");
		        }
		        else
		        {				
		            PlayerData[playerid][Character_Has_Rope] += strval(inputtext);
		            HouseData[hdoorid][House_Inventory_Rope] -= strval(inputtext);
		            
		            new bankquery[2000];
			        mysql_format(connection, bankquery, sizeof(bankquery), "UPDATE `house_information` SET `house_inventory_rope` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[hdoorid][House_Inventory_Rope], hdoorid);
		    		mysql_tquery(connection, bankquery);
		            
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SAFE]:{FFFFFF} You have just removed %i units of rope from your house safe!", strval(inputtext));
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
		        }

			}
		}
	}
    return 1;
}
 
public OnPlayerClickPlayer(playerid, clickedplayerid, CLICK_SOURCE:source)
{
    return 1;
}

/* -------------- START OF CUSTOM PUBLICS / FORWARDS ---------------------- */

forward OnAccountCreation(playerid);
public OnAccountCreation(playerid)
{
    PlayerData[playerid][Account_ID] = cache_insert_id();
    IsPlayerLogged[playerid] = 1;
    return 1;
}

forward OnAccountCheck(playerid);
public OnAccountCheck(playerid)
{
    if(cache_num_rows() > 0)
    {
        // ----- Account Stats ------ //
		cache_get_value_name_int(0, "account_id", PlayerData[playerid][Account_ID]);
		cache_get_value_name_int(0, "account_ip", PlayerData[playerid][Account_IP]);
		
		cache_get_value_name(0, "account_email", PlayerData[playerid][Account_Email], 129);
		cache_get_value_name(0, "character_password", PlayerData[playerid][Character_Password], 129);

		// ----- Character Stats ------ //
		cache_get_value_name_float(0, "character_pos_x", PlayerData[playerid][Character_Pos_X]);
		cache_get_value_name_float(0, "character_pos_y", PlayerData[playerid][Character_Pos_Y]);
		cache_get_value_name_float(0, "character_pos_z", PlayerData[playerid][Character_Pos_Z]);
		cache_get_value_name_float(0, "character_pos_angle", PlayerData[playerid][Character_Pos_Angle]);
               
        if(PlayerData[playerid][Character_Pos_X] == 0 || PlayerData[playerid][Character_Pos_Y] == 0 || PlayerData[playerid][Character_Pos_Z] == 0)
        {
			PlayerData[playerid][Character_Pos_X] = 1529.6;
			PlayerData[playerid][Character_Pos_Y] = -1691.2;
			PlayerData[playerid][Character_Pos_Z] = 13.3;
        }

		cache_get_value_name_float(0, "character_health", PlayerData[playerid][Character_Health]);
		cache_get_value_name_float(0, "character_armor", PlayerData[playerid][Character_Armor]);
        cache_get_value_name_int(0, "character_registered", PlayerData[playerid][Character_Registered]);
		cache_get_value_name_int(0, "character_age", PlayerData[playerid][Character_Age]);
	    cache_get_value_name(0, "character_sex", PlayerData[playerid][Character_Sex], 129);
		cache_get_value_name(0, "character_birthplace", PlayerData[playerid][Character_Birthplace], 129);
	
	    cache_get_value_name_int(0, "character_skin_1", PlayerData[playerid][Character_Skin_1]);
		cache_get_value_name_int(0, "character_skin_2", PlayerData[playerid][Character_Skin_2]);
		cache_get_value_name_int(0, "character_skin_3", PlayerData[playerid][Character_Skin_3]);
		cache_get_value_name_int(0, "character_skin_logout", PlayerData[playerid][Character_Skin_Logout]);
		
		cache_get_value_name(0, "character_last_login", PlayerData[playerid][Character_Last_Login], 11);
		cache_get_value_name_int(0, "character_hour", PlayerData[playerid][Character_Hour]);
		cache_get_value_name_int(0, "character_minutes", PlayerData[playerid][Character_Minutes]);
		
		cache_get_value_name_int(0, "character_ban", PlayerData[playerid][Character_Ban]);
	    
		cache_get_value_name_int(0, "character_job", PlayerData[playerid][Character_Job]);
	    cache_get_value_name_int(0, "character_faction", PlayerData[playerid][Character_Faction]);
		cache_get_value_name_int(0, "character_faction_rank", PlayerData[playerid][Character_Faction_Rank]);
		cache_get_value_name_int(0, "character_faction_join_request", PlayerData[playerid][Character_Faction_Join_Request]);
		cache_get_value_name_int(0, "character_faction_ban", PlayerData[playerid][Character_Faction_Ban]);
		
		cache_get_value_name_int(0, "character_money", PlayerData[playerid][Character_Money]);
		cache_get_value_name_int(0, "character_coins", PlayerData[playerid][Character_Coins]);
		cache_get_value_name_int(0, "character_bank_account", PlayerData[playerid][Character_Bank_Account]);
		cache_get_value_name_int(0, "character_bank_money", PlayerData[playerid][Character_Bank_Money]);
		cache_get_value_name_int(0, "character_bank_loan", PlayerData[playerid][Character_Bank_Loan]);
       	cache_get_value_name(0, "character_bank_pin", PlayerData[playerid][Character_Bank_Pin], 129);
       	cache_get_value_name_int(0, "character_vip", PlayerData[playerid][Character_VIP]);
		cache_get_value_name(0, "character_vip_exp", PlayerData[playerid][Character_VIP_Exp], 11);

		cache_get_value_name_int(0, "character_interior_id", PlayerData[playerid][Character_Interior_ID]);
		cache_get_value_name_int(0, "character_virtual_world", PlayerData[playerid][Character_Virtual_World]);
		cache_get_value_name_int(0, "character_house_id_1", PlayerData[playerid][Character_House_ID_1]);
		cache_get_value_name_int(0, "character_house_id_2", PlayerData[playerid][Character_House_ID_2]);
		cache_get_value_name_int(0, "character_total_houses", PlayerData[playerid][Character_Total_Houses]);
		cache_get_value_name_int(0, "character_owns_faction", PlayerData[playerid][Character_Owns_Faction]);
		cache_get_value_name_int(0, "character_business_id_1", PlayerData[playerid][Character_Business_ID_1]);
		cache_get_value_name_int(0, "character_business_id_2", PlayerData[playerid][Character_Business_ID_2]);
		cache_get_value_name_int(0, "character_total_businesses", PlayerData[playerid][Character_Total_Businesses]);
		
		cache_get_value_name_int(0, "character_ticket_amount", PlayerData[playerid][Character_Ticket_Amount]);
		cache_get_value_name_int(0, "character_total_ticket_amount", PlayerData[playerid][Character_Total_Ticket_Amount]);
		cache_get_value_name_int(0, "character_jail", PlayerData[playerid][Character_Jail]);
		cache_get_value_name_int(0, "character_jail_time", PlayerData[playerid][Character_Jail_Time]);
       	cache_get_value_name(0, "character_jail_reason", PlayerData[playerid][Character_Jail_Reason], 50);
		cache_get_value_name(0, "character_last_crime", PlayerData[playerid][Character_Last_Crime], 50);
        
		// ----- Level Stats ------ //
		cache_get_value_name_int(0, "character_level", PlayerData[playerid][Character_Level]);
		cache_get_value_name_int(0, "character_level_exp", PlayerData[playerid][Character_Level_Exp]);
		cache_get_value_name_int(0, "helper_level", PlayerData[playerid][Helper_Level]);
		cache_get_value_name_int(0, "moderator_level", PlayerData[playerid][Moderator_Level]);		
		cache_get_value_name_int(0, "admin_level", PlayerData[playerid][Admin_Level]);
		cache_get_value_name_int(0, "admin_level_exp", PlayerData[playerid][Admin_Level_Exp]);
	    
	    // ----- ADMIN ------ //
	    cache_get_value_name_int(0, "admin_jail", PlayerData[playerid][Admin_Jail]);
		cache_get_value_name_int(0, "admin_jail_time", PlayerData[playerid][Admin_Jail_Time]);
	    cache_get_value_name(0, "admin_jail_reason", PlayerData[playerid][Admin_Jail_Reason], 50);
	    
	    // ----- INVENTORY ------ //
	    cache_get_value_name_int(0, "weapon_slot_1", PlayerData[playerid][Weapon_Slot_1]);
		cache_get_value_name_int(0, "weapon_slot_2", PlayerData[playerid][Weapon_Slot_2]);
		cache_get_value_name_int(0, "weapon_slot_3", PlayerData[playerid][Weapon_Slot_3]);
		cache_get_value_name_int(0, "weapon_slot_4", PlayerData[playerid][Weapon_Slot_4]);
		cache_get_value_name_int(0, "weapon_slot_5", PlayerData[playerid][Weapon_Slot_5]);
		cache_get_value_name_int(0, "weapon_slot_6", PlayerData[playerid][Weapon_Slot_6]);
		
		cache_get_value_name_int(0, "ammo_slot_1", PlayerData[playerid][Ammo_Slot_1]);
		cache_get_value_name_int(0, "ammo_slot_2", PlayerData[playerid][Ammo_Slot_2]);
		cache_get_value_name_int(0, "ammo_slot_3", PlayerData[playerid][Ammo_Slot_3]);
		cache_get_value_name_int(0, "ammo_slot_4", PlayerData[playerid][Ammo_Slot_4]);
		cache_get_value_name_int(0, "ammo_slot_5", PlayerData[playerid][Ammo_Slot_5]);
		cache_get_value_name_int(0, "ammo_slot_6", PlayerData[playerid][Ammo_Slot_6]);
		
		cache_get_value_name_int(0, "character_radio", PlayerData[playerid][Character_Radio]);
		cache_get_value_name_int(0, "character_license_car", PlayerData[playerid][Character_License_Car]);
		cache_get_value_name_int(0, "character_license_truck", PlayerData[playerid][Character_License_Truck]);
		cache_get_value_name_int(0, "character_license_motorcycle", PlayerData[playerid][Character_License_Motorcycle]);
		cache_get_value_name_int(0, "character_license_boat", PlayerData[playerid][Character_License_Boat]);
		cache_get_value_name_int(0, "character_license_firearms", PlayerData[playerid][Character_License_Firearms]);
		cache_get_value_name_int(0, "character_license_flying", PlayerData[playerid][Character_License_Flying]);
		
		cache_get_value_name_int(0, "character_drug_cocaine", PlayerData[playerid][Character_Drug_Cocaine]);
		cache_get_value_name_int(0, "character_drug_heroin", PlayerData[playerid][Character_Drug_Heroin]);	
		cache_get_value_name_int(0, "character_drug_weed", PlayerData[playerid][Character_Drug_Weed]);
		cache_get_value_name_int(0, "character_has_metal", PlayerData[playerid][Character_Has_Metal]);
		cache_get_value_name_int(0, "character_has_parts", PlayerData[playerid][Character_Has_Parts]);	
		cache_get_value_name_int(0, "character_has_gunpowder", PlayerData[playerid][Character_Has_Gunpowder]);	
		
		cache_get_value_name_int(0, "character_has_rope", PlayerData[playerid][Character_Has_Rope]);
		cache_get_value_name_int(0, "character_has_fuelcan", PlayerData[playerid][Character_Has_Fuelcan]);
		cache_get_value_name_int(0, "character_has_lockpick", PlayerData[playerid][Character_Has_Lockpick]);
		cache_get_value_name_int(0, "character_has_device", PlayerData[playerid][Character_Has_Device]);
		cache_get_value_name_int(0, "character_has_drugs", PlayerData[playerid][Character_Has_Drugs]);
		cache_get_value_name_int(0, "character_has_food", PlayerData[playerid][Character_Has_Food]);
		cache_get_value_name_int(0, "character_has_mask", PlayerData[playerid][Character_Has_Mask]);
		cache_get_value_name_int(0, "character_has_blindfold", PlayerData[playerid][Character_Has_Blindfold]);
		cache_get_value_name_int(0, "character_has_drinks", PlayerData[playerid][Character_Has_Drinks]);
		cache_get_value_name_int(0, "character_has_alcohol", PlayerData[playerid][Character_Has_Alcohol]);
		cache_get_value_name_int(0, "character_has_phone", PlayerData[playerid][Character_Has_Phone]);
		cache_get_value_name_int(0, "character_phonenumber", PlayerData[playerid][Character_Phonenumber]);
		cache_get_value_name_int(0, "character_has_simcard", PlayerData[playerid][Character_Has_SimCard]);
		
		cache_get_value_name_int(0, "character_hotel_id", PlayerData[playerid][Character_Hotel_ID]);

	    cache_get_value_name_float(0, "hotel_character_pos_x", PlayerData[playerid][Hotel_Character_Pos_X]);
		cache_get_value_name_float(0, "hotel_character_pos_y", PlayerData[playerid][Hotel_Character_Pos_Y]);
		cache_get_value_name_float(0, "hotel_character_pos_z", PlayerData[playerid][Hotel_Character_Pos_Z]);
		cache_get_value_name_float(0, "hotel_character_pos_angle", PlayerData[playerid][Hotel_Character_Pos_Angle]);
        cache_get_value_name_int(0, "hotel_character_interior_id", PlayerData[playerid][Hotel_Character_Interior_ID]);
		cache_get_value_name_int(0, "hotel_character_virtual_world", PlayerData[playerid][Hotel_Character_Virtual_World]);
		
		cache_get_value_name_int(0, "character_total_vehicles", PlayerData[playerid][Character_Total_Vehicles]);
		cache_get_value_name_int(0, "character_house_lock", PlayerData[playerid][Character_House_Lock]);
		cache_get_value_name_int(0, "character_house_alarm", PlayerData[playerid][Character_House_Alarm]);
		cache_get_value_name_int(0, "character_house_safe", PlayerData[playerid][Character_House_Safe]);

        if(PlayerData[playerid][Character_Ban] == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_BAN_MSG, DIALOG_STYLE_MSGBOX, "Open Roleplay - Ban Notice", "You have recently been baneed either while in-game or offline.\n\nIf you feel that this has been done to the wrong person or seems unfair\nplease contact the staff on Discord or click on Unban and a staff member will be with you shortly.", "Unban", "Quit");
		}
		else
		{
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Open Roleplay - Login", "Welcome back, %s!\n\nThis account has been registered before.\n\nPlease enter in the accounts password below:", "Login", "Quit", GetName(playerid));
		}
    }
    else
    {
         ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Open Roleplay - Registration", "Welcome to Open Roleplay\n\nThis account has not been registered before on this server.\n\nPlease enter in a password that you will remember.", "Register", "Quit");
    }
    return 1;
}

forward Save_Character_Info_Query_1(playerid);
public Save_Character_Info_Query_1(playerid)
{
	new Float:a, Float:h, playerquery[2000], skinid;
	new daterange[11];

    GetPlayerPos(playerid, PlayerData[playerid][Character_Pos_X], PlayerData[playerid][Character_Pos_Y], PlayerData[playerid][Character_Pos_Z]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][Character_Pos_Angle]);
	PlayerData[playerid][Character_Interior_ID] = GetPlayerInterior(playerid);
	PlayerData[playerid][Character_Virtual_World] = GetPlayerVirtualWorld(playerid);
	
	SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
	
	skinid = GetPlayerSkin(playerid);
 	PlayerData[playerid][Character_Skin_Logout] = skinid;

 	GetPlayerHealth(playerid, h);
	GetPlayerArmour(playerid, a);
	PlayerData[playerid][Character_Health] = h;
	PlayerData[playerid][Character_Armor] = a;
	
	if(PlayerData[playerid][Character_VIP] == 0)
	{
		format(daterange, sizeof(daterange), "0000-00-00");
	}
	else if(PlayerData[playerid][Character_VIP] > 0)
	{
		format(daterange, sizeof(daterange), "%s", PlayerData[playerid][Character_VIP_Exp]);
	}
	
    mysql_format(connection, playerquery, sizeof(playerquery), "UPDATE `user_accounts` SET \
																`character_age` = '%i', \
																`character_sex` = '%s', \
																`character_birthplace` = '%s', \
																`character_registered` = '%i', \
																`character_skin_1` = '%i', \
																`character_skin_2` = '%i', \
																`character_skin_3` = '%i', \
																`character_skin_logout` = '%i', \
																`character_hour` = '%i', \
																`character_minutes` = '%i', \
																`character_ban` = '%i', \
																`character_health` = '%f', \
																`character_armor` = '%f', \
																`character_faction` = '%i', \
																`character_faction_rank` = '%i', \
																`character_faction_join_request` = '%i', \
																`character_faction_ban` = '%i', \
																`character_money` = '%i', \
																`character_coins` = '%i', \
																`character_bank_account` = '%i', \
																`character_bank_money` = '%i', \
																`character_bank_pin` = '%s', \
																`character_bank_loan` = '%i', \
																`character_vip` = '%i', \
																`character_vip_exp` = '%s', \
																`character_pos_x` = '%f', `character_pos_y` = '%f', `character_pos_z` = '%f', `character_pos_angle` = '%f', `character_interior_id` = '%i', `character_virtual_world` = '%i', \
																`character_house_id_1` = '%i',`character_house_id_2` = '%i', `character_total_houses` = '%i', `character_total_businesses` = '%i', `character_business_id_1` = '%i', `character_business_id_2` = '%i', \
																`character_level` = '%i', `character_level_exp` = '%i' WHERE `character_name` = '%e' "
	
					, PlayerData[playerid][Character_Age] , PlayerData[playerid][Character_Sex], PlayerData[playerid][Character_Birthplace], PlayerData[playerid][Character_Registered], PlayerData[playerid][Character_Skin_1]
				    , PlayerData[playerid][Character_Skin_2], PlayerData[playerid][Character_Skin_3], PlayerData[playerid][Character_Skin_Logout], PlayerData[playerid][Character_Hour], PlayerData[playerid][Character_Minutes], PlayerData[playerid][Character_Ban]
				    , PlayerData[playerid][Character_Health], PlayerData[playerid][Character_Armor], PlayerData[playerid][Character_Faction], PlayerData[playerid][Character_Faction_Rank], PlayerData[playerid][Character_Faction_Join_Request]
				    , PlayerData[playerid][Character_Faction_Ban], PlayerData[playerid][Character_Money], PlayerData[playerid][Character_Coins], PlayerData[playerid][Character_Bank_Account], PlayerData[playerid][Character_Bank_Money]
				    , PlayerData[playerid][Character_Bank_Pin], PlayerData[playerid][Character_Bank_Loan], PlayerData[playerid][Character_VIP], daterange, PlayerData[playerid][Character_Pos_X], PlayerData[playerid][Character_Pos_Y], PlayerData[playerid][Character_Pos_Z]
				    , PlayerData[playerid][Character_Pos_Angle], PlayerData[playerid][Character_Interior_ID], PlayerData[playerid][Character_Virtual_World], PlayerData[playerid][Character_House_ID_1], PlayerData[playerid][Character_House_ID_2], PlayerData[playerid][Character_Total_Houses]
					, PlayerData[playerid][Character_Total_Businesses], PlayerData[playerid][Character_Business_ID_1], PlayerData[playerid][Character_Business_ID_2], PlayerData[playerid][Character_Level], PlayerData[playerid][Character_Level_Exp]
					, PlayerData[playerid][Character_Name]);
					
    mysql_tquery(connection, playerquery);

	return 1;
}

forward Save_Character_Info_Query_2(playerid);
public Save_Character_Info_Query_2(playerid)
{
	new playerquery[2000];

	if(IsPlayerOnDuty[playerid] == 1)
	{
	    ResetPlayerWeapons(playerid);		
		
	    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
	    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
		GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
		GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
		GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
		GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
	}

	GetPlayerWeaponData(playerid, WEAPON_SLOT_MELEE, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
	GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
	GetPlayerWeaponData(playerid, WEAPON_SLOT_SHOTGUN, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
	GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
	GetPlayerWeaponData(playerid, WEAPON_SLOT_ASSAULT_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
	GetPlayerWeaponData(playerid, WEAPON_SLOT_LONG_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);

    mysql_format(connection, playerquery, sizeof(playerquery), "UPDATE `user_accounts` SET \
																	`character_ticket_amount` = '%i', \
																	`character_total_ticket_amount` = '%i', \
																	`character_jail` = '%i', \
																	`character_jail_time` = '%i', \
																	`character_jail_reason` = '%s', \
																	`character_last_crime` = '%s', \
																	`admin_level` = '%i', \
																 	`admin_level_exp` = '%i', \
																	`admin_jail` = '%i', \
																	`admin_jail_time` = '%i', \
																 	`admin_jail_reason` = '%s', \
																	`weapon_slot_1` = '%i', `weapon_slot_2` = '%i', `weapon_slot_3` = '%i', `weapon_slot_4` = '%i', `weapon_slot_5` = '%i', `weapon_slot_6` = '%i', \
																	`ammo_slot_1` = '%i', `ammo_slot_2` = '%i', `ammo_slot_3` = '%i', `ammo_slot_4` = '%i', `ammo_slot_5` = '%i', `ammo_slot_6` = '%i', \
																	`character_total_vehicles` = '%i' WHERE `character_name` = '%e' "

				    , PlayerData[playerid][Character_Ticket_Amount]
					, PlayerData[playerid][Character_Total_Ticket_Amount]
					, PlayerData[playerid][Character_Jail]
					, PlayerData[playerid][Character_Jail_Time]
					, PlayerData[playerid][Character_Jail_Reason]
					, PlayerData[playerid][Character_Last_Crime]
					, PlayerData[playerid][Admin_Level]
					, PlayerData[playerid][Admin_Level_Exp]
					, PlayerData[playerid][Admin_Jail]
					, PlayerData[playerid][Admin_Jail_Time]
					, PlayerData[playerid][Admin_Jail_Reason]
					, PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Weapon_Slot_6]
				    , PlayerData[playerid][Ammo_Slot_1], PlayerData[playerid][Ammo_Slot_2], PlayerData[playerid][Ammo_Slot_3], PlayerData[playerid][Ammo_Slot_4], PlayerData[playerid][Ammo_Slot_5], PlayerData[playerid][Ammo_Slot_6]
					, PlayerData[playerid][Character_Total_Vehicles]
					, PlayerData[playerid][Character_Name]);

    mysql_tquery(connection, playerquery);
	return 1;
}

forward Save_Character_Info_Query_3(playerid);
public Save_Character_Info_Query_3(playerid)
{
	new playerquery[2000];

    mysql_format(connection, playerquery, sizeof(playerquery), "UPDATE `user_accounts` SET \
																	`character_drug_cocaine` = '%i', \
																	`character_drug_heroin` = '%i', \
																	`character_drug_weed` = '%i', \
																	`character_radio` = '%i', \
																	`character_has_rope` = '%i', \
																	`character_has_fuelcan` = '%i', \
																	`character_has_lockpick` = '%i', \
																	`character_has_device` = '%i', \
																	`character_has_drugs` = '%i', \
																	`character_has_food` = '%i', \
																	`character_has_mask` = '%i', \
																	`character_has_blindfold` = '%i', \
																	`character_has_drinks` = '%i', \
																	`character_has_alcohol` = '%i', \
																	`character_has_phone` = '%i', \
																	`character_phonenumber` = '%i', \
																	`character_has_simcard` = '%i' WHERE `character_name` = '%e' "

				    , PlayerData[playerid][Character_Drug_Cocaine]
					, PlayerData[playerid][Character_Drug_Heroin]
					, PlayerData[playerid][Character_Drug_Weed]
					, PlayerData[playerid][Character_Radio]
					, PlayerData[playerid][Character_Has_Rope]
					, PlayerData[playerid][Character_Has_Fuelcan]
					, PlayerData[playerid][Character_Has_Lockpick]
					, PlayerData[playerid][Character_Has_Device]
					, PlayerData[playerid][Character_Has_Drugs]
					, PlayerData[playerid][Character_Has_Food]
					, PlayerData[playerid][Character_Has_Mask]
					, PlayerData[playerid][Character_Has_Blindfold]
					, PlayerData[playerid][Character_Has_Drinks]
					, PlayerData[playerid][Character_Has_Alcohol]
					, PlayerData[playerid][Character_Has_Phone]
					, PlayerData[playerid][Character_Phonenumber]
					, PlayerData[playerid][Character_Has_SimCard]
					, PlayerData[playerid][Character_Name]);

    mysql_tquery(connection, playerquery);
	return 1;
}

forward Save_Vehicle_Information();
public Save_Vehicle_Information()
{
	for(new i; i < MAX_VEHICLES; i ++)
	{
		new vehiclequery[2000];

	    mysql_format(connection, vehiclequery, sizeof(vehiclequery), "UPDATE `vehicle_information` SET \
																	`vehicle_faction` = '%i', \
																	`vehicle_job` = '%i', \
																	`vehicle_owner` = '%e', \
																	`vehicle_used` = '%i', \
																	`vehicle_model` = '%i', \
																	`vehicle_color_1` = '%i', \
																	`vehicle_color_2` = '%i', \
																	`vehicle_lock` = '%i', \
																	`vehicle_alarm` = '%i', \
																	`vehicle_gps` = '%i', \
																	`vehicle_fuel` = '%i' \
																	`vehicle_type` = '%i' WHERE `vehicle_id` = '%i' LIMIT 1"

						, VehicleData[i][Vehicle_Faction] , VehicleData[i][Vehicle_Job],  VehicleData[i][Vehicle_Owner] , VehicleData[i][Vehicle_Used] , VehicleData[i][Vehicle_Model] , VehicleData[i][Vehicle_Color_1] , VehicleData[i][Vehicle_Color_2]
						, VehicleData[i][Vehicle_Lock] , VehicleData[i][Vehicle_Alarm] , VehicleData[i][Vehicle_GPS], VehicleData[i][Vehicle_Fuel], VehicleData[i][Vehicle_Type]
						, VehicleData[i][Vehicle_ID]);

	    mysql_tquery(connection, vehiclequery);
	}
	return 1;
}

forward RegistrationSpawn(playerid);
public RegistrationSpawn(playerid)
{	
    SpawnPlayer(playerid);
    TextDrawShowForPlayer(playerid, Time);
	StopAudioStreamForPlayer(playerid);
    
	SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_1],  1717.8601,-1855.2123,13.5789, 90);
	SpawnPlayer(playerid);
			
 	SetPlayerInterior(playerid, 0);
 	
 	HasPlayerFirstSpawned[playerid] = 1;
 	
 	PlayerData[playerid][Character_Money] =7500;
  	PlayerData[playerid][Character_Coins] +=20;
  	PlayerData[playerid][Character_Level] +=1;
  	
  	SetPlayerScore(playerid, PlayerData[playerid][Character_Level]);
  	
  	SendClientMessage(playerid, COLOR_TIP, "Thank you for completing the registration of your character. For joining so early on in development, you");
  	SendClientMessage(playerid, COLOR_TIP, "have been given [20] coins and [$7500] in your wallet to get your character started!");
  	SendClientMessage(playerid, COLOR_TIP, "");
  	SendClientMessage(playerid, COLOR_TIP, "(Please take your time to go through our quick guides, that can be located at the front desk or use /tutorial!)");

    TogglePlayerControllable(playerid,false);

	SetPlayerColor(playerid, COLOR_WHITE);
	
	Save_Character_Info_Query_1(playerid);
    Save_Character_Info_Query_2(playerid);
	
	ShowPlayerDialog(playerid, DIALOG_OPEN_BETA, DIALOG_STYLE_MSGBOX, "Open Roleplay - Open Beta", "Thank you for joining our server during this open beta phase!\n\nFirst thing is first, there is going to be broken features that requires fixing.\nIf you manage to find any of these please let our staff know or report on the discord.\n\nThis script is completly written from scratch, so I hope you enjoy - Cobra", "Close", "");

    Minute_Timer[playerid] = SetTimerEx("MinuteTimer", 60000, true, "i", playerid);
    DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
	return 1;
}

forward LoginSpawn(playerid);
public LoginSpawn(playerid)
{
	PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw1);
	PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw2);
	PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw3);
	PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw4);
	PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw5);
	PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw6);
	
	SetPlayerColor(playerid, COLOR_WHITE);
	StopAudioStreamForPlayer(playerid);
	
    TextDrawShowForPlayer(playerid, Time);
    
    SetPlayerScore(playerid, PlayerData[playerid][Character_Level]);
	SetPlayerHealth(playerid, PlayerData[playerid][Character_Health]);
	SetPlayerArmour(playerid, PlayerData[playerid][Character_Armor]);
	
	HasPlayerFirstSpawned[playerid] = 1;
    
    if(PlayerData[playerid][Character_Registered] == 1)
    {
        new dstring[256];
       	if(PlayerData[playerid][Admin_Jail] == 1)
        {
			format(dstring, sizeof(dstring), "[SERVER]: {FFFFFF}You never completed your admin jail sentence. Please finish your remaining ( %i ) minutes!", PlayerData[playerid][Admin_Jail_Time]);
			SendClientMessage(playerid, COLOR_RED, dstring);

			SendClientMessage(playerid, COLOR_RED, "[SERVER]: {FFFFFF}You can dispute this jail sentence, by reporting this on the forums!");
			
			if(PlayerData[playerid][Character_Skin_Logout] == 0)
			{
				PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];
				printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
			}
			
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_Logout],  340.2295, 163.5576, 1019.9912+0.3, 0.8699);
			SpawnPlayer(playerid);

			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, playerid++);

			TogglePlayerControllable(playerid,false);
			printf("[Login Spawn] %s has been spawned at the admin jail to finish their sentence", GetName(playerid));
        }
        else if(PlayerData[playerid][Character_Jail] > 0)
        {
			format(dstring, sizeof(dstring), "[SERVER]: {FFFFFF}You never completed your prison sentence. Please finish your remaining ( %i ) minutes!", PlayerData[playerid][Character_Jail_Time]);
			SendClientMessage(playerid, COLOR_RED, dstring);

			SendClientMessage(playerid, COLOR_RED, "[SERVER]: {FFFFFF}You can dispute this jail sentence, by reporting this on the forums!");

			if(PlayerData[playerid][Character_Skin_Logout] == 0)
			{
				PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];
				printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
			}
			
            new randIndex = random(sizeof(PoliceJailSpawns));			
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_Logout],  PoliceJailSpawns[randIndex][0], PoliceJailSpawns[randIndex][1], PoliceJailSpawns[randIndex][2]+0.3, 90);
			SpawnPlayer(playerid);

			SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 1);

			TogglePlayerControllable(playerid,false);
			printf("[Login Spawn] %s has been spawned at the jail cell to finish their sentence", GetName(playerid));
        }
        else if(PlayerData[playerid][Character_House_ID_1] > 0 && PlayerData[playerid][Character_Hour] != SERVER_HOUR && PlayerData[playerid][Admin_Jail] == 0)
		{
		    new houseid = PlayerData[playerid][Character_House_ID_1];
		
			if(PlayerData[playerid][Character_Skin_Logout] == 0)
			{
				PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];
				printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
			}
			
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_Logout],  HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z]+0.3, HouseData[houseid][House_Spawn_A]);
			SpawnPlayer(playerid);

			SetPlayerInterior(playerid, HouseData[houseid][House_Spawn_Interior]);
			SetPlayerVirtualWorld(playerid, HouseData[houseid][House_Spawn_VW]);
			
			if(PlayerData[playerid][Character_VIP] > 0 && strcmp("0000-00-00", PlayerData[playerid][Character_VIP_Exp]) != 0)
			{		
				SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s! [VIP Expiry: %s]", PlayerData[playerid][Character_Last_Login], PlayerData[playerid][Character_VIP_Exp]);	
			}
			else 
			{
				SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s!", PlayerData[playerid][Character_Last_Login]);	
			}

			TogglePlayerControllable(playerid,false);
			printf("[Login Spawn] %s has been spawned at their house", GetName(playerid));
		}
		else if(PlayerData[playerid][Character_Hotel_ID] > 0 && PlayerData[playerid][Character_Hour] != SERVER_HOUR && PlayerData[playerid][Admin_Jail] == 0)
		{			
			if(PlayerData[playerid][Character_Skin_Logout] == 0)
			{
				PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];
				printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
			}
			
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_Logout],  PlayerData[playerid][Hotel_Character_Pos_X], PlayerData[playerid][Hotel_Character_Pos_Y], PlayerData[playerid][Hotel_Character_Pos_Z]+0.3, PlayerData[playerid][Hotel_Character_Pos_Angle]);
			SpawnPlayer(playerid);

			SetPlayerInterior(playerid, PlayerData[playerid][Hotel_Character_Interior_ID]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][Hotel_Character_Virtual_World]);

			if(PlayerData[playerid][Character_VIP] > 0 && strcmp("0000-00-00", PlayerData[playerid][Character_VIP_Exp]) != 0)
			{		
				SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s! [VIP Expiry: %s]", PlayerData[playerid][Character_Last_Login], PlayerData[playerid][Character_VIP_Exp]);	
			}
			else 
			{
				SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s!", PlayerData[playerid][Character_Last_Login]);	
			}

			TogglePlayerControllable(playerid,false);
			printf("[Login Spawn] %s has been spawned at their hotel", GetName(playerid));
		}
		else if(PlayerData[playerid][Character_House_ID_1] > 0 && PlayerData[playerid][Character_Hour] == SERVER_HOUR && PlayerData[playerid][Admin_Jail] == 0)
		{
		    if(PlayerData[playerid][Character_Pos_X] == 0 && PlayerData[playerid][Character_Pos_Y] == 0 && PlayerData[playerid][Character_Pos_Z] == 0)
			{
				if(PlayerData[playerid][Character_Skin_Logout] == 0)
				{
					PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];
					printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
				}
			
				SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_Logout],  1529.6, -1691.2, 14.3, PlayerData[playerid][Character_Pos_Angle]);
				SpawnPlayer(playerid);
				
				SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);

				if(PlayerData[playerid][Character_VIP] > 0 && strcmp("0000-00-00", PlayerData[playerid][Character_VIP_Exp]) != 0)
				{		
					SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s! [VIP Expiry: %s]", PlayerData[playerid][Character_Last_Login], PlayerData[playerid][Character_VIP_Exp]);	
				}
				else 
				{
					SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s!", PlayerData[playerid][Character_Last_Login]);	
				}
				
				if(GetPlayerSkin(playerid) == 0)
				{
				    SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
					printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
				}

				TogglePlayerControllable(playerid,false);
				printf("[Login Spawn] %s has bug spawned, they have been sent to LS", GetName(playerid));
			}
			else
			{	
				if(PlayerData[playerid][Character_Skin_Logout] == 0)
				{
					PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];
					printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
				}
						
				SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_Logout],  PlayerData[playerid][Character_Pos_X], PlayerData[playerid][Character_Pos_Y], PlayerData[playerid][Character_Pos_Z]+0.3, PlayerData[playerid][Character_Pos_Angle]);
				SpawnPlayer(playerid);

				SetPlayerInterior(playerid, PlayerData[playerid][Character_Interior_ID]);
				SetPlayerVirtualWorld(playerid, PlayerData[playerid][Character_Virtual_World]);
			
				if(PlayerData[playerid][Character_VIP] > 0 && strcmp("0000-00-00", PlayerData[playerid][Character_VIP_Exp]) != 0)
				{		
					SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s! [VIP Expiry: %s]", PlayerData[playerid][Character_Last_Login], PlayerData[playerid][Character_VIP_Exp]);	
				}
				else 
				{
					SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s!", PlayerData[playerid][Character_Last_Login]);	
				}
				
				SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_Logout]);
				
				if(GetPlayerSkin(playerid) == 0)
				{
				    SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
					printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
				}

				TogglePlayerControllable(playerid,false);
				printf("[Login Spawn] %s has spawned in their last location", GetName(playerid));
			}
		}
		else if(PlayerData[playerid][Character_House_ID_1] == 0 && PlayerData[playerid][Admin_Jail] == 0)
	    {			
			if(PlayerData[playerid][Character_Skin_Logout] == 0)
			{
				PlayerData[playerid][Character_Skin_Logout] = PlayerData[playerid][Character_Skin_1];
				printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
			}
			
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][Character_Skin_Logout],  PlayerData[playerid][Character_Pos_X], PlayerData[playerid][Character_Pos_Y], PlayerData[playerid][Character_Pos_Z]+0.3, PlayerData[playerid][Character_Pos_Angle]);
			SpawnPlayer(playerid);

			SetPlayerInterior(playerid, PlayerData[playerid][Character_Interior_ID]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][Character_Virtual_World]);

			if(PlayerData[playerid][Character_VIP] > 0 && strcmp("0000-00-00", PlayerData[playerid][Character_VIP_Exp]) != 0)
			{		
				SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s! [VIP Expiry: %s]", PlayerData[playerid][Character_Last_Login], PlayerData[playerid][Character_VIP_Exp]);	
			}
			else 
			{
				SendClientMessage(playerid, COLOR_TIP, "Thank you for logging back into the server, you last logged in on the %s!", PlayerData[playerid][Character_Last_Login]);	
			}
			
			if(GetPlayerSkin(playerid) == 0)
			{
			    SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
				printf("[Login] %s has spawned with CJ skin, updated there skin", GetName(playerid));
			}

			TogglePlayerControllable(playerid,false);
			printf("[Login Spawn] %s has spawned in their last location", GetName(playerid));
		}
		else if(PlayerData[playerid][Character_Health] <= 5)
		{
		    IsPlayerInHospital[playerid] = 1;

			SetSpawnInfo(playerid, NO_TEAM, 62,  -198.4496,-1768.4443,675.7687, 235.7789);
			SpawnPlayer(playerid);

		 	SetPlayerInterior(playerid, 0);

		 	SetPlayerHealth(playerid, 50);

	        ClearMessages(playerid);
		 	
			SendClientMessage(playerid, COLOR_TIP, "Your character has just died, please wait inside the hospital until your rest period is up!");
		
			printf("[Login Spawn] %s has bug spawned and has been put in the hospital", GetName(playerid));

		 	Hospital_Timer[playerid] = SetTimerEx("HospitalTimer", 60000, false, "i", playerid);
		}

		Minute_Timer[playerid] = SetTimerEx("MinuteTimer", 60000, true, "i", playerid);
		DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
    }
    
    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
	GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
	GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
	GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
	GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
	GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);
    
    WhoIsCalling[playerid] = 9999999;

	if(PlayerData[playerid][Character_VIP] > 0 && strcmp("0000-00-00", PlayerData[playerid][Character_VIP_Exp]) != 0)
	{	
		new year, month, day;
	    getdate(year, month, day);
	
	    new currentDate[11];
	    format(currentDate, sizeof(currentDate), "%04d-%02d-%02d", year, month, day);
	
		if (strcmp(currentDate, PlayerData[playerid][Character_VIP_Exp]) == 0)
		{
			new updatequery[2000];	
			mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_last_login` = CURDATE(), `character_vip_exp` = '0000-00-00',  `character_vip` = '0' WHERE `character_name` = '%e' LIMIT 1", GetName(playerid));
			mysql_tquery(connection, updatequery);
			
			PlayerData[playerid][Character_VIP_Exp] = 0;
			PlayerData[playerid][Character_VIP] = 0;
		}
	}
	else 
	{
		new updatequery[2000];	
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_last_login` = CURDATE() WHERE `character_name` = '%e' LIMIT 1", GetName(playerid));
		mysql_tquery(connection, updatequery);
	}   
	
	ShowPlayerDialog(playerid, DIALOG_OPEN_BETA, DIALOG_STYLE_MSGBOX, "Open Roleplay - Open Beta", "Thank you for joining our server during this open beta phase!\n\nFirst thing is first, there is going to be broken features that requires fixing.\nIf you manage to find any of these please let our staff know or report on the discord.\n\nThis script is completly written from scratch, so I hope you enjoy - Cobra", "Close", "");
	 
	return 1;
}

forward OnBanCheck(playerid);
public OnBanCheck(playerid)
{
    if(cache_num_rows() > 0)
    {
        new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]: %s has just been offline banned by %s", BanName[playerid], GetName(playerid));
		SendClientMessageToAll(COLOR_RED, dstring);	
		
		new updatequery[2000];
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_ban` = 1 WHERE `character_name` = '%e' LIMIT 1", BanName[playerid]);
		mysql_tquery(connection, updatequery);
		
		BanName[playerid] = "";
	}
	else
	{
		SendPlayerErrorMessage(playerid, " The name you have entered cannot be banned! [Already has been banned or doesn't exist]");
		
		BanName[playerid] = "";
	}	
    return 1;
}

forward OnUnbanCheck(playerid);
public OnUnbanCheck(playerid)
{
    if(cache_num_rows() > 0)
    {
        new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]: %s has just been offline unbanned by %s", BanName[playerid], GetName(playerid));
		SendClientMessageToAll(COLOR_RED, dstring);	
		
		new updatequery[2000];
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_ban` = 0 WHERE `character_name` = '%e' LIMIT 1", BanName[playerid]);
		mysql_tquery(connection, updatequery);
		
		BanName[playerid] = "";
	}
	else
	{
		SendPlayerErrorMessage(playerid, " The name you have entered cannot be unbanned! [Already has been unbanned or doesn't exist]");
		
		BanName[playerid] = "";
	}	
    return 1;
}

forward CheckUserMoney(playerid);
public CheckUserMoney(playerid)
{
    if (GetPlayerMoney(playerid) != PlayerData[playerid][Character_Money])
	{
		ResetPlayerMoney(playerid);
  		GivePlayerMoney(playerid, PlayerData[playerid][Character_Money]);
	}
	return 1;
}

forward CheckUserWeaponHack(playerid);
public CheckUserWeaponHack(playerid)
{
    if(GetPlayerWeapon(playerid) == WEAPON_CHAINSAW || GetPlayerWeapon(playerid) == WEAPON_DILDO || GetPlayerWeapon(playerid) == WEAPON_DILDO2 || GetPlayerWeapon(playerid) == WEAPON_VIBRATOR || GetPlayerWeapon(playerid) == WEAPON_VIBRATOR2 || GetPlayerWeapon(playerid) == WEAPON_GRENADE || GetPlayerWeapon(playerid) == WEAPON_ROCKETLAUNCHER || GetPlayerWeapon(playerid) == WEAPON_HEATSEEKER || GetPlayerWeapon(playerid) == WEAPON_FLAMETHROWER || GetPlayerWeapon(playerid) == WEAPON_MINIGUN || GetPlayerWeapon(playerid) == WEAPON_SATCHEL)
	{
		ResetPlayerWeapons(playerid);
		
  		SendPlayerErrorMessage(playerid, " You have just obtained an illegal weapon. Staff have been notified, this is your only warning!");

		new dstring[156];
		format(dstring, sizeof(dstring), "[Hack / Abuse Alert] %s has potentionally spawned an illegal weapon using a modification. They have been warned [Next offence kick the player]", GetName(playerid));
		SendModeratorMessage(COLOR_LIME, dstring);
		
		printf("HACK ALERT: %s has been caught using weapon hacks by the system", GetName(playerid));
	}
	return 1;
}

forward CheckUserAmmoHack(playerid);
public CheckUserAmmoHack(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new ammo;
		
		ammo = GetPlayerAmmo(playerid);
		
		if(ammo >= 9000)
		{
			ResetPlayerWeapons(playerid);
			
	  		SendPlayerErrorMessage(playerid, " You have just spawned or bought an illegal amout of ammo. Staff have been notified, this is your only warning!");
	
			new dstring[156];
			format(dstring, sizeof(dstring), "[Hack / Abuse Alert] %s has just spawned an illegal amount of ammo. They have been warned [Next offence kick the player]", GetName(playerid));
			SendModeratorMessage(COLOR_LIME, dstring);
			
			printf("HACK ALERT: %s has been caught using ammo hacks by the system", GetName(playerid));
		}
	}
	return 1;
}

forward CheckUserHealthHack(playerid);
public CheckUserHealthHack(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:health;
		
		GetPlayerHealth(playerid, health);
		
		if(health >= 101.0)
		{
			SetPlayerHealth(playerid,5.0);
			
	  		SendPlayerErrorMessage(playerid, " You have just healed yourself using a modification. Staff have been notified, this is your only warning!");
	
			new dstring[156];
			format(dstring, sizeof(dstring), "[Hack / Abuse Alert] %s has just used a health modification. They have been warned [Next offence kick the player]", GetName(playerid));
			SendModeratorMessage(COLOR_LIME, dstring);
			
			printf("HACK ALERT: %s has been caught using health hacks by the system", GetName(playerid));
		}
	}
	return 1;
}

forward CheckUserArmourHack(playerid);
public CheckUserArmourHack(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:armour;
		
		GetPlayerArmour(playerid, armour);
		
		if(armour >= 101.0)
		{
			SetPlayerArmour(playerid, 0.0);
			
	  		SendPlayerErrorMessage(playerid, " You have just given yourself armour using a modification. Staff have been notified, this is your only warning!");
	
			new dstring[156];
			format(dstring, sizeof(dstring), "[Hack / Abuse Alert] %s has just given themselves armour using a modification. They have been warned [Next offence kick the player]", GetName(playerid));
			SendModeratorMessage(COLOR_LIME, dstring);
			
			printf("HACK ALERT: %s has been caught using armour hacks by the system", GetName(playerid));
		}
	}
	return 1;
}

forward CheckVehicleTeleportIntoHack(playerid);
public CheckVehicleTeleportIntoHack(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerData[playerid][Admin_Level] == 0 && PlayerData[playerid][Moderator_Level] == 0 && PlayerData[playerid][Helper_Level] == 0)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			
			new Float:playerX, Float:playerY, Float:playerZ;
		    GetPlayerPos(playerid, playerX, playerY, playerZ);
		
		    new Float:vehicleX, Float:vehicleY, Float:vehicleZ;
		    GetVehiclePos(vehicleid, vehicleX, vehicleY, vehicleZ);
		
		    if(GetDistanceBetweenPoints(playerX, playerY, playerZ, vehicleX, vehicleY, vehicleZ) > MAX_ALLOWED_DISTANCE)
		    {
		        SendPlayerErrorMessage(playerid, " You have just teleported to a vehicle. Staff have been notified, this is your only warning!");
	
				new dstring[156];
				format(dstring, sizeof(dstring), "[Hack / Abuse Alert] %s has just teleported to a vehicle. They have been warned [Next offence kick the player]", GetName(playerid));
				SendModeratorMessage(COLOR_LIME, dstring);
		    }
		}
	}
	return 1;
}

forward OnBillPay(playerid);
public OnBillPay(playerid)
{
    new billID, billAmount, billName[50], billCharacterName[50];

    if (cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "bill_id", billID);
		cache_get_value_name(0, "character_name", billCharacterName, 50);
		
		cache_get_value_name(0, "bill_name", billName, 50);
		cache_get_value_name_int(0, "bill_amount", billAmount);

		if(strcmp(billCharacterName, PlayerData[playerid][Character_Name]) == 0)
		{
		    if(PlayerData[playerid][Character_Money] >= billAmount)
		    {
		        new onlineplayer;
		        
		        onlineplayer = 999;
		        
                for(new i = 0; i < MAX_PLAYERS; i++)
        		{
        		    if(strcmp(PlayerData[i][Character_Name], billName, false) == 0)
        		    {
        		        onlineplayer = i;
        		    }
        		}
        		
        		if(onlineplayer >= 0 && onlineplayer < 999)
        		{
        		    PlayerData[onlineplayer][Character_Money] += billAmount;
        		    PlayerData[playerid][Character_Money] -= billAmount;

					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$%d", billAmount);
					GameTextForPlayer(playerid, text_value, 3000, 1);
					
					new text_value1[256];
					format(text_value1, sizeof(text_value1), "~g~~h~+$%d", billAmount);
					GameTextForPlayer(onlineplayer, text_value1, 3000, 3);
        		    
        		    new dstring[256];
					format(dstring, sizeof(dstring), "- You have just paid a bill of $%i, to %s!", billAmount, GetName(onlineplayer));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);

					format(dstring, sizeof(dstring), "> You have just been paid for a bill of $%i, from %s!", billAmount, GetName(playerid));
					SendClientMessage(onlineplayer, COLOR_YELLOW, dstring);
					
					new acquery[2000];
			        mysql_format(connection, acquery, sizeof(acquery), "DELETE FROM `bill_information` WHERE `bill_id` = '%d' LIMIT 1", billID);
		    		mysql_tquery(connection, acquery);
        		}
        		else if(onlineplayer == 999)
        		{
        		    PlayerData[playerid][Character_Money] -= billAmount;

					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$%d", billAmount);
					GameTextForPlayer(playerid, text_value, 3000, 1);
        		    
	  				new acquery[2000];
			        mysql_format(connection, acquery, sizeof(acquery), "UPDATE `user_accounts` SET `character_money` = character_money + '%d' WHERE `character_name` = '%e' LIMIT 1", billAmount, billName);
		    		mysql_tquery(connection, acquery);
				}
			}
			else return SendPlayerErrorMessage(playerid, " You do not have enough money to pay this bill!");
		}
    }
    else
    {
        SendPlayerErrorMessage(playerid, " There are no records found for this bill ID!");
    }

    return 1;
}

forward OnReportCloseCheck(playerid);
public OnReportCloseCheck(playerid)
{
	new reportID, dstring[256];
	
    if (cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "report_id", reportID);
        
        new acquery[2000];
       	mysql_format(connection, acquery, sizeof(acquery), "UPDATE `report_information` SET `report_status` = '1' WHERE `report_id` = '%d' LIMIT 1", reportID);
		mysql_tquery(connection, acquery);
		
		format(dstring, sizeof(dstring), "[REPORT CLOSED]:{FFFFFF} %s has just closed report id: %d", GetName(playerid), reportID);
		SendReportMessage(COLOR_AQUABLUE, dstring);
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "> There are no current active reports with this ID");
    }

    return 1;
}

forward OnCrimeCheck(playerid);
public OnCrimeCheck(playerid)
{
    if (cache_num_rows() > 0)
    {
        new crimeRow[1024];
        new crimeHeader[256];
        new crimeDetails[1280];
        
        new crimeDesc[150], crimeName[50], crimeID, crimeType;

        crimeRow[0] = '\0';

        for (new i = 0; i < cache_num_rows(); i++)
        {
			cache_get_value_name_int(i, "crime_report_id", crimeID);
			cache_get_value_name(i, "crime_character_name", crimeName, 50);
			cache_get_value_name(i, "crime_description", crimeDesc, 150);
			cache_get_value_name_int(i, "crime_type", crimeType);

            new tempRow[256];
            format(tempRow, sizeof(tempRow), "%d\t%d\t%s\t%s\n", crimeID, crimeType, crimeName, crimeDesc);

            strcat(crimeRow, tempRow);
        }

        format(crimeHeader, sizeof(crimeHeader), "Crime ID\tCrime Type\tName\tDescription\n");
        format(crimeDetails, sizeof(crimeDetails), "%s%s", crimeHeader, crimeRow);

        ShowPlayerDialog(playerid, DIALOG_CRIME_CHECK, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Police Department - Crimes", crimeDetails, "Go Back", "");
    }
    else
    {
        ShowPlayerDialog(playerid, DIALOG_CRIME_CHECK, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Police Department - Crimes", "No crimes committed", "Go Back", "");
    }
    return 1;
}

forward OnBoloCheck(playerid);
public OnBoloCheck(playerid)
{
    if (cache_num_rows() > 0)
    {
        new boloRow[1024];
        new loanHeader[256];
        new loanDetails[1280];
        
        new boloDesc[150], boloID, boloType;

        boloRow[0] = '\0';

        for (new i = 0; i < cache_num_rows(); i++)
        {
			cache_get_value_name_int(i, "crime_report_id", boloID);
			cache_get_value_name(i, "crime_bolo_desc", boloDesc, 150);
			cache_get_value_name_int(i, "crime_bolo_type", boloType);
			
			SQL_BOLO_ID[playerid][i] = boloID;

            new tempRow[256];
            format(tempRow, sizeof(tempRow), "%d\t%d\t%s\n", boloID, boloType, boloDesc);

            strcat(boloRow, tempRow);
        }

        format(loanHeader, sizeof(loanHeader), "Bolo ID\tBolo Type\tBolo Description\n");
        format(loanDetails, sizeof(loanDetails), "%s%s", loanHeader, boloRow);

        ShowPlayerDialog(playerid, DIALOG_MDC_BOLOS, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Police Department - BOLOS", loanDetails, "Delete", "Go Back");
    }
    else
    {
        ShowPlayerDialog(playerid, DIALOG_MDC_BOLOS, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Police Department - BOLOS", "No active BOLOS", "Go Back", "");
    }
    return 1;
}

forward OnLoanCheckCustomer(playerid);
public OnLoanCheckCustomer(playerid)
{
    if (cache_num_rows() > 0)
    {
        new loanRow[1024];
        new loanHeader[256];
        new loanDetails[1280];
        
        new loanName[50], loanReason[50];
        new loanAmount, loanID;

        loanRow[0] = '\0';

        for (new i = 0; i < cache_num_rows(); i++)
        {
			cache_get_value_name_int(i, "loan_id", loanID);
			
			cache_get_value_name_int(i, "loan_amount", loanAmount);
			cache_get_value_name(i, "loan_name", loanName, 50);
			cache_get_value_name(i, "loan_reason", loanReason, 50);

            new tempRow[256];
            format(tempRow, sizeof(tempRow), "%d\t%s\t%d\tNot Reviewed\n", loanID, loanName, loanAmount);

            strcat(loanRow, tempRow);
        }

        format(loanHeader, sizeof(loanHeader), "Loan ID\tApplicant Name\tLoan Amount\tLoan Status\n");
        format(loanDetails, sizeof(loanDetails), "%s%s", loanHeader, loanRow);

        ShowPlayerDialog(playerid, DIALOG_BANK_VIEW_LOANS, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Bank - Loan Applications", loanDetails, "Go Back", "");
    }
    else
    {
        ShowPlayerDialog(playerid, DIALOG_BANK_VIEW_LOANS, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Bank - Loan Applications", "No avaliable loans", "Go Back", "");
    }
    return 1;
}

forward OnLoanCheck(playerid);
public OnLoanCheck(playerid)
{
    if (cache_num_rows() > 0)
    {
        new loanRow[1024];
        new loanHeader[256];
        new loanDetails[1280];

        loanRow[0] = '\0';

        for (new i = 0; i < cache_num_rows(); i++)
        {
			new loaded;
			
			cache_get_value_name_int(i, "loan_id", loaded);
			LoanData[loaded][Loan_ID] = loaded;
			
			cache_get_value_name_int(i, "loan_amount", LoanData[loaded][Loan_Amount]);
			cache_get_value_name(i, "loan_name", LoanData[loaded][Loan_Name], 50);
			cache_get_value_name(i, "loan_reason", LoanData[loaded][Loan_Reason], 50);
			cache_get_value_name_int(i, "loan_status", LoanData[loaded][Loan_Status]);
            
            SQL_LOAN_ID[playerid][i] = loaded;
            SQL_LOAN_AMOUNT[playerid][i] = LoanData[loaded][Loan_Amount];

            new tempRow[256];
            format(tempRow, sizeof(tempRow), "%d\t%s\t%d\n", LoanData[loaded][Loan_ID], LoanData[loaded][Loan_Name], LoanData[loaded][Loan_Amount]);

            strcat(loanRow, tempRow);
        }

        format(loanHeader, sizeof(loanHeader), "Loan ID\tApplicant Name\tLoan Amount\n");
        format(loanDetails, sizeof(loanDetails), "%s%s", loanHeader, loanRow);

        ShowPlayerDialog(playerid, DIALOG_BANK_FAC_LOANS, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Bank - Loan Applications", loanDetails, "View", "Exit");
    }
    else
    {
        ShowPlayerDialog(playerid, DIALOG_BANK_FAC_NOLOANS, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Bank - Loan Applications", "No avaliable loans", "Close", "");
    }
    return 1;
}

forward OnLoanDetails(playerid);
public OnLoanDetails(playerid)
{
    if (cache_num_rows() > 0)
    {
        new loanName[50], loanReason[50], status[50];
        new loanAmount, loanStatus;

		cache_get_value_name_int(0, "loan_amount", loanAmount);
		cache_get_value_name(0, "loan_name", loanName, 50);
		cache_get_value_name(0, "loan_reason", loanReason, 50);
		cache_get_value_name_int(0, "loan_status", loanStatus);
		
		cache_get_value_name(0, "loan_name", SQL_LOAN_NAME[playerid][0], 50);
        
        new name[50];
        format(name, sizeof(name), "%s", SQL_LOAN_NAME[playerid][0]);
	    SelectedLoanName[playerid] = name;
        
        if(loanStatus == 0) { format(status, sizeof(status), "Open"); }

        new loanDetails[2000];
        format(loanDetails, sizeof(loanDetails), "You are viewing Los Santos Bank Loan Application ID: %d\n\nCustomer Name:   %s\nAmount:                $%d\nReason:                 %s\nStatus:                   %s\n\nPlease make sure you are very careful with what loans you are approving, you\nhave limited funds.", SelectedLoanID, loanName, loanAmount, loanReason, status);

        ShowPlayerDialog(playerid, DIALOG_BANK_FAC_LOAN_INFO, DIALOG_STYLE_MSGBOX, "Los Santos Bank - Loan Details", loanDetails, "Proceed", "Go Back");
    }
    return 1;
}

forward OnApplicationCheck(playerid);
public OnApplicationCheck(playerid)
{
    if (cache_num_rows() > 0)
    {
        new appRow[1024];
        new appHeader[256];
        new appDetails[1280];
        
        new characterName[50], appID;

        appRow[0] = '\0';

        for (new i = 0; i < cache_num_rows(); i++)
        {
			cache_get_value_name_int(i, "account_id", appID);
			cache_get_value_name(i, "character_name", characterName, 50);
			
			SQL_APP_ID[playerid][i] = appID;

            new tempRow[256];
            format(tempRow, sizeof(tempRow), "%d\t%s\n", appID, characterName);

            strcat(appRow, tempRow);
        }

        format(appHeader, sizeof(appHeader), "Application ID\tCharacter Name\n");
        format(appDetails, sizeof(appDetails), "%s%s", appHeader, appRow);

        ShowPlayerDialog(playerid, DIALOG_FACTION_APP_VIEW, DIALOG_STYLE_TABLIST_HEADERS, "Faction Applications", appDetails, "Review", "Close");
    }
    else
    {
        ShowPlayerDialog(playerid, DIALOG_FACTION_APP_VIEW, DIALOG_STYLE_TABLIST_HEADERS, "Faction Applications", "No recent applications", "Close", "");
    }
    return 1;
}

forward OnApplicationDetails(playerid);
public OnApplicationDetails(playerid)
{
    if (cache_num_rows() > 0)
    {
        new characterName[50];

		cache_get_value_name(0, "character_name", characterName, 50);
		
		new name[50];
        format(name, sizeof(name), "%s", characterName);
	    SelectedAppName[playerid] = name;

        new appDetails[2000];
        format(appDetails, sizeof(appDetails), "You are selected to review character: %s\n\nPlease select an option for their application!", characterName);

        ShowPlayerDialog(playerid, DIALOG_FACTION_APP_DET, DIALOG_STYLE_MSGBOX, "Faction Application - Status Change", appDetails, "Approve", "Reject");
    }
    return 1;
}

forward OnFactionCheck(playerid);
public OnFactionCheck(playerid)
{
    new stringtitle[256];
    new FactionID, FactionName[50];

    SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Server Factions{FFFFFF} ***");

    if (cache_num_rows() > 0)
    {
        for (new i = 0; i < cache_num_rows(); i++)
        {			
			new count;
			count = 0;
			
			cache_get_value_name_int(i, "faction_id", FactionID);
			cache_get_value_name(i, "faction_name", FactionName, 50);
			
			for(new r = 0; r < MAX_PLAYERS; r++)
		  	{
				if(PlayerData[r][Character_Faction] == FactionID)
				{
					count ++;
				}
		  	}
			
			if(PlayerData[playerid][Admin_Level] > 5)
			{
				format(stringtitle, sizeof(stringtitle), "> {F2F746}Faction ID:{FFFFFF} %d - {F2F746}Faction Name:{FFFFFF} %s - {F2F746}Total Online:{FFFFFF} %d", FactionID, FactionName, count);
   				SendClientMessage(playerid, COLOR_WHITE, stringtitle);
			}
			else
			{
				format(stringtitle, sizeof(stringtitle), "> {F2F746}Faction Name:{FFFFFF} %s - {F2F746}Total Online:{FFFFFF} %d", FactionName, count);
   				SendClientMessage(playerid, COLOR_WHITE, stringtitle);
			}		
        }
    }
    return 1;
}

forward OnReportCheck(playerid);
public OnReportCheck(playerid)
{
    new stringtitle[256], stringdetails[256];
    new reportID, reportName[50], reportTarget[50], reportReason[256];

    SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Current Active Reports{FFFFFF} ***");

    if (cache_num_rows() > 0)
    {
        for (new i = 0; i < cache_num_rows(); i++)
        {			
			cache_get_value_name_int(i, "report_id", reportID);
			cache_get_value_name(i, "character_name", reportName, 50);
			cache_get_value_name(i, "target_name", reportTarget, 50);
			cache_get_value_name(i, "reason", reportReason, 256);

			format(stringtitle, sizeof(stringtitle), "> {F2F746}Report ID:{FFFFFF} %d - {F2F746}Reportee Name:{FFFFFF} %s - {F2F746}Reported Name:{FFFFFF} %s", reportID, reportName, reportTarget);
   			SendClientMessage(playerid, COLOR_WHITE, stringtitle);
   			format(stringdetails, sizeof(stringdetails), "> {F2F746}Reason:{FFFFFF} %s", reportReason);
   			SendClientMessage(playerid, COLOR_WHITE, stringdetails);
   			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------");
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "> There are no current active reports");
    }
    return 1;
}

forward OnRedeemCheck(playerid);
public OnRedeemCheck(playerid)
{
	new codeNumber[50], codeLevel, codeCoins, codeDate[11];

    if (cache_num_rows() > 0)
    {
        cache_get_value_name(0, "code_number", codeNumber, 50);
		cache_get_value_name_int(0, "code_coin_reward", codeCoins);
		cache_get_value_name_int(0, "code_level", codeLevel);
		cache_get_value_name(0, "code_expiry_date", codeDate, 11);

		if(codeLevel > 0)
		{
			PlayerData[playerid][Character_VIP] = codeLevel;
			PlayerData[playerid][Character_VIP_Exp] = codeDate;
			
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just redeemed your code of %s!", codeNumber);
			SendClientMessage(playerid, COLOR_ACTION, dstring);
		}	
		else
		{
			PlayerData[playerid][Character_Coins] += codeCoins;
			
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just redeemed your code of %s!", codeNumber);
			SendClientMessage(playerid, COLOR_ACTION, dstring);
		}
		
		new updatequery[2000];
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `redeem_information` SET `code_activated` = 1 WHERE `code_number` = '%s' LIMIT 1", codeNumber);
		mysql_tquery(connection, updatequery);		
    }
    else
	{
		SendPlayerErrorMessage(playerid, " This redemption code is either already used or hasn't been created yet!");
	}
    return 1;
}

forward OnRegistrationShow(playerid);
public OnRegistrationShow(playerid)
{
    new stringtitle[256];
    new vehicleModel, vehicleLP[256];

    SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Registration Information{FFFFFF} ***");

    if (cache_num_rows() > 0)
    {
        for (new i = 0; i < cache_num_rows(); i++)
        {			
			cache_get_value_name_int(i, "vehicle_model", vehicleModel);
			cache_get_value_name(i, "vehicle_license_plate", vehicleLP, 256);
			
			new vehicleName[32];
            vehicleName = GetVehicleModelName(vehicleModel);

			format(stringtitle, sizeof(stringtitle), "> {F2F746}Vehicle Model:{FFFFFF} %s - {F2F746}License Plate:{FFFFFF} %s ", vehicleName, vehicleLP);
   			SendClientMessage(playerid, COLOR_WHITE, stringtitle);
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "> They do not own any vehicles!");
    }

	SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------");

    return 1;
}

forward OnHouseCheck(playerid);
public OnHouseCheck(playerid)
{
    new stringtitle[256];
    new HouseAddress[150], HouseValue;

    SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Your Houses{FFFFFF} ***");

    if (cache_num_rows() > 0)
    {
        for (new i = 0; i < cache_num_rows(); i++)
        {			
			cache_get_value_name(i, "house_address", HouseAddress, 150);
			cache_get_value_name_int(i, "house_price_money", HouseValue);

			format(stringtitle, sizeof(stringtitle), "> {F2F746}Address:{FFFFFF} %s - {F2F746}$ Value:{FFFFFF} %d ", HouseAddress, HouseValue);
   			SendClientMessage(playerid, COLOR_WHITE, stringtitle);
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "> You do not own any houses!");
    }

	SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------");

    return 1;
}

forward OnRegistrationCheck(playerid);
public OnRegistrationCheck(playerid)
{
    new stringtitle[256];
    new vehicleModel, vehicleLP[256];

    SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Your Registrations{FFFFFF} ***");

    if (cache_num_rows() > 0)
    {
        for (new i = 0; i < cache_num_rows(); i++)
        {			
			cache_get_value_name_int(i, "vehicle_model", vehicleModel);
			cache_get_value_name(i, "vehicle_license_plate", vehicleLP, 256);
			
			new vehicleName[32];
            vehicleName = GetVehicleModelName(vehicleModel);

			format(stringtitle, sizeof(stringtitle), "> {F2F746}Vehicle Model:{FFFFFF} %s - {F2F746}License Plate:{FFFFFF} %s ", vehicleName, vehicleLP);
   			SendClientMessage(playerid, COLOR_WHITE, stringtitle);
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "> You do not own any vehicles!");
    }

	SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------");

    return 1;
}

forward OnPlayerTicketCheck(playerid);
public OnPlayerTicketCheck(playerid)
{
    new string[256], crimeID, crimeCharacterName[50], crimeDescription[150], crimeAmount;


    SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Here is a list of your tickets{FFFFFF} ***");

    if (cache_num_rows() > 0)
    {
        for (new i = 0; i < cache_num_rows(); i++)
        {			
			cache_get_value_name_int(i, "crime_report_id", crimeID);
			cache_get_value_name(i, "crime_character_name", crimeCharacterName, 50);
			cache_get_value_name(i, "crime_description", crimeDescription, 150);
			cache_get_value_name_int(i, "crime_amount", crimeAmount);
			
			if(strcmp(crimeCharacterName, PlayerData[playerid][Character_Name]) == 0)
			{
	            format(string, sizeof(string), "> {F2F746}Ticket ID:{FFFFFF} %d - {F2F746}Amount:{FFFFFF} $%d - {F2F746}Reason:{FFFFFF} %s", crimeID, crimeAmount, crimeDescription);
	            SendClientMessage(playerid, COLOR_WHITE, string);
			}
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "> You don't have any tickets to pay");
    }

	SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------");
	
    return 1;
}

forward OnPlayerTicketPay(playerid);
public OnPlayerTicketPay(playerid)
{
    new string[256], crimeID, crimeCharacterName[50], crimeDescription[150], crimeAmount, crimePaid;

    if (cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "crime_report_id", crimeID);
		cache_get_value_name(0, "crime_character_name", crimeCharacterName, 50);
		cache_get_value_name(0, "crime_description", crimeDescription, 150);
		cache_get_value_name_int(0, "crime_amount", crimeAmount);
		cache_get_value_name_int(0, "crime_paid", crimePaid);

		if(strcmp(crimeCharacterName, PlayerData[playerid][Character_Name]) == 0)
		{
		    if(PlayerData[playerid][Character_Money] >= crimeAmount)
		    {    		
        		PlayerData[playerid][Character_Money] -= crimeAmount;

				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$%d", crimeAmount);
				GameTextForPlayer(playerid, text_value, 3000, 1);

				format(string, sizeof(string), "- You have just paid your ticket (ID: %d) of $%d for: %s!", crimeID, crimeAmount, crimeDescription);
				SendClientMessage(playerid, COLOR_YELLOW, string);

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `crime_information` SET `crime_paid` = 1 WHERE `crime_report_id` = '%d' LIMIT 1", crimeID);
				mysql_tquery(connection, updatequery);
			}
			else return SendPlayerErrorMessage(playerid, " You do not have enough money to pay this ticket!");
		}
    }
    else
    {
        SendPlayerErrorMessage(playerid, " There are no active tickets that relate to this ID!");
    }

    return 1;
}

forward OnBillCheck(playerid);
public OnBillCheck(playerid)
{
    new string[256], btext[50];
    new billID, billAmount, billType, billName[50], billCharacterName[50];

    SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Here is a list of your bills{FFFFFF} ***");

    if (cache_num_rows() > 0)
    {
        for (new i = 0; i < cache_num_rows(); i++)
        {			
			cache_get_value_name_int(i, "bill_id", billID);
			cache_get_value_name(i, "character_name", billCharacterName, 50);
			cache_get_value_name_int(i, "bill_amount", billAmount);
			cache_get_value_name_int(i, "bill_type", billType);
			
			if(strcmp(billCharacterName, PlayerData[playerid][Character_Name]) == 0)
			{
				switch(billType)
				{
				    case 0: { btext = "LSPD Bill"; }
				    case 1: { btext = "LSPD Bill"; }
				    case 2: { btext = "LSPD Bill"; }
				    case 3: { btext = "LSPD Bill"; }
				    case 4: { btext = "LSPD Bill"; }
				    case 5: { btext = "LSPD Bill"; }
				    case 6: { btext = "LSPD Bill"; }
				    case 7: { btext = "LSPD Bill"; }
				    case 9: { btext = "Mechanic Bill"; }
				}

	            format(string, sizeof(string), "> {F2F746}Bill ID:{FFFFFF} %d - {F2F746}Amount:{FFFFFF} $%d - {F2F746}Type:{FFFFFF} %s - {F2F746}Charged By:{FFFFFF} %s", billID, billAmount, btext, billName);
	            SendClientMessage(playerid, COLOR_WHITE, string);
			}
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "> You don't have any bills");
    }

	SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------");

    return 1;
}

forward GetNextPhoneNumber(playerid);
public GetNextPhoneNumber(playerid)
{
    if(cache_num_rows() > 0)
    {
        SQL_PHONENUMBER_USED = 0;
    }
    else
	{
		SQL_PHONENUMBER_USED = 1;
	}
    return 1;
}

forward HospitalTimer(playerid);
public HospitalTimer(playerid)
{
 	IsPlayerInHospital[playerid] = 0;
	PlayerData[playerid][Character_Money] -=250;
	
	new text_value[256];
	format(text_value, sizeof(text_value), "~r~~h~-$250");
	GameTextForPlayer(playerid, text_value, 3000, 1);

	SendClientMessage(playerid, COLOR_RED, "[SERVER]: {FFFFFF}You can now leave the Los Santos General Hospital - A fee of $250 has been taken from your account!");
	SendClientMessage(playerid, COLOR_RED, "[SERVER]: {FFFFFF}Use /change to change your outfits!");
	return 1;
}

forward SaveImportantParameters(playerid);
public SaveImportantParameters(playerid)
{
    SendGlobalServerMessage("Global Script Saving In Progress - There is only one minute left until the restart!");
    
    for(new i = 0; i < MAX_PLAYERS; i++)
  	{
		OnPlayerDisconnect(i, 1);
  	}

    Save_Vehicle_Information();
	return 1;
}

forward ServerRestart(playerid);
public ServerRestart(playerid)
{
    mysql_close(connection);
    SendRconCommand("gmx");
	return 1;
}

forward RefuelTimer(playerid);
public RefuelTimer(playerid)
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
    	new vehicle = GetPlayerVehicleID(playerid);
    	new litrecount, difference, costfuel;
    	
    	litrecount = VehicleData[vehicle][Vehicle_Fuel];

		difference = 100 - litrecount;
		costfuel = difference * 2;
		
		if(PlayerData[playerid][Character_Money] >= costfuel)
		{
		    new string[256];
		    
		    PlayerData[playerid][Character_Money] -= costfuel;
		    VehicleData[vehicle][Vehicle_Fuel] = 100;
		
			new text_value[256];
			format(text_value, sizeof(text_value), "~r~~h~-$%d", costfuel);
			GameTextForPlayer(playerid, text_value, 3000, 1);
		    
		    format(string, sizeof(string), "> %s has just filled up their vehicle", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

			format(string, sizeof(string), "- You have just filled up your vehicle with a cost of $%i!", costfuel);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			
			TogglePlayerControllable(playerid, true);
		}
		else
		{
		    new string[256];
		    format(string, sizeof(string), "[ERROR]:{FFFFFF} You cannot afford to fill up you vehicle at this time. It will cost you $%i!", costfuel);
			SendClientMessage(playerid, COLOR_PINK, string);
			
			TogglePlayerControllable(playerid, true);
		}
    }
    return 1;
}

forward VehicleTimer(playerid);
public VehicleTimer(playerid)
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
    	new vehicle = GetPlayerVehicleID(playerid);
    	new Float:vehiclehealth;

		GetVehicleHealth(vehicle, vehiclehealth);

        new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);

		if(vehiclehealth > 300)
		{
			if(engine == 1)
			{
		        new vehiclefuel[24];
				format(vehiclefuel, sizeof(vehiclefuel), "%d", VehicleData[vehicle][Vehicle_Fuel]);
				PlayerTextDrawSetString(playerid, SpeedBoxFuelAmount, vehiclefuel);
			}

			new speed[24];
			format(speed, sizeof(speed), "%i", GetVehicleSpeed(vehicle));
			PlayerTextDrawSetString(playerid, SpeedBoxSpeedAmount, speed);
		}
		else if(vehiclehealth <= 300)
		{
		    new string[156];

			if(engine == 1)
			{
				SetVehicleParamsEx(vehicle, false, lights, alarm, doors, bonnet, boot, objective);

			    format(string, sizeof(string), "> %s's vehicle has just turned off due to high damage", GetRPName(playerid));
	   			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

   				PlayerTextDrawSetString(playerid, SpeedBoxFuelAmount, "-");

   				KillTimer(Fuel_Timer[playerid]);
   				KillTimer(Vehicle_Timer[playerid]);

   				Fuel_Timer[playerid] = 0;
				Vehicle_Timer[playerid] = 0;

				printf("vehicle has turned off due to high damage");
			}
		}
    }
    return 1;
}

forward FuelTimer(playerid);
public FuelTimer(playerid)
{
 	new i = GetPlayerVehicleID(playerid);
 	
	if(VehicleData[i][Vehicle_Fuel] > 1)
	{
	    VehicleData[i][Vehicle_Fuel] -= 1;
	}
	return 1;
}

forward FlashLights(vehicleid);
public FlashLights(vehicleid) 
{
    new VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:doors, VEHICLE_LIGHT_STATUS:lights, VEHICLE_TIRE_STATUS:tires;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

    switch(Vehicle_Flash[vehicleid])
    {
        case 0: { lights = VEHICLE_LIGHT_STATUS:1; UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires); }
 
        case 1: { lights = VEHICLE_LIGHT_STATUS:4; UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires); }
    }

    if(Vehicle_Flash[vehicleid] >=2) 
	{
		Vehicle_Flash[vehicleid] = 0;
	}
    else 
	{
		Vehicle_Flash[vehicleid] ++;
	}
	return 1;
}

forward AssistanceTimer(playerid);
public AssistanceTimer(playerid)
{
	HasPlayerRequestAssistance[playerid] = 0;
	return 1;
}

forward DrugBakingCooldownTimer(playerid);
public DrugBakingCooldownTimer(playerid)
{
	HasPlayerBakedDrugs[playerid] = 0;
	return 1;
}

forward DrugBakingHeroin(playerid);
public DrugBakingHeroin(playerid)
{
	if(HasPlayerBakedDrugs[playerid] == 1)
	{
		TogglePlayerControllable(playerid, true);
		
		PlayerData[playerid][Character_Has_Drugs] -= 2;
		PlayerData[playerid][Character_Drug_Heroin] += 12;
						
		new updatequery[2000];
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_drug_heroin` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Drug_Heroin], GetName(playerid));
		mysql_tquery(connection, updatequery);
							
		new string[256];
		format(string, sizeof(string), "> %s has successfully created some heroin drugs", GetRPName(playerid));
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, false, false, false, false, 0, SYNC_ALL);
							
		new dstring[256];
		format(dstring, sizeof(dstring), "- You have just obtained 12 heroin packets, you can either /giveitem or /usedrugs!");
		SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
		DrugBaking_Timer[playerid] = SetTimerEx("DrugBakingTimer", 600000, false, "i", playerid);
	}
	return 1;
}

forward DrugBakingCocaine(playerid);
public DrugBakingCocaine(playerid)
{
	if(HasPlayerBakedDrugs[playerid] == 1)
	{
		TogglePlayerControllable(playerid, true);
		
		PlayerData[playerid][Character_Has_Drugs] -= 1;
		PlayerData[playerid][Character_Drug_Cocaine] += 20;
						
		new updatequery[2000];
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_drug_cocaine` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Drug_Cocaine], GetName(playerid));
		mysql_tquery(connection, updatequery);
							
		new string[256];
		format(string, sizeof(string), "> %s has successfully created some cocaine drugs", GetRPName(playerid));
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, false, false, false, false, 0, SYNC_ALL);
							
		new dstring[256];
		format(dstring, sizeof(dstring), "- You have just obtained 20 cocaine packets, you can either /givedrugs or /usedrugs!");
		SendClientMessage(playerid, COLOR_YELLOW, dstring);
							
		DrugBaking_Timer[playerid] = SetTimerEx("DrugBakingCooldownTimer", 600000, false, "i", playerid);
	}
	return 1;
}

forward DrugUseCooldown(playerid);
public DrugUseCooldown(playerid)
{
	new weather;
	weather = GetWeather();
	
	SetPlayerWeather(playerid, weather);
	SetPlayerDrunkLevel(playerid, 0);
	ClearAnimations(playerid);
	return 1;
}	
		
forward WeaponPartBuilder(playerid);
public WeaponPartBuilder(playerid)
{
	if(HasPlayerBuiltParts[playerid] == 0)
	{
		HasPlayerBuiltParts[playerid] = 1;
		
		TogglePlayerControllable(playerid, true);
		
		PlayerData[playerid][Character_Has_Gunpowder] -= 20;
		PlayerData[playerid][Character_Has_Metal] -= 20;
		PlayerData[playerid][Character_Has_Parts] += 30;
		
		new updatequery[2000];
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_gunpowder` = '%i', `character_has_metal` = '%i', `character_has_parts` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Gunpowder], PlayerData[playerid][Character_Has_Metal], PlayerData[playerid][Character_Has_Parts], GetName(playerid));
		mysql_tquery(connection, updatequery);
			
		new string2[256];		
		format(string2, sizeof(string2), "- You have just build some weapon parts out of your resources, use /buildweapon to make one");
		SendClientMessage(playerid, COLOR_YELLOW, string2);
						
		BuildPart_CooldownTimer[playerid] = SetTimerEx("BuildPartCooldownTimer", 240000, false, "i", playerid);
	} 
	return 1;
}

forward GunPowderSearch(playerid);
public GunPowderSearch(playerid)
{
	if(IsPlayerConnected(playerid))
	{	
		TogglePlayerControllable(playerid, true);
		
		PlayerData[playerid][Character_Has_Gunpowder] += 20;
		
		new updatequery[2000];
		mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_gunpowder` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Gunpowder], GetName(playerid));
		mysql_tquery(connection, updatequery);
			
		new string2[256];		
		format(string2, sizeof(string2), "- You have just found some gun powder, you can now use /buildparts to make weapon parts");
		SendClientMessage(playerid, COLOR_YELLOW, string2);
						
		GunPowder_Timer[playerid] = SetTimerEx("GunPowderCooldownTimer", 60000, false, "i", playerid);
	} 
	return 1;
}

forward WeaponBuildTimer(playerid);
public WeaponBuildTimer(playerid)
{
	if(HasPlayerBuiltWeapon[playerid] == 1)
	{
		HasPlayerBuiltWeapon[playerid] = 0;
	}
	return 1;
}

forward BuildPartCooldownTimer(playerid);
public BuildPartCooldownTimer(playerid)
{
	if(HasPlayerBuiltParts[playerid] == 1)
	{
		HasPlayerBuiltParts[playerid] = 0;
	}
	return 1;
}
				
forward GunPowderCooldownTimer(playerid);
public GunPowderCooldownTimer(playerid)
{
	if(HasPlayerFoundGunPowder[playerid] == 1)
	{
		HasPlayerFoundGunPowder[playerid] = 0;
	}
	return 1;
}

forward MetalDealerCooldownTimer(playerid);
public MetalDealerCooldownTimer(playerid)
{
	if(HasPlayerTakenMetal[playerid] == 1)
	{
		HasPlayerTakenMetal[playerid] = 0;
	}
	return 1;
}

forward CrackDealerCooldownTimer(playerid);
public CrackDealerCooldownTimer(playerid)
{
	if(HasPlayerTakenDrugs[playerid] == 1)
	{
		HasPlayerTakenDrugs[playerid] = 0;
	}
	return 1;
}

forward Cooldown_Helpme_Timer(playerid);
public Cooldown_Helpme_Timer(playerid)
{
	if(IsPlayerInHelpMeCooldown[playerid] == 1)
	{
		IsPlayerInHelpMeCooldown[playerid] = 0;
	}
	return 1;
}

forward Rob247_Cooldown_Timer(playerid);
public Rob247_Cooldown_Timer(playerid)
{
	if(HasPlayerRobbed247Store[playerid] > 0)
	{
		new amountrobbed, string[256];
		amountrobbed = 1 + random(250);
		PlayerData[playerid][Character_Money] += amountrobbed;
		
		new text_value1[256];
		format(text_value1, sizeof(text_value1), "~g~~h~+$%d", amountrobbed);
		GameTextForPlayer(playerid, text_value1, 3000, 1);

		format(string, sizeof(string), "- You have just stolen $%d.00 worth of money from the register, get out of there before the cops show up!", amountrobbed);
		SendClientMessage(playerid, COLOR_YELLOW, string);
					
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}

forward RobSM_Cooldown_Timer(playerid);
public RobSM_Cooldown_Timer(playerid)
{
	if(HasPlayerRobbedSupermarket[playerid] > 0)
	{
		new amountrobbed, string[256];
		amountrobbed = 1 + random(250);
		PlayerData[playerid][Character_Money] += amountrobbed;
		
		new text_value1[256];
		format(text_value1, sizeof(text_value1), "~g~~h~+$%d", amountrobbed);
		GameTextForPlayer(playerid, text_value1, 3000, 1);

		format(string, sizeof(string), "- You have just stolen $%d.00 worth of money from the register, get out of there before the cops show up!", amountrobbed);
		SendClientMessage(playerid, COLOR_YELLOW, string);
					
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}

forward RobES_Cooldown_Timer(playerid);
public RobES_Cooldown_Timer(playerid)
{
	if(HasPlayerRobbedElectronics[playerid] > 0)
	{
		new amountrobbed, string[256];
		amountrobbed = 1 + random(250);
		PlayerData[playerid][Character_Money] += amountrobbed;
		
		new text_value1[256];
		format(text_value1, sizeof(text_value1), "~g~~h~+$%d", amountrobbed);
		GameTextForPlayer(playerid, text_value1, 3000, 1);

		format(string, sizeof(string), "- You have just stolen $%d.00 worth of money from the register, get out of there before the cops show up!", amountrobbed);
		SendClientMessage(playerid, COLOR_YELLOW, string);
					
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}

forward KickTimer(playerid);
public KickTimer(playerid)
{
	Kick(playerid);
	return 1;
}

forward HotWireTimer(playerid);
public HotWireTimer(playerid)
{
	if(IsPlayerStealingCar[playerid] > 0)
	{
		new vid;
		new Float:vPos[3];

		vid = GetClosestVehicle(playerid);
		GetVehiclePos(vid, vPos[0],vPos[1],vPos[2]);
		
		ClearAnimations(playerid);
		
		PutPlayerInVehicle(playerid, vid, 0);

        new string[256];
		format(string, sizeof(string), "> %s has successfully broken into a vehicle", GetRPName(playerid));
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	}
	return 1;
}

forward RepairTimer(playerid);
public RepairTimer(playerid)
{
	if(PlayerData[playerid][Character_Faction] == 8 && DudefixJob == 1 && DudefixJobAccepted == 1)
	{
	    ClearAnimations(playerid);
	    
     	DestroyDynamicObject(DudeFixObjectOne);
     	DestroyDynamicObject(DudeFixObjectTwo);
     	DestroyDynamicObject(DudeFixObjectThree);
     	DestroyDynamicObject(DudeFixObjectFour);
     	
     	DudefixJob = 0;
     	DudefixJobAccepted = 0;
		DudefixJobID = 0;
		
		DudefixJobTimer = 0;
		DudefixJobTimerExp = 0;

	    for (new i = 0; i < MAX_PLAYERS; i++)
		{
			DudefixJobPlayer[playerid] = 0;
		}

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} An Engineer has completed a pipe repair job. Well done %s!", GetName(playerid));
		SendFactionRadioMessage(8, COLOR_LIGHTSEAGREEN, dstring);

		PlayerData[playerid][Character_Money] += 6000;
		
		new text_value1[256];
		format(text_value1, sizeof(text_value1), "~g~~h~+$6000");
		GameTextForPlayer(playerid, text_value1, 3000, 1);

		print("Dudefix Job Completed");

        KillTimer(Repair_Timer[playerid]);
        Repair_Timer[playerid] = 0;
	}
    if(PlayerData[playerid][Character_Faction] == 9 && MechanicJob == 1 && MechanicJobAccepted == 1)
	{
		if(MechanicJobHealth < 100)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 10.0, VehicleData[MechanicJobID][Vehicle_Spawn_X], VehicleData[MechanicJobID][Vehicle_Spawn_Y], VehicleData[MechanicJobID][Vehicle_Spawn_Z]))
		    {
		        MechanicJobHealth += 10;

                new dstring[256];
				format(dstring, sizeof(dstring), "- Vehicle Repair Status: %d/100", MechanicJobHealth);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);

		        printf("Mechanic Job Repair Status: %d", MechanicJobHealth);
		    }
		}
		else if(MechanicJobHealth == 100)
		{
		    MechanicJob = 0;
		    MechanicJobHealth = 0;
		    MechanicJobID = 0;
			MechanicJobAccepted = 0;

		    for (new i = 0; i < MAX_PLAYERS; i++)
			{
				MechanicJobPlayer[playerid] = 0;
			}

		    new dstring[256];
			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} A mechanic has completed a vehicle repair job. Well done %s!", GetName(playerid));
			SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

			PlayerData[playerid][Character_Money] += 3500;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$3500");
			GameTextForPlayer(playerid, text_value1, 3000, 1);
			
		    ClearAnimations(playerid);
            TogglePlayerControllable(playerid, true);

			print("Mechanic Job Completed");

            KillTimer(Repair_Timer[playerid]);
            Repair_Timer[playerid] = 0;
		}
	}
	return 1;
}

forward MinuteTimer();
public MinuteTimer()
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(IsPlayerConnected(i))
		{ 
			if(PlayerData[i][Character_Minutes] == 60)
		    {
		        CallPayDayCheck(i);
		        
		        PlayerData[i][Character_Minutes] = 0;
		        PlayerData[i][Character_Level_Exp] += 1;
		    }
		    if(PlayerData[i][Character_Minutes] >= 0 )
		    {
		        PlayerData[i][Character_Minutes] += 1;
		    }
		    if(PlayerData[i][Admin_Jail_Time] > 0)
		    {
		        PlayerData[i][Admin_Jail_Time] --;
		    }
		    if(PlayerData[i][Character_Jail_Time] > 0)
		    {
		        PlayerData[i][Character_Jail_Time] --;
		    }
		    if(PlayerData[i][Admin_Jail_Time] == 0 && PlayerData[i][Admin_Jail] == 1)
		    {
		        new emptystring[50] = "";

				PlayerData[i][Admin_Jail] = 0;
				PlayerData[i][Admin_Jail_Time] = 0;
				PlayerData[i][Admin_Jail_Reason] = emptystring;
				
		        SetPlayerPos(i, 811.2561, -1098.2684, 25.9063);
				SetPlayerFacingAngle(i, 240.8300);

				SetPlayerInterior(i, 0);
				SetPlayerVirtualWorld(i, 0);
				
				SetPlayerSkin(i, PlayerData[i][Character_Skin_1]);

				SendClientMessage(i, COLOR_RED, "[SERVER]: {FFFFFF}You have just completed your admin jail sentence. You have been spawned at the Los Santos Cemetery with you Preset Skin!");
		    }
		    if(PlayerData[i][Character_Jail_Time] == 0 && PlayerData[i][Character_Jail] == 1)
		    {
		        new emptystring[50] = "";

                PlayerData[i][Character_Jail] = 0;
				PlayerData[i][Character_Jail_Time] = 0;
				PlayerData[i][Character_Jail_Reason] = emptystring;

		        SetPlayerPos(i, 1489.0377,-1720.4855,8.2340);
				SetPlayerFacingAngle(i, 169.0772);

				SetPlayerInterior(i, 0);
				SetPlayerVirtualWorld(i, 0);

				SetPlayerSkin(i, PlayerData[i][Character_Skin_1]);

				SendClientMessage(i, COLOR_RED, "[SERVER]: {FFFFFF}You have just completed your prison sentence, you will have police follow up upon your release!");
		    }
		}
	}
	return 1;
}

forward LevelUp(playerid);
public LevelUp(playerid)
{
	if(PlayerData[playerid][Character_Level] >= 0)
	{
		new dstring[256], coins;
					
	    PlayerData[playerid][Character_Level] += 1;
	    PlayerData[playerid][Character_Level_Exp] = 0;
	    SetPlayerScore(playerid, PlayerData[playerid][Character_Level]);
				
		if(PlayerData[playerid][Character_VIP] != 0)
		{
			coins = 30;
		}
		else if(PlayerData[playerid][Character_VIP] == 0)
		{
			coins = 10;
		}
				
		PlayerData[playerid][Character_Coins] += coins;
	    
	    format(dstring,sizeof(dstring),"{33CC99}[ACHIEVEMENT]: %s has just leveled up to level %d | Congratulations (Earned: %d Coins)", GetName(playerid), PlayerData[playerid][Character_Level], coins);
        SendClientMessageToAll(-1,dstring);
	}
	return 1;
}

forward CallPayDayCheck(playerid);
public CallPayDayCheck(playerid)
{
	if(PlayerData[playerid][Character_Level] >= 0)
	{
	    new paydaystd, paydayamt, dstring[256], tstring[256];

		paydayamt = 0;
		paydaystd = 1500;
		
		format(tstring,sizeof(tstring),"*** {33CC99}%s Paycheck{FFFFFF} ***", GetName(playerid));
		SendClientMessage(playerid, COLOR_WHITE, tstring);

     	if(PlayerData[playerid][Character_Level] >= 0 && PlayerData[playerid][Character_Faction] == 0)
	    {
			paydayamt = paydaystd + floatround(paydaystd * 0.05);
			PlayerData[playerid][Character_Money] += paydayamt;

            format(dstring,sizeof(dstring),"{33CC99}[Earnings]:{FFFFFF} $%d ", paydayamt);
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    }
	    else if(PlayerData[playerid][Character_Level] >= 0 && PlayerData[playerid][Character_Faction] > 0 && PlayerData[playerid][Character_Faction_Rank] == 1)
		{
			paydayamt = paydaystd + floatround(paydaystd * 0.10);
			PlayerData[playerid][Character_Money] += paydayamt;

            format(dstring,sizeof(dstring),"{33CC99}[Earnings]:{FFFFFF} $%d ", paydayamt);
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    }
	    else if(PlayerData[playerid][Character_Level] >= 0 && PlayerData[playerid][Character_Faction] > 0 && PlayerData[playerid][Character_Faction_Rank] == 2)
	    {
			paydayamt = paydaystd + floatround(paydaystd * 0.12);
			PlayerData[playerid][Character_Money] += paydayamt;

            format(dstring,sizeof(dstring),"{33CC99}[Earnings]:{FFFFFF} $%d ", paydayamt);
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    }
	    else if(PlayerData[playerid][Character_Level] >= 0 && PlayerData[playerid][Character_Faction] > 0 && PlayerData[playerid][Character_Faction_Rank] == 3)
	    {
			paydayamt = paydaystd + floatround(paydaystd * 0.15);
			PlayerData[playerid][Character_Money] += paydayamt;

            format(dstring,sizeof(dstring),"{33CC99}[Earnings]:{FFFFFF} $%d ", paydayamt);
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    }
	    else if(PlayerData[playerid][Character_Level] >= 0 && PlayerData[playerid][Character_Faction] > 0 && PlayerData[playerid][Character_Faction_Rank] == 4)
	    {
			paydayamt = paydaystd + floatround(paydaystd * 0.18);
			PlayerData[playerid][Character_Money] += paydayamt;

            format(dstring,sizeof(dstring),"{33CC99}[Earnings]:{FFFFFF} $%d ", paydayamt);
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    }
	    else if(PlayerData[playerid][Character_Level] >= 0 && PlayerData[playerid][Character_Faction] > 0 && PlayerData[playerid][Character_Faction_Rank] == 5)
	    {
			paydayamt = paydaystd + floatround(paydaystd * 0.25);
			PlayerData[playerid][Character_Money] += paydayamt;

            format(dstring,sizeof(dstring),"{33CC99}[Earnings]:{FFFFFF} $%d ", paydayamt);
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
    
	    }
	    else if(PlayerData[playerid][Character_Level] >= 0 && PlayerData[playerid][Character_Faction] > 0 && PlayerData[playerid][Character_Faction_Rank] == 6)
	    {
			paydayamt = paydaystd + floatround(paydaystd * 0.30);
			PlayerData[playerid][Character_Money] += paydayamt;

            format(dstring,sizeof(dstring),"{33CC99}[Earnings]:{FFFFFF} $%d ", paydayamt);
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------");
	}
	return 1;
}

forward DoorDelayTimer(playerid);
public DoorDelayTimer(playerid)
{
 	TogglePlayerControllable(playerid,true);
	return 1;
}

forward DragTimer(playerid);
public DragTimer(playerid)
{
	if(IsPlayerDragged[playerid] == 1)
	{
	 	new targetid;
		targetid = WhoIsDragging[playerid];
		    
		new Float:x, Float:y, Float:z;
		    
		GetPlayerPos(targetid, x, y, z);
		SetPlayerPos(playerid, x, y, z);
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
		SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	}
	return 1;
}

forward TutorialRunThroughOne(playerid);
public TutorialRunThroughOne(playerid)
{
	if(TutorialStep[playerid] == 1) // Welcome View
	{		
		PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw6);
		PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw3);
		
		SetPlayerPos(playerid, 1498.1106,-1777.5406,33.4243);
		InterpolateCameraPos(playerid, 1490.4210,-1760.6130,52.7959, 1490.4210,-1760.6130,52.7959, 6000,CAMERA_MOVE);
	 	InterpolateCameraLookAt(playerid, 1552.5576,-1660.5062,13.5583, 1552.5576,-1660.5062,13.5583, 6000,CAMERA_MOVE);
		
		new tdstring1[500];
	    format(tdstring1, sizeof(tdstring1), "~y~Introduction");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw1, tdstring1);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw1);
		
		new tdstring2[500];
	    format(tdstring2, sizeof(tdstring2), "~w~Welcome to our Open.MP community, where we bring back the good old days of roleplay where you can walk down the street without getting hounded by staff teams to roleplay having a smoke!");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw2, tdstring2);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw2);
		
		TutorialStep[playerid] = 2;
		
		Tutorial_Timer[playerid] = SetTimerEx("TutorialRunThroughTwo", 15000, false, "i", playerid);
	}
	return 1;
}

forward TutorialRunThroughTwo(playerid);
public TutorialRunThroughTwo(playerid)
{
	if(TutorialStep[playerid] == 2) // Factions View
	{		
		SetPlayerPos(playerid, 1723.8267,-1671.6674,42.4790);
		InterpolateCameraPos(playerid, 1720.0977,-1741.8243,31.3696, 1720.0977,-1741.8243,31.3696, 6000,CAMERA_MOVE);
	 	InterpolateCameraLookAt(playerid, 1781.0421,-1702.3180,16.7503, 1781.0421,-1702.3180,16.7503, 6000,CAMERA_MOVE);
		
		new tdstring1[500];
	    format(tdstring1, sizeof(tdstring1), "~y~Factions");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw1, tdstring1);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw1);
		
		new tdstring2[500];
	    format(tdstring2, sizeof(tdstring2), "~w~Our faction system is very different to anything you may of seen before. Our faction system is completly player run, ofcourse not government factions, but you can still purchase factions, sell them and even join them without having to go on a forum!");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw2, tdstring2);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw2);
		
		TutorialStep[playerid] = 3;
		
		Tutorial_Timer[playerid] = SetTimerEx("TutorialRunThroughThree", 15000, false, "i", playerid);
	}
	return 1;
}

forward TutorialRunThroughThree(playerid);
public TutorialRunThroughThree(playerid)
{
	if(TutorialStep[playerid] == 3) // Jobs View
	{		
		SetPlayerPos(playerid, 975.6169,-1470.1859,21.3903);
		InterpolateCameraPos(playerid, 985.2562,-1448.8083,13.5473, 985.2562,-1448.8083,13.5473, 6000,CAMERA_MOVE);
	 	InterpolateCameraLookAt(playerid, 1020.9980,-1460.1835,13.5513, 1020.9980,-1460.1835,13.5513, 6000,CAMERA_MOVE);
		
		new tdstring1[500];
	    format(tdstring1, sizeof(tdstring1), "~y~Jobs");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw1, tdstring1);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw1);
		
		new tdstring2[500];
	    format(tdstring2, sizeof(tdstring2), "~w~Explore our jobs while you're here too, we allow our players to have a unique experience with jobs, so instead of just going to a check point and earning money, you have to complete tasks. Like our electrician job, you need to go around fixing street lights!");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw2, tdstring2);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw2);
		
		TutorialStep[playerid] = 4;
		
		Tutorial_Timer[playerid] = SetTimerEx("TutorialRunThroughFour", 15000, false, "i", playerid);
	}
	return 1;
}

forward TutorialRunThroughFour(playerid);
public TutorialRunThroughFour(playerid)
{
	if(TutorialStep[playerid] == 4) // Final View
	{		
		SetPlayerPos(playerid, 1383.8701,-1362.0443,35.6484);
		InterpolateCameraPos(playerid, 1337.4446,-1374.2196,35.5881, 1337.4446,-1374.2196,35.5881, 6000,CAMERA_MOVE);
	 	InterpolateCameraLookAt(playerid, 1366.2925,-1448.0773,23.5934, 1366.2925,-1448.0773,23.5934, 6000,CAMERA_MOVE);

		new tdstring1[500];
	    format(tdstring1, sizeof(tdstring1), "~y~Overview");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw1, tdstring1);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw1);
		
		new tdstring2[500];
	    format(tdstring2, sizeof(tdstring2), "~w~Beyond jobs and factions, you can find driving schools to hone your skills, junkyards to explore, and more. Need a phone? Head to an electronic store. Looking for a weapon license? Visit City Hall. For any assistance, use /helpme, and if you need to report a player, simply type /report. Make the most of your experience with us!");
		PlayerTextDrawSetString(playerid, PlayerText:TutorialTextdraw2, tdstring2);
		PlayerTextDrawShow(playerid, PlayerText:TutorialTextdraw2);
		
		TutorialStep[playerid] = 5;
		
		Tutorial_Timer[playerid] = SetTimerEx("TutorialRunThroughFive", 15000, false, "i", playerid);
	}
	return 1;
}

forward TutorialRunThroughFive(playerid);
public TutorialRunThroughFive(playerid)
{
	if(TutorialStep[playerid] == 5)
	{
		TogglePlayerSpectating(playerid, false);
	        
	    ClearMessages(playerid);
	        
	    RegistrationSpawn(playerid);
	
		PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw1);
		PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw2);
		PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw5);
		PlayerTextDrawHide(playerid, PlayerText:LoginTextdraw4);
		PlayerTextDrawHide(playerid, PlayerText:TutorialTextdraw1);
		PlayerTextDrawHide(playerid, PlayerText:TutorialTextdraw2);
		
		KillTimer(Tutorial_Timer[playerid]);
	}
	return 1;
}

forward SetServerTimeForAll();
public SetServerTimeForAll()
{
    if(SERVER_SECOND < 60)
	{
	    SERVER_SECOND += 1;
	}
	if(SERVER_SECOND == 60)
	{
	    SERVER_MINUTE += 1;
	    SERVER_SECOND = 00;
	    return 1;
	}
	if(SERVER_MINUTE == 60)
	{
	    SERVER_HOUR += 1;
	    SERVER_MINUTE = 00;
	    SERVER_SECOND = 00;
	    return 1;
	}
	if(SERVER_HOUR == 24)
	{
	    SERVER_SECOND = 00;
	    SERVER_MINUTE = 00;
	    SERVER_HOUR =  00;
	    return 1;
	}

	new string[256];
	format(string, sizeof string, "~w~%s%d:%s%d", (SERVER_HOUR < 10) ? ("0") : (""), SERVER_HOUR, (SERVER_MINUTE < 10) ? ("0") : (""), SERVER_MINUTE);
 	TextDrawSetString(Time, string);

	if(SERVER_HOUR == 00)
	{
		SetWorldTime(0);
	}
	if(SERVER_HOUR == 4)
	{
		SetWorldTime(4);
	}
	if(SERVER_HOUR == 8)
	{
		SetWorldTime(8);
	}
	if(SERVER_HOUR == 12)
	{
		SetWorldTime(12);
	}
	if(SERVER_HOUR == 16)
	{
		SetWorldTime(16);
	}
	if(SERVER_HOUR == 20)
	{
		SetWorldTime(20);
	}

	return 1;
}

forward LSFD_JOB_HOUSE_FIRE();
public LSFD_JOB_HOUSE_FIRE()
{
	if(LSFDJobHouseFire == 0 && LSFDJobHouseFireAccepted == 0)
	{
	    new randomNumber = GetValidHouseJobNumber();
	    
	    LSFDJobHouseFire = 1;
	    LSFDJobHouseFireHealth = 100;
	    LSFDJobHouseFireID = randomNumber;
	    
	    LSFDJobHouseFireObject = CreateObject(18691, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z]-2.61, 0, 0, 0.0);
	    LSFDJobHouseSmokeObject = CreateObject(18715, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z], 0, 0, 0.0);

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} There is a gas explosion at a property, huge fire has risen! [/acceptjob]");
		SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);

		print("LSFD Job Fire Created");
	}
	return 1;
}

forward EXP_LSFD_JOB_HOUSE_FIRE();
public EXP_LSFD_JOB_HOUSE_FIRE()
{
	if(LSFDJobHouseFire == 1 && LSFDJobHouseFireAccepted == 0)
	{
	    LSFDJobHouseFire = 0;
	    LSFDJobHouseFireHealth = 0;
	    LSFDJobHouseFireID = 0;
	    
	    DestroyObject(LSFDJobHouseFireObject);
	    DestroyObject(LSFDJobHouseSmokeObject);
	    
	    LSFDJobHouseFireObject = 0;
	    LSFDJobHouseSmokeObject = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We just had a call that the house has burnt down! LSFD has failed this task");
		SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);

		print("LSFD Job Fire Failed 1");
	}
	else if(LSFDJobHouseFire == 1 && LSFDJobHouseFireAccepted == 1 && LSFDJobHouseFireHealth == 100)
	{
	    LSFDJobHouseFire = 0;
	    LSFDJobHouseFireAccepted = 0;
	    LSFDJobHouseFireHealth = 0;
	    LSFDJobHouseFireID = 0;

	    DestroyObject(LSFDJobHouseFireObject);
	    DestroyObject(LSFDJobHouseSmokeObject);

	    LSFDJobHouseFireObject = 0;
	    LSFDJobHouseSmokeObject = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We just had a call that the house has burnt down! LSFD has failed this task");
		SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);

		print("LSFD Job Fire Failed 2");
	}
	else if(LSFDJobHouseFire == 1 && LSFDJobHouseFireAccepted == 1 && LSFDJobHouseFireHealth > 0 && LSFDJobHouseFireHealth < 100)
	{
	    LSFDJobHouseFire = 0;
	    LSFDJobHouseFireAccepted = 0;
	    LSFDJobHouseFireHealth = 0;
	    LSFDJobHouseFireID = 0;

	    DestroyObject(LSFDJobHouseFireObject);
	    DestroyObject(LSFDJobHouseSmokeObject);
	    
	    LSFDJobHouseFireObject = 0;
	    LSFDJobHouseSmokeObject = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} We just had a call that the house has burnt down! LSFD has failed this task");
		SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);

		print("LSFD Job Fire Failed 3");
	}
	else if(LSFDJobHouseFire == 0 && LSFDJobHouseFireAccepted == 0)
	{
	    print("LSFD Job Fire Finished - Timer Restarted");
	}
	return 1;
}

forward LSPD_JOB_HOUSE_INSPECTION();
public LSPD_JOB_HOUSE_INSPECTION()
{
	if(LSPDJobHouseInspection == 0 && LSPDJobHouseInspectionAccepted == 0)
	{
	    LSPDJobHouseInspection = 1;
	    
	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} An by stander has called in a report on illegal activty at a house, please investigate! [/acceptjob 1]");
		SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
		
		print("LSPD Job Created");
	}
	return 1;
}

forward EXP_LSPD_JOB_HOUSE_INSPECTION();
public EXP_LSPD_JOB_HOUSE_INSPECTION()
{
	if(LSPDJobHouseInspection == 1 && LSPDJobHouseInspectionAccepted == 0)
	{
	    LSPDJobHouseInspection = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} The people have no left the area! LSPD has failed this task");
		SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
		
		print("LSPD Job Failed 1");
	}
	else if(LSPDJobHouseInspection == 1 && LSPDJobHouseInspectionAccepted == 1)
	{
	    LSPDJobHouseInspection = 0;
	    LSPDJobHouseInspectionAccepted = 0;
	    
	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} The security company has already arrived on scene and cleared the job! LSPD has failed this task");
		SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
		
		print("LSPD Job Failed 2");
	}
	else if(LSPDJobHouseInspection == 0 && LSPDJobHouseInspectionAccepted == 0)
	{
	    print("LSPD Job Needs Creating");
	}
	return 1;
}

forward DUDEFIX_JOB_PIPE_BLAST();
public DUDEFIX_JOB_PIPE_BLAST()
{
	if(DudefixJob == 0 && DudefixJobAccepted == 0)
	{
	    new randomNumber;
		randomNumber = random(3) + 1;

        DudefixJob = 1;
	    DudefixJobID = randomNumber;
	    
	    if(DudefixJobID == 1)
	    {
	        DudeFixObjectOne = CreateDynamicObject(3865, 1352.17017, -1397.91748, 12.25227,   26.52001, 71.70001, 116.57999);
			DudeFixObjectTwo = CreateDynamicObject(746, 1352.20020, -1395.06470, 12.38176,   0.00000, 0.00000, 0.00000);
			DudeFixObjectThree = CreateDynamicObject(746, 1354.84485, -1398.43799, 12.38176,   0.00000, 0.00000, 0.00000);
			DudeFixObjectFour = CreateDynamicObject(746, 1348.37390, -1399.37317, 10.53745,   0.00000, 0.00000, 0.00000);
			DudeFixObjectFive = CreateDynamicObject(18739, 1348.43408, -1399.46362, 12.73625,   0.00000, 0.00000, 0.00000);
		}
		else if(DudefixJobID == 2)
	    {
            DudeFixObjectOne = CreateDynamicObject(3865, 1527.92517, -1671.25366, 11.39843,   14.40001, 10.56000, -139.56006);
			DudeFixObjectTwo = CreateDynamicObject(746, 1527.42981, -1673.72827, 12.37432,   0.00000, 0.00000, 0.00000);
			DudeFixObjectThree = CreateDynamicObject(746, 1532.23157, -1673.28320, 12.37579,   0.00000, 0.00000, 0.00000);
			DudeFixObjectFour = CreateDynamicObject(746, 1526.41724, -1668.61755, 12.37671,   0.00000, 0.00000, 0.00000);
			DudeFixObjectFive = CreateDynamicObject(18739, 1530.20593, -1674.75037, 12.37378,   0.00000, 0.00000, 0.00000);
		}
		else if(DudefixJobID == 3)
	    {
            DudeFixObjectOne = CreateDynamicObject(3865, 2092.47217, -1751.63062, 14.03432,   46.67999, -10.44001, 0.00000);
			DudeFixObjectTwo = CreateDynamicObject(746, 2090.65234, -1753.89099, 12.38976,   0.00000, 0.00000, 0.00000);
			DudeFixObjectThree = CreateDynamicObject(746, 2091.60034, -1749.64600, 12.39043,   0.00000, 0.00000, 0.00000);
			DudeFixObjectFour = CreateDynamicObject(746, 2094.53247, -1751.27051, 12.39093,   0.00000, 0.00000, 0.00000);
			DudeFixObjectFive = CreateDynamicObject(18739, 2093.98975, -1753.59204, 12.87132,   0.00000, 0.00000, 0.00000);
		}

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} A pipe has burst in the streets of Los Santos, go fix it! [/acceptjob]");
		SendFactionRadioMessage(8, COLOR_LIGHTSEAGREEN, dstring);

		print("Dudefix Job Created");
	}
	return 1;
}

forward EXP_DUDEFIX_JOB_PIPE_BLAST();
public EXP_DUDEFIX_JOB_PIPE_BLAST()
{
	if(DudefixJob == 1 && DudefixJobAccepted == 0)
	{
	    DudefixJob = 0;
     	DudefixJobID = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Another company has come through and cleaned up the streets! This company has failed this task");
		SendFactionRadioMessage(8, COLOR_LIGHTSEAGREEN, dstring);
		
		DestroyDynamicObject(DudeFixObjectOne);
     	DestroyDynamicObject(DudeFixObjectTwo);
     	DestroyDynamicObject(DudeFixObjectThree);
     	DestroyDynamicObject(DudeFixObjectFour);
		DestroyDynamicObject(DudeFixObjectFive);

		print("Dudefix Job Failed 1");
	}
	else if(DudefixJob == 1 && DudefixJobAccepted == 1 && DudefixJobCompleted == 0)
	{
	    DudefixJob = 0;
	    DudefixJobAccepted = 0;
     	DudefixJobCompleted = 0;
     	DudefixJobID = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Another company has come through and cleaned up the streets! This company has failed this task");
		SendFactionRadioMessage(8, COLOR_LIGHTSEAGREEN, dstring);
		
		DestroyDynamicObject(DudeFixObjectOne);
     	DestroyDynamicObject(DudeFixObjectTwo);
     	DestroyDynamicObject(DudeFixObjectThree);
     	DestroyDynamicObject(DudeFixObjectFour);
		DestroyDynamicObject(DudeFixObjectFive);

		print("Dudefix Job Failed 2");
	}
	else if(DudefixJob == 0 && DudefixJobAccepted == 0)
	{
	    print("Dudefix Job Needs Creating");
	}
	return 1;
}

forward MECHANIC_JOB_VEHICLE_HEALTH();
public MECHANIC_JOB_VEHICLE_HEALTH()
{
	if(MechanicJob == 0 && MechanicJobAccepted == 0)
	{
	    new randomNumber = GetValidMechanicJobNumber();

	    MechanicJob = 1;
     	MechanicJobHealth = 0;
     	MechanicJobID = randomNumber;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} A vehicle has been called in requiring repairs! [/acceptjob]");
		SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

		print("Mechanic Job Created");
	}
	return 1;
}

forward EXP_MECHANIC_JOB_VEHICLE_HEALTH();
public EXP_MECHANIC_JOB_VEHICLE_HEALTH()
{
	if(MechanicJob == 1 && MechanicJobAccepted == 0)
	{
	    MechanicJob = 0;
     	MechanicJobHealth = 0;
     	MechanicJobID = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} The vehicle job that came through has been found burnt out! This company has failed this task");
		SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

		print("Mechanic Job Failed 1");
	}
	else if(MechanicJob == 1 && MechanicJobAccepted == 1 && MechanicJobHealth == 0)
	{
	    MechanicJob = 0;
	    MechanicJobAccepted = 0;
     	MechanicJobHealth = 0;
     	MechanicJobID = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} The vehicle has been passed onto another company! This company has failed this task");
		SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

		print("Mechanic Job Failed 2");
	}
	else if(MechanicJob == 1 && MechanicJobAccepted == 1 && MechanicJobHealth > 0 && MechanicJobHealth < 100)
	{
	    MechanicJob = 0;
	    MechanicJobAccepted = 0;
     	MechanicJobHealth = 0;
     	MechanicJobID = 0;

	    new dstring[256];
		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} The vehicle has been passed onto another company! This company has failed this task");
		SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

		print("Mechanic Job Failed 2");
	}
	else if(MechanicJob == 0 && MechanicJobAccepted == 0)
	{
	    print("Mechanic Job Needs Creating");
	}
	return 1;
}

forward INFO_TEXTDRAW_TIMER();
public INFO_TEXTDRAW_TIMER()
{
	foreach(new i : Player)	
	//for(new i; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerLogged[i] == 1)
		{
		    if(PlayerData[i][Character_Registered] == 1)
		    {
				if(IsPlayerSeeingTextdraw[i] > 1)
				{
					IsPlayerSeeingTextdraw[i] --;
				}
				else if(IsPlayerSeeingTextdraw[i] == 1)
				{
					PlayerTextDrawHide(i, PlayerText:Notification_Textdraw);
					IsPlayerSeeingTextdraw[i] = 0;
				}
											
				if(IsPlayerInRangeOfPoint(i, 3.0, 2102.2109, -1789.1084, 13.5547)) // Pizza Delivery Point
				{
					if(PlayerData[i][Character_Job] != 1)
					{						
			            new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Pizza Delivery Job~n~~n~~w~Type ~y~/joinjob~w~ to join this team!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
									
						IsPlayerSeeingTextdraw[i] = 2;
				
				        //Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
					else if(PlayerData[i][Character_Job] == 1)
					{						
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Pizza Delivery Job~n~~n~~w~Type ~y~/startjob~w~ to start delivering pizzas!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
				
				        //Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
			    }
				else if(IsPlayerInRangeOfPoint(i, 3.0, 2201.1582,-1974.1382,13.5576)) // Garbage Job Point
			    {
					if(PlayerData[i][Character_Job] != 2)
					{
			            new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Garbage Collection Job~n~~n~~w~Type ~y~/joinjob~w~ to join this team!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);	
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
				
						IsPlayerSeeingTextdraw[i] = 2;
				
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
					else if(PlayerData[i][Character_Job] == 2)
					{
						new tdstring1[500];
				    	format(tdstring1, sizeof(tdstring1), "~y~Garbage Collection Job~n~~n~~w~Type ~y~/startjob~w~ to start collecting rubbish!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 992.1449,-1454.0868,13.5469)) // Electrician Job Point
				{
					if(PlayerData[i][Character_Job] != 3)
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Electrician Job~n~~n~~w~Type ~y~/joinjob~w~ to join this team!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
					else if(PlayerData[i][Character_Job] == 3)
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Electrician Job~n~~n~~w~Type ~y~/startjob~w~ to start a route!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 1810.1023,-1897.4574,13.5791)) // Taxi Job Point
				{
					if(PlayerData[i][Character_Job] != 4)
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Taxi Job~n~~n~~w~Type ~y~/joinjob~w~ to join this team!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
					else if(PlayerData[i][Character_Job] == 4)
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Taxi Job~n~~n~~w~Type ~y~/quitjob~w~ to leave this job!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 1544.5784,-1670.9464,13.5587)) // LSPD JOIN POINT
				{
					new tdstring1[500];
					format(tdstring1, sizeof(tdstring1), "~y~Los Santos Police Department~n~~n~~w~Type ~y~/joinfaction~w~ to apply!");
					PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
					PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
					IsPlayerSeeingTextdraw[i] = 2;
			
					//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 1755.8239,-1720.1548,13.3870)) // LSFD JOIN POINT
				{
					new tdstring1[500];
					format(tdstring1, sizeof(tdstring1), "~y~Los Santos Fire Department~n~~n~~w~Type ~y~/joinfaction~w~ to apply!");
					PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
					PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
					IsPlayerSeeingTextdraw[i] = 2;
			
					//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 1178.3011,-1328.0625,14.1133)) // LSMC JOIN POINT
				{
					new tdstring1[500];
					format(tdstring1, sizeof(tdstring1), "~y~Los Santos Medical Department~n~~n~~w~Type ~y~/joinfaction~w~ to apply!");
					PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
					PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
					IsPlayerSeeingTextdraw[i] = 2;
			
					//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 1498.2710,-1581.8063,13.5498))
				{
					if(PlayerData[i][Character_Hotel_ID] == 1)
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "~y~Trump Hotel~n~~n~~w~Tap ~y~Enter_Key~w~ To Use Door!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
					else
					{
						new tdstring2[500];
						format(tdstring2, sizeof(tdstring2), "~y~Trump Hotel~n~~n~~y~$250 ~w~for a room~n~~n~~y~/rent~w~ to purchase a room!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 267.2495,304.6546,999.1484))
				{
					new tdstring1[500];
					format(tdstring1, sizeof(tdstring1), "Tap ~y~Enter_Key~w~ To Use Door!");
					PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
					PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
					IsPlayerSeeingTextdraw[i] = 2;
			
					//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
				}
				for(new r = 1; r < MAX_DOORS; r++)
				{
					if(IsPlayerInRangeOfPoint(i, 1.0, DoorData[r][Door_Outside_X], DoorData[r][Door_Outside_Y], DoorData[r][Door_Outside_Z]))
					{
						if(PlayerData[i][Admin_Level] > 4)
						{
							new tdstring1[500];
							format(tdstring1, sizeof(tdstring1), "(Door ID: %i)~n~%s~n~~n~Tap ~y~Enter_Key~w~ To Use Door!", DoorData[r][Door_ID], DoorData[r][Door_Description]);
							PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
							IsPlayerSeeingTextdraw[i] = 2;
			
							//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
						}
						else
						{
							new tdstring2[500];
							format(tdstring2, sizeof(tdstring2), "%s~n~~n~Tap ~y~Enter_Key~w~ To Use Door!", DoorData[r][Door_Description]);
							PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
							PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
							IsPlayerSeeingTextdraw[i] = 2;
			
							//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
						}
					}
					if(IsPlayerInRangeOfPoint(i, 1.0, DoorData[r][Door_Inside_X], DoorData[r][Door_Inside_Y], DoorData[r][Door_Inside_Z]))
					{
						if(PlayerData[i][Admin_Level] > 4)
						{
							new tdstring1[500];
							format(tdstring1, sizeof(tdstring1), "(Door ID: %i)~n~~n~Tap ~y~Enter_Key~w~ To Use Door!", DoorData[r][Door_ID]);
							PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
							IsPlayerSeeingTextdraw[i] = 2;
			
							//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
						}
						else
						{
							new tdstring2[500];
							format(tdstring2, sizeof(tdstring2), "Tap ~y~Enter_Key~w~ To Use Door!");
							PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
							PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
							IsPlayerSeeingTextdraw[i] = 2;
			
							//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
						}
					}
				}
				for(new e = 1; e < MAX_FACTIONS; e++)
				{
					if(FactionData[e][Faction_Icon_X] != 0 && FactionData[e][Faction_Sold] == 0)
					{
						if(IsPlayerInRangeOfPoint(i, 3.0, FactionData[e][Faction_Icon_X], FactionData[e][Faction_Icon_Y], FactionData[e][Faction_Icon_Z]))
						{
							if(PlayerData[i][Admin_Level] > 4)
							{
								new tdstring1[500];
								format(tdstring1, sizeof(tdstring1), "(Faction ID: %i)~n~%s~n~~y~Cost: ~w~$%i ~p~(%i Coins)~n~~n~~y~/buyfaction~w~ to buy this faction!", FactionData[e][Faction_ID], FactionData[e][Faction_Name], FactionData[e][Faction_Price_Money], FactionData[e][Faction_Price_Coins]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
							else
							{
								new tdstring2[500];
								format(tdstring2, sizeof(tdstring2), "%s~n~~y~Cost: ~w~$%i ~p~(%i Coins)~n~~n~~y~/buyfaction~w~ to buy this faction!", FactionData[e][Faction_Name], FactionData[e][Faction_Price_Money], FactionData[e][Faction_Price_Coins]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
						}
					}
					if(FactionData[e][Faction_Icon_X] != 0 && FactionData[e][Faction_Sold] == 1 || FactionData[e][Faction_Sold] == 2)
					{
						if(IsPlayerInRangeOfPoint(i, 3.0, FactionData[e][Faction_Icon_X], FactionData[e][Faction_Icon_Y], FactionData[e][Faction_Icon_Z]))
						{
							if(PlayerData[i][Admin_Level] > 4)
							{
								new tdstring1[500];
								format(tdstring1, sizeof(tdstring1), "(Faction ID: %i)~n~%s~n~~n~~y~Status:~w~ Owned~n~~y~Owner:~w~ %s", FactionData[e][Faction_ID], FactionData[e][Faction_Name], FactionData[e][Faction_Owner]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
							else
							{
								new tdstring2[500];
								format(tdstring2, sizeof(tdstring2), "%s~n~~n~~y~Status:~w~ Owned~n~~y~Owner:~w~ %s",FactionData[e][Faction_Name], FactionData[e][Faction_Owner]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
						}
					}
				}
				for(new w = 1; w < MAX_HOUSES; w++)
				{
					if(HouseData[w][House_Outside_X] != 0 && HouseData[w][House_Sold] == 0)
					{
						if(IsPlayerInRangeOfPoint(i, 3.0, HouseData[w][House_Outside_X], HouseData[w][House_Outside_Y], HouseData[w][House_Outside_Z]))
						{
							if(PlayerData[i][Admin_Level] > 4)
							{
								new tdstring1[500];
								format(tdstring1, sizeof(tdstring1), "(House ID: %i)~n~%s~n~~y~Cost: ~w~$%i ~p~(%i Coins)~w~~n~~n~(Tap ENTER_KEY to go inside!)~n~~n~~y~/buyproperty~w~ to buy this property!", HouseData[w][House_ID], HouseData[w][House_Address], HouseData[w][House_Price_Money], HouseData[w][House_Price_Coins]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
							else
							{
								new tdstring2[500];
								format(tdstring2, sizeof(tdstring2), "%s~n~~y~Cost: ~w~$%i ~p~(%i Coins)~w~~n~~n~(Tap ENTER_KEY to go inside!)~n~~n~~y~/buyproperty~w~ to buy this property!", HouseData[w][House_Address], HouseData[w][House_Price_Money], HouseData[w][House_Price_Coins]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
						}
					}
					if(HouseData[w][House_Outside_X] != 0 && HouseData[w][House_Sold] == 1 || HouseData[w][House_Sold] == 2)
					{
						if(IsPlayerInRangeOfPoint(i, 3.0, HouseData[w][House_Outside_X], HouseData[w][House_Outside_Y], HouseData[w][House_Outside_Z]))
						{
							if(PlayerData[i][Admin_Level] > 4)
							{
								new tdstring1[500];
								format(tdstring1, sizeof(tdstring1), "(House ID: %i)~n~%s~n~~n~~y~Status:~w~ Owned~n~~y~Owner:~w~ %s~n~~n~(Tap ENTER_KEY to go inside!)", HouseData[w][House_ID], HouseData[w][House_Address], HouseData[w][House_Owner]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
							else
							{
								new tdstring2[500];
								format(tdstring2, sizeof(tdstring2), "%s~n~~n~~y~Status:~w~ Owned~n~~y~Owner:~w~ %s~n~~n~(Tap ENTER_KEY to go inside!)", HouseData[w][House_Address], HouseData[w][House_Owner]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
						}
					}
					if(IsPlayerInRangeOfPoint(i, 3.0, HouseData[w][House_Inside_X], HouseData[w][House_Inside_Y], HouseData[w][House_Inside_Z]) && HouseData[w][House_Inside_VW] == GetPlayerVirtualWorld(i))
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "Tap ~y~Enter_Key~w~ To Use Door!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
				}
				for(new q = 1; q < MAX_BUSINESSES; q++)
				{
					if(BusinessData[q][Business_Outside_X] != 0 && BusinessData[q][Business_Sold] == 0)
					{
						if(IsPlayerInRangeOfPoint(i, 3.0, BusinessData[q][Business_Outside_X], BusinessData[q][Business_Outside_Y], BusinessData[q][Business_Outside_Z]))
						{
							if(PlayerData[i][Admin_Level] > 4)
							{
								new tdstring1[500];
								format(tdstring1, sizeof(tdstring1), "(Business ID: %i)~n~%s~n~~y~Cost: ~w~$%i ~p~(%i Coins)~w~~n~~n~(Tap ENTER_KEY to go inside!)~n~~n~~y~/buybusiness~w~ to buy this business!", BusinessData[q][Business_ID], BusinessData[q][Business_Name], BusinessData[q][Business_Price_Money], BusinessData[q][Business_Price_Coins]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
							else
							{
								new tdstring2[500];
								format(tdstring2, sizeof(tdstring2), "%s~n~~y~Cost: ~w~$%i ~p~(%i Coins)~w~~n~~n~(Tap ENTER_KEY to go inside!)~n~~n~~y~/buybusiness~w~ to buy this business!", BusinessData[q][Business_Name], BusinessData[q][Business_Price_Money], BusinessData[q][Business_Price_Coins]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
						}
					}
					if(BusinessData[q][Business_Outside_X] != 0 && BusinessData[q][Business_Sold] == 1 || BusinessData[q][Business_Sold] == 2)
					{
						if(IsPlayerInRangeOfPoint(i, 3.0, BusinessData[q][Business_Outside_X], BusinessData[q][Business_Outside_Y], BusinessData[q][Business_Outside_Z]))
						{
							if(PlayerData[i][Admin_Level] > 4)
							{
								new tdstring1[500];
								format(tdstring1, sizeof(tdstring1), "(Business ID: %i)~n~%s~n~~n~~y~Status:~w~ Owned~n~~y~Owner:~w~ %s~n~~n~(Tap ENTER_KEY to go inside!)", BusinessData[q][Business_ID], BusinessData[q][Business_Name], BusinessData[q][Business_Owner]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
							else
							{
								new tdstring2[500];
								format(tdstring2, sizeof(tdstring2), "%s~n~~n~~y~Status:~w~ Owned~n~~y~Owner:~w~ %s~n~~n~(Tap ENTER_KEY to go inside!)", BusinessData[q][Business_Name], BusinessData[q][Business_Owner]);
								PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring2);
								PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
								IsPlayerSeeingTextdraw[i] = 2;
			
								//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
							}
						}
					}
					if(IsPlayerInRangeOfPoint(i, 3.0, BusinessData[q][Business_Inside_X], BusinessData[q][Business_Inside_Y], BusinessData[q][Business_Inside_Z]) && BusinessData[q][Business_Inside_VW] == GetPlayerVirtualWorld(i))
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "Tap ~y~Enter_Key~w~ To Use Door!");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
					if(IsPlayerInRangeOfPoint(i, 3.0, BusinessData[q][Business_BuyPoint_X], BusinessData[q][Business_BuyPoint_Y], BusinessData[q][Business_BuyPoint_Z]) && BusinessData[q][Business_Inside_VW] == GetPlayerVirtualWorld(i))
					{
						new tdstring1[500];
						format(tdstring1, sizeof(tdstring1), "TIP: Type ~y~/shop");
						PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
			
						IsPlayerSeeingTextdraw[i] = 2;
			
						//Notification_Timer[i] = SetTimerEx("OnTimerCancels", 6000, false, "i", i);
					}
				}
			}
		}
	}
	return 1;
}

forward ONE_SECOND_TIMER();
public ONE_SECOND_TIMER()
{
	SetServerTimeForAll();

    /* ----- PLAYER MESSAGE DISPLAYS ----- */
	foreach(new i : Player)	
	//for(new i; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerLogged[i] == 1)
		{
		    if(PlayerData[i][Character_Registered] == 1)
		    {
		        /* ----- AMMUNATION ROBBERY TIMER ----- */

				if(HasPlayerRobbedAmmunation[i] > 0)
				{
				    HasPlayerRobbedAmmunation[i] --;
				}
				if(HasPlayerRobbed247Store[i] > 0)
				{
				    HasPlayerRobbed247Store[i] --;
				}
				if(HasPlayerRobbedElectronics[i] > 0)
				{
				    HasPlayerRobbedElectronics[i] --;
				}
				if(HasPlayerRobbedSupermarket[i] > 0)
				{
				    HasPlayerRobbedSupermarket[i] --;
				}

				if(VIPLockerUse[i] > 0)
				{	
					VIPLockerUse[i] --;
				}
				
				if(PerkUse[i] > 0)
				{	
					PerkUse[i] --;
				}
				
				if(SERVER_XMAS_EVENT_TEST == 1 && IsPlayerNearPresentTest[i] == 0 && IsPlayerInRangeOfPoint(i, 20.0, 860.8651,-1382.4199,13.7314))
				{
					IsPlayerNearPresentTest[i] = 30;
					
					new Float:x, Float:y, Float:z;
			        GetPlayerPos(i, x, y, z);
					PlayerPlaySound(i, 1076, x, y, z);
					
					printf("Christmas Event: $100 Steam Card | Player: %s | Is Near The Location", GetName(i));
				}
				else if(SERVER_XMAS_EVENT_TEST == 1 && IsPlayerNearPresentTest[i] > 0 && !IsPlayerInRangeOfPoint(i, 3.0, 860.8651,-1382.4199,13.7314))
				{
					IsPlayerNearPresentTest[i] -- ;
					
					printf("Christmas Event: $100 Steam Card | Player: %s | Is Not At The Exact Location", GetName(i));
				}
				else if(SERVER_XMAS_EVENT_TEST == 1 && IsPlayerNearPresentTest[i] > 0 && IsPlayerInRangeOfPoint(i, 3.0, 860.8651,-1382.4199,13.7314))
				{
					IsPlayerNearPresentTest[i] = 0;
					
					printf("Christmas Event: $100 Steam Card | Player: %s | Has Found The Christmas Gift", GetName(i));
					
					SendClientMessage(i, COLOR_YELLOW, " - You have successfully found the christmas gift, please send this code TEST to Cobra in Discord");
					
					new string[256];
					format(string, sizeof(string), "> %s leans down onto the ground and picks up the gift", GetRPName(i));
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, string);
					
					new Float:x, Float:y, Float:z;
			        GetPlayerPos(i, x, y, z);
					PlayerPlaySound(i, 21002, x, y, z);
					
					SERVER_XMAS_EVENT_TEST = 0;
				}
				
				if(SERVER_XMAS_EVENT == 1 && IsPlayerNearPresent[i] == 0 && IsPlayerInRangeOfPoint(i, 20.0, 1445.1089,-1891.5726,23.1554))
				{
					IsPlayerNearPresent[i] = 30;
					
					new Float:x, Float:y, Float:z;
			        GetPlayerPos(i, x, y, z);
					PlayerPlaySound(i, 1076, x, y, z);
					
					printf("Christmas Event: $100 Steam Card | Player: %s | Is Near The Location", GetName(i));
				}
				else if(SERVER_XMAS_EVENT == 1 && IsPlayerNearPresent[i] > 0 && !IsPlayerInRangeOfPoint(i, 3.0, 1445.1089,-1891.5726,23.1554))
				{
					IsPlayerNearPresent[i] -- ;
					
					printf("Christmas Event: $100 Steam Card | Player: %s | Is Not At The Exact Location", GetName(i));
				}
				else if(SERVER_XMAS_EVENT == 1 && IsPlayerNearPresent[i] > 0 && IsPlayerInRangeOfPoint(i, 3.0, 1445.1089,-1891.5726,23.1554))
				{
					IsPlayerNearPresent[i] = 0;
					
					printf("Christmas Event: $100 Steam Card | Player: %s | Has Found The Christmas Gift", GetName(i));
					
					SendClientMessage(i, COLOR_YELLOW, " - You have successfully found the christmas gift, please send this code 345980-123 to Cobra in Discord");
					
					new string[256];
					format(string, sizeof(string), "> %s leans down onto the ground and picks up the gift", GetRPName(i));
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, string);
					
					new Float:x, Float:y, Float:z;
			        GetPlayerPos(i, x, y, z);
					PlayerPlaySound(i, 21002, x, y, z);
					
					SERVER_XMAS_EVENT = 0;
				}
	
		        if(IsPlayerInRangeOfPoint(i, 3.0, 1729.2441,-1861.3646,13.5776))
		        {
                    GameTextForPlayer(i, "/ASSISTANCE", 5000, 5); // AIRPORT SPAWN
		        }
		        else if(IsPlayerInRangeOfPoint(i, 3.0, 1753.2698,-1862.1169,13.5767))
		        {
                    GameTextForPlayer(i, "/RENTCAR", 5000, 5); // AIRPORT SPAWN
		        }
				else if(IsPlayerInRangeOfPoint(i, 3.0, -2653.3381,1408.3373,906.2771))
		        {
                    GameTextForPlayer(i, "/VIPLOCKER", 5000, 5); // VIP LOCKER
		        }
				else if(IsPlayerInRangeOfPoint(i, 3.0, 708.7531,392.6225,1023.5939))
		        {
                    GameTextForPlayer(i, "/CITYHELP", 5000, 5); // City Help Desk
		        }
		        else if(IsPlayerInRangeOfPoint(i, 3.0, 2409.5278,-1426.0397,23.9829))
		        {
                    GameTextForPlayer(i, "/RECYCLECAR", 5000, 5);
		        }
		        else if(IsPlayerInRangeOfPoint(i, 3.0, 1735.1765,-1861.2561,13.5777))
		        {
                    GameTextForPlayer(i, "/GUIDE", 5000, 5); // AIRPORT SPAWN
		        }
		        else if(IsPlayerInRangeOfPoint(i, 3.0, 1376.2294,-1423.9144,13.5768))
		        {
                    GameTextForPlayer(i, "/GETLICENSE", 5000, 5); // DRIVING SCHOOL
		        }
		        else if(IsPlayerInRangeOfPoint(i, 3.0, 2142.8154,1620.1243,1000.9688))
		        {
                    GameTextForPlayer(i, "/RAPPEL", 5000, 5); // BANK ROPE LOCATION
		        }
		        else if(IsPlayerInRangeOfPoint(i, 1.0, 2164.5356,1600.1710,999.9771))
		        {
                    GameTextForPlayer(i, "/BANKACCOUNT", 5000, 5); // BANK LOCATION
		        }
		        else if(IsPlayerInRangeOfPoint(i, 3.0, 2051.0803,-1842.6533,13.5633) || IsPlayerInRangeOfPoint(i, 3.0, 2051.0803,-1842.6533,13.5633) || IsPlayerInRangeOfPoint(i, 3.0, 618.3365,-76.9667,997.9922))
		        {
		            GameTextForPlayer(i, "/DUTY", 5000, 5); // DUTY LOCATIONS
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 254.4426,76.9794,1003.6406) || IsPlayerInRangeOfPoint(i, 3.0, 1780.0322,-1693.6436,16.7503) || IsPlayerInRangeOfPoint(i, 3.0, -1098.1952,1995.3502,-58.9141))
		        {
		            GameTextForPlayer(i, "/LOCKER", 5000, 5); // LOCKER LOCATIONS
				}
				else if(IsPlayerInRangeOfPoint(i, 5, 1943.48840, -1984.64282, 13.48357) && HasPlayerEnteredSprayUnit[i] == 0)
		        {
		            GameTextForPlayer(i, "PRESS N", 5000, 3); // SPRAY LOCATIONS
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 254.4943,85.0860,1002.4453) && PlayerData[i][Character_Faction] == 1)
		        {
		            GameTextForPlayer(i, "/ARREST", 5000, 5); // ARREST LOCATIONS
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 1783.4768,-1694.1383,16.7503) && PlayerData[i][Character_Faction] == 2)
		        {
		            GameTextForPlayer(i, "/FIREEX", 5000, 5); // FIREEX GEAR LSFD
				}
				else if(IsPlayerInRangeOfPoint(i, 3.0, 2054.3008,-1842.2689,13.5633) && PlayerData[i][Character_Faction] == 9)
		        {
		            GameTextForPlayer(i, "/TOOLS", 5000, 5); // TOOLS MECHANIC
				}
		
          		if(PlayerData[i][Character_Level] == 1 && PlayerData[i][Character_Level_Exp] == 8)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 2 && PlayerData[i][Character_Level_Exp] == 10)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 3 && PlayerData[i][Character_Level_Exp] == 12)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 4 && PlayerData[i][Character_Level_Exp] == 14)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 5 && PlayerData[i][Character_Level_Exp] == 16)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 6 && PlayerData[i][Character_Level_Exp] == 18)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 7 && PlayerData[i][Character_Level_Exp] == 20)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 8 && PlayerData[i][Character_Level_Exp] == 22)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 9 && PlayerData[i][Character_Level_Exp] == 24)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 10 && PlayerData[i][Character_Level_Exp] == 26)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] == 11 && PlayerData[i][Character_Level_Exp] == 28)
				{
					LevelUp(i);
	    		}
				else if(PlayerData[i][Character_Level] >= 12 && PlayerData[i][Character_Level_Exp] == 30)
				{
					LevelUp(i);
	    		}
	    		
	    		new Float:h;
	    		GetPlayerHealth(i, h);
	    		if(h < 10 && IsPlayerInjured[i] == 0 && HasPlayerFirstSpawned[i] == 1)
	    		{
	    		    IsPlayerInjured[i] = 1;
	    		    ClearAnimations(i);
	    		    ApplyAnimation(i, "CRACK", "crckdeth2", 4.1, false, true, true, true, 0, SYNC_ALL);
	    		    
	    		    new tdstring1[500];
			    	format(tdstring1, sizeof(tdstring1), "You are about to die! Use /acceptdeath, when roleplay has finished!");
					PlayerTextDrawSetString(i, PlayerText:Notification_Textdraw, tdstring1);
					PlayerTextDrawShow(i, PlayerText:Notification_Textdraw);
					
					SetPlayerHealth(i, 50);
					
			        Notification_Timer[i] = SetTimerEx("OnTimerCancels", 10000, false, "i", i);
	    		}
	    		
	    		if(IsPlayerTased[i] == 1)
	    		{
					ApplyAnimation(i, "CRACK", "crckdeth2", 4.1, false, true, true, true, 0, SYNC_ALL);
	    		}
	
				/* ----- BINCO CHECK ----- */
				if(IsPlayerInViewState_Binco[i] == 1 && !IsPlayerInRangeOfPoint(i, 5.0, 216.6396,-98.8570,1005.2578))
				{
					IsPlayerInViewState_Binco[i] = 0;
				}

				new v = GetPlayerVehicleID(i);
				if(VehicleData[v][Vehicle_Fuel] <= 1)
				{
				    VehicleData[v][Vehicle_Fuel] = 0;

					new engine, lights, alarm, doors, bonnet, boot, objective;
					new string[256];
					GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
					
					if(engine == 1)
					{
					    SetVehicleParamsEx(v, false, lights, alarm, doors, bonnet, boot, objective);
					    format(string, sizeof(string), "> %s's vehicle has turned off randomly", GetRPName(i));
						SendNearbyMessage(i, 30.0, COLOR_PURPLE, string);

                        PlayerTextDrawSetString(i, SpeedBoxFuelAmount, "-");
                        
						KillTimer(Fuel_Timer[i]);
						KillTimer(Vehicle_Timer[i]);
						
						Fuel_Timer[i] = 0;
						Vehicle_Timer[i] = 0;
					}
				}
			}
		}
	}
	
	/* ----- VEHICLE DEATH SYSTEM ----- */
	for(new v; v<MAX_VEHICLES; v++)
	{
		new Float:vehiclehealth;
		GetVehicleHealth(v, vehiclehealth);
		
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);

		if(engine == 1 && vehiclehealth < 300.0)
		{
			SetVehicleParamsEx(v, false, lights, alarm, doors, bonnet, boot, objective);
			
			SetVehicleHealth(v, 300.0);

			printf("a vehicle has just turned off due to high damage");
		}
	}

	/* ----- BANK ROBBERY TIMER ----- */
	if(BankRobberyTimer > 0 && BankRobberyTimer < 60 && BankRobberyTimerExp == 0)
	{
	    BankRobberyTimer += 1;
	}
	else if(BankRobberyTimer == 60 && BankRobberyTimerExp == 0)
	{
        BankRobberyTimerExp += 1;
        
        for(new i; i<MAX_PLAYERS; i++)
		{
		    if(HasPlayerRobbedBank[i] == 1)
		    {
			    new string[256];

			    if(BankDoorOpen == false)
				{
				    MoveDynamicObject(BankDoor, 2145.1274, 1626.2031, 994.2476, 0.05, 0.00000, 0.00000, 270.00000);
		          	BankDoorOpen = true;

		           	format(string, sizeof(string), "> Bank door slowly opens due to security features in play");
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, string);
				}

				new amountrobbed;
				amountrobbed = 1 + random(50000);

				PlayerData[i][Character_Money] += amountrobbed;
				
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$%d", amountrobbed);
				GameTextForPlayer(i, text_value1, 3000, 3);

				format(string, sizeof(string), "> %s has successfully stolen money from the bank", GetRPName(i));
				SendNearbyMessage(i, 30.0, COLOR_PURPLE, string);

				format(string, sizeof(string), "- You have just stolen $%d.00 worth of money from the vault, get out of there before the cops show up!", amountrobbed);
				SendClientMessage(i, COLOR_YELLOW, string);
				
				HasPlayerRobbedBank[i] = 0;

				TogglePlayerControllable(i, true);

				printf("Bank Robbery - Player Has Successfully Robbed The Bank");
			}
		}
	}
	else if(BankRobberyTimer == 60 && BankRobberyTimerExp < 5400)
	{
        BankRobberyTimerExp += 1;
	}
	else if(BankRobberyTimer == 60 && BankRobberyTimerExp == 5400)
	{
	    BankRobberyTimer = 0;
	    BankRobberyTimerExp = 0;
	
		MoveDynamicObject(BankDoor, 2144.19385, 1627.00122, 994.24762, 0.05, 0.00000, 0.00000, 180.00000);
		BankDoorOpen = false;
	    
	    printf("Bank Robbery Timer Reset");
	}
	
	/* ----- TORNADO TIMER ----- */
	if(TornadoTimer < 600)
	{
	    TornadoTimer += 1;
	}
	else if(TornadoTimer == 600)
	{
	    DestroyObject(TornadoObject1);
     	DestroyObject(TornadoObject2);
     	DestroyObject(TornadoObject3);
     	DestroyObject(TornadoObject4);
		DestroyObject(TornadoObject5);
		DestroyObject(TornadoObject6);
	    
	    TornadoTimer = 0;
	}
	
	/* ----- LSPD JOB TIMER ----- */
	if(LSPDJobTimer < 600 && LSPDJobTimerExp == 0)
	{
	    LSPDJobTimer += 1;
	}
	else if(LSPDJobTimer == 600 && LSPDJobTimerExp < 450)
	{
	    LSPD_JOB_HOUSE_INSPECTION();
	    
	    LSPDJobTimerExp += 1;
	}
	else if(LSPDJobTimer == 600 && LSPDJobTimerExp == 450)
	{
	    EXP_LSPD_JOB_HOUSE_INSPECTION();

	    LSPDJobTimer = 0;
	    LSPDJobTimerExp = 0;
	}
	
	/* ----- LSFD JOB TIMER ----- */
	if(LSFDJobTimer < 600 && LSFDJobTimerExp == 0)
	{
	    LSFDJobTimer += 1;
	}
	else if(LSFDJobTimer == 600 && LSFDJobTimerExp < 450)
	{
	    LSFD_JOB_HOUSE_FIRE();

	    LSFDJobTimerExp += 1;
	}
	else if(LSFDJobTimer == 600 && LSFDJobTimerExp == 450)
	{
	    EXP_LSFD_JOB_HOUSE_FIRE();

	    LSFDJobTimer = 0;
	    LSFDJobTimerExp = 0;
	}
	
	/* ----- DUDEFIX JOB TIMER ----- */
	if(DudefixJobTimer <= 849 && DudefixJobTimerExp == 0)
	{
	    DudefixJobTimer += 1;
	}
	else if(DudefixJobTimer == 850 && DudefixJobTimerExp <= 449)
	{
	    DUDEFIX_JOB_PIPE_BLAST();
	    
	    DudefixJobTimerExp += 1;
	}
	else if(DudefixJobTimer == 850 && DudefixJobTimerExp == 450)
	{
	    EXP_DUDEFIX_JOB_PIPE_BLAST();

	    DudefixJobTimer = 0;
	    DudefixJobTimerExp = 0;
	}
	
	/* ----- MECHANIC JOB TIMER ----- */
	if(MechanicJobTimer < 600 && MechanicJobTimerExp == 0)
	{
	    MechanicJobTimer += 1;
	}
	else if(MechanicJobTimer == 600 && MechanicJobTimerExp < 450)
	{
	    MECHANIC_JOB_VEHICLE_HEALTH();

	    MechanicJobTimerExp += 1;
	}
	else if(MechanicJobTimer == 600 && MechanicJobTimerExp == 450)
	{
	    EXP_MECHANIC_JOB_VEHICLE_HEALTH();

	    MechanicJobTimer = 0;
	    MechanicJobTimerExp = 0;
	}
	
	/* ----- DRUG TIMER ----- */
	if(DrugTimer < 3600)
	{
	    DrugTimer += 1;
	}
	else if(DrugTimer == 3600)
	{
		if(DrugActor != 0)
		{
			new randIndex = random(sizeof(DrugDealerActorLocations));
			
			DestroyActor(DrugActor);
			DrugActor = CreateActor(29, DrugDealerActorLocations[randIndex][0],DrugDealerActorLocations[randIndex][1],DrugDealerActorLocations[randIndex][2],DrugDealerActorLocations[randIndex][3]);
		    DrugTimer = 0;
			
			printf("New Drug Actor Created");
		}
		else
		{
			new randIndex = random(sizeof(DrugDealerActorLocations));
			
			DrugActor = CreateActor(29, DrugDealerActorLocations[randIndex][0],DrugDealerActorLocations[randIndex][1],DrugDealerActorLocations[randIndex][2],DrugDealerActorLocations[randIndex][3]);
		    DrugTimer = 0;
			printf("New Drug Actor Created");
		}	
	}
	
	/* ----- RANDOM MESSAGE DISLAYS ----- */
	if(SERVER_MESSAGE_COUNT == 0)
	{
		SERVER_MESSAGE_COUNT = 600;
		
		new index = random(sizeof(RandomMessages));
		SendClientMessageToAll(COLOR_CORAL, RandomMessages[index]);	
	}
	else if(SERVER_MESSAGE_COUNT > 0)
	{
		SERVER_MESSAGE_COUNT -= 1;
	}
	
	/* ----- VEHICLE RESPAWN ----- */
	if(VEHICLE_RESPAWN_COUNT == 0)
	{
		VEHICLE_RESPAWN_COUNT = 9000;
		
		for (new i = 1; i < MAX_VEHICLES; i++)
		{
			if(!IsVehicleOccupied(i))
			{
		    	SetVehicleToRespawn(i);
			}
		}
	}
	else if(VEHICLE_RESPAWN_COUNT > 0)
	{
		VEHICLE_RESPAWN_COUNT -= 1;
		
		if(VEHICLE_RESPAWN_COUNT == 300)
		{
			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]: The gamemode will respawn all unused vehicles in the next 5 minutes!");
			SendClientMessageToAll(COLOR_RED, dstring);
		}
	}		
	return 1;
}

forward ONE_MINUTE_TIMER();
public ONE_MINUTE_TIMER()
{	
	/* ----- WEED GROWTH SYSTEM ----- */
	for(new v; v < MAX_PLANTS; v++)
	{
		if(WeedData[v][Weed_Alive] >= 20)
		{
			WeedData[v][Weed_Alive] --;
		}
		else if(WeedData[v][Weed_Alive] == 19)
		{
			WeedData[v][Weed_Alive] --;
			
			DestroyDynamicObject(WeedData[v][Weed_Pickup_ID]);
			
			WeedData[v][Weed_Pickup_ID] = CreateDynamicObject(809, WeedData[v][Weed_Pos_X], WeedData[v][Weed_Pos_Y], WeedData[v][Weed_Pos_Z]-1.5,   0.00000, 0.00000, 90.00000);
		}
		else if(WeedData[v][Weed_Alive] >= 1)
		{
			WeedData[v][Weed_Alive] --;
		}
		else if(WeedData[v][Weed_Alive] == 0)
		{
			DestroyDynamicObject(WeedData[v][Weed_Pickup_ID]);

			WeedData[v][Weed_Pickup_ID] = 0;
			WeedData[v][Weed_Model_ID] = 0;
			WeedData[v][Weed_Pos_X] = 0;
			WeedData[v][Weed_Pos_Y] = 0;
			WeedData[v][Weed_Pos_Z] = 0;
			WeedData[v][Weed_Alive] = 0;
			WeedData[v][Weed_Cut] = 0;
			
			new fquery[2000];
			mysql_format(connection, fquery, sizeof(fquery), "UPDATE `weed_information` SET `weed_model_id` = 0, `weed_pos_x` = 0, `weed_pos_y` = 0, `weed_pos_z` = 0, `weed_alive` = 0, `weed_cut` = 0 WHERE `weed_id` = '%i' LIMIT 1", v);
			mysql_tquery(connection, fquery);
		}
	}		
	return 1;
}

forward OnTimerCancels(playerid);
public OnTimerCancels(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		PlayerTextDrawHide(playerid, PlayerText:Notification_Textdraw);
		Notification_Timer[playerid] = 0;
	}
	return 1;
}

forward BackupCheck(playerid);
public BackupCheck(playerid)
{
    if(LSPDBackupPosition[0] != 0)
    {
    	if(PlayerData[playerid][Character_Faction] == 1)
		{
			new playername[50];
		    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);

			if(strcmp(BackupCaller, playername) != 0 && HasPlayerResponded[playerid] == 1)
		    {
				if(IsPlayerNearPlayer(playerid, GetPlayerID(BackupCaller), 5.0))
				{
			        DisablePlayerCheckpoint(playerid);
	
			        LSPDBackupPosition[0] = 0;
			        LSPDBackupPosition[1] = 0;
			        LSPDBackupPosition[2] = 0;
				        
			        BackupCaller = "";
			        
			        KillTimer(Backup_Timer[playerid]);
			
					HasPlayerResponded[playerid] = 0;
					HasGPSBeenDisabled[playerid] = 0;
				        
			        new dstring[256];
		   			format(dstring, sizeof(dstring), "([BACKUP ALERT - UPDATE] %s has arrived at the backup location)", GetName(playerid));
					SendFactionRadioMessage(1, COLOR_YELLOW, dstring);
				}
				else
				{					
					new Float:px, Float:py, Float:pz;
					GetPlayerPos(GetPlayerID(BackupCaller), px, py, pz);
	
				    LSPDBackupPosition[0] = px;
				    LSPDBackupPosition[1] = py;
				    LSPDBackupPosition[2] = pz;
	
					SetPlayerCheckpoint(playerid, LSPDBackupPosition[0], LSPDBackupPosition[1], LSPDBackupPosition[2], 3.0);
				}
			}
			else if(strcmp(BackupCaller, playername) == 0 && HasPlayerResponded[playerid] == 0)
			{					
				new Float:px, Float:py, Float:pz;
				GetPlayerPos(playerid, px, py, pz);
	
				LSPDBackupPosition[0] = px;
				LSPDBackupPosition[1] = py;
				LSPDBackupPosition[2] = pz;
	
				SetPlayerCheckpoint(playerid, LSPDBackupPosition[0], LSPDBackupPosition[1], LSPDBackupPosition[2], 3.0);
			}
		}
	}
	return 1;
}

forward TaserCancels(playerid);
public TaserCancels(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerTased[playerid] == 1)
		{
		    IsPlayerTased[playerid] = 0;
		    
			PlayerTextDrawHide(playerid, PlayerText:Notification_Textdraw);
			ClearAnimations(playerid);
		}
	}
	return 1;
}

forward LoadFactions();
public LoadFactions()
{
	new sloaded = 1;
    while(sloaded <= MAX_FACTIONS)
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `faction_information` WHERE `faction_id` = '%i' LIMIT 1", sloaded);
    	mysql_tquery(connection, query, "LoadFaction_Results");

    	sloaded++;
	}
	return 1;
}

forward LoadFaction_Results();
public LoadFaction_Results()
{
    new rows = cache_num_rows();

	if(rows)
	{
	    new loaded; 
	
		cache_get_value_name_int(0, "faction_id", loaded);
		cache_get_value_name_int(0, "faction_id", FactionData[loaded][Faction_ID]);
		cache_get_value_name(0, "faction_name", FactionData[loaded][Faction_Name], 20);
		
		cache_get_value_name(0, "faction_rank_1", FactionData[loaded][Faction_Rank_1], 20);
		cache_get_value_name(0, "faction_rank_2", FactionData[loaded][Faction_Rank_2], 20);
		cache_get_value_name(0, "faction_rank_3", FactionData[loaded][Faction_Rank_3], 20);
		cache_get_value_name(0, "faction_rank_4", FactionData[loaded][Faction_Rank_4], 20);
		cache_get_value_name(0, "faction_rank_5", FactionData[loaded][Faction_Rank_5], 20);
		cache_get_value_name(0, "faction_rank_6", FactionData[loaded][Faction_Rank_6], 20);
	
		cache_get_value_name_int(0, "faction_join_requests", FactionData[loaded][Faction_Join_Requests]);

		cache_get_value_name_float(0, "faction_icon_x", FactionData[loaded][Faction_Icon_X]);
		cache_get_value_name_float(0, "faction_icon_y", FactionData[loaded][Faction_Icon_Y]);
		cache_get_value_name_float(0, "faction_icon_z", FactionData[loaded][Faction_Icon_Z]);
		
		cache_get_value_name(0, "faction_owner", FactionData[loaded][Faction_Owner], 50);
        
		cache_get_value_name_int(0, "faction_price_money", FactionData[loaded][Faction_Price_Money]);
		cache_get_value_name_int(0, "faction_price_coins", FactionData[loaded][Faction_Price_Coins]);
		cache_get_value_name_int(0, "faction_sold", FactionData[loaded][Faction_Sold]);
		cache_get_value_name_int(0, "faction_money", FactionData[loaded][Faction_Money]);
        
        FactionData[loaded][Faction_Pickup_ID_Outside] = CreateDynamicPickup(1239, 1,FactionData[loaded][Faction_Icon_X], FactionData[loaded][Faction_Icon_Y], FactionData[loaded][Faction_Icon_Z], -1);
	}
	return 1;
}

forward GetNextFactionValue(playerid);
public GetNextFactionValue(playerid)
{
    if(cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "faction_id", SQL_FACTION_NEXTID);

        new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The next avaliable faction id is: %i and it hasn't been set up yet", SQL_FACTION_NEXTID);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);

		SQL_FACTION_NEXTID = 0;
    }
    return 1;
}

forward LoadDoors();
public LoadDoors()
{
	new sloaded = 1;
    while(sloaded <= MAX_DOORS)
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `door_information` WHERE `door_id` = '%i' LIMIT 1", sloaded);
    	mysql_tquery(connection, query, "LoadDoors_Results");

    	sloaded++;
	}
	printf("Server: Doors loaded into the server");
	return 1;
}

forward LoadDoors_Results();
public LoadDoors_Results()
{
    new rows = cache_num_rows();
	
	if(rows)
	{
	    new loaded;
		cache_get_value_name_int(0, "door_id", loaded);
	    
		cache_get_value_name_int(0, "door_id", DoorData[loaded][Door_ID]);
		cache_get_value_name_int(0, "door_faction", DoorData[loaded][Door_Faction]);
		cache_get_value_name(0, "door_description", DoorData[loaded][Door_Description], 50);
		
		cache_get_value_name_float(0, "door_outside_x", DoorData[loaded][Door_Outside_X]);
		cache_get_value_name_float(0, "door_outside_y", DoorData[loaded][Door_Outside_Y]);
		cache_get_value_name_float(0, "door_outside_z", DoorData[loaded][Door_Outside_Z]);
		cache_get_value_name_float(0, "door_outside_a", DoorData[loaded][Door_Outside_A]);
		cache_get_value_name_int(0, "door_outside_interior", DoorData[loaded][Door_Outside_Interior]);
		cache_get_value_name_int(0, "door_outside_vw", DoorData[loaded][Door_Outside_VW]);

		cache_get_value_name_float(0, "door_inside_x", DoorData[loaded][Door_Inside_X]);
		cache_get_value_name_float(0, "door_inside_y", DoorData[loaded][Door_Inside_Y]);
		cache_get_value_name_float(0, "door_inside_z", DoorData[loaded][Door_Inside_Z]);
		cache_get_value_name_float(0, "door_inside_a", DoorData[loaded][Door_Inside_A]);
		cache_get_value_name_int(0, "door_inside_interior", DoorData[loaded][Door_Inside_Interior]);
		cache_get_value_name_int(0, "door_inside_vw", DoorData[loaded][Door_Inside_VW]);

        if(DoorData[loaded][Door_Outside_X] != 0)
      	{
     	    DoorData[loaded][Door_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,DoorData[loaded][Door_Outside_X], DoorData[loaded][Door_Outside_Y], DoorData[loaded][Door_Outside_Z]+0.3, -1);
		}
		if(DoorData[loaded][Door_Inside_X] != 0)
		{
		    DoorData[loaded][Door_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,DoorData[loaded][Door_Inside_X], DoorData[loaded][Door_Inside_Y], DoorData[loaded][Door_Inside_Z]+0.3, -1);
		}
	}
	return 1;
}

forward GetNextDoorValue(playerid);
public GetNextDoorValue(playerid)
{
    if(cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "door_id", SQL_DOOR_NEXTID);

        new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The next avaliable door id is: %i and it hasn't been set up yet", SQL_DOOR_NEXTID);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);

		SQL_DOOR_NEXTID = 0;
    }
    return 1;
}

forward IsPlayerNearDynamicDoor(playerid);
public IsPlayerNearDynamicDoor(playerid)
{
    for(new a = 1; a < MAX_DOORS; a++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, DoorData[a][Door_Outside_X], DoorData[a][Door_Outside_Y], DoorData[a][Door_Outside_Z]))
		{
			PlayerAtDoorID[playerid] = a;
			break;
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, DoorData[a][Door_Inside_X], DoorData[a][Door_Inside_Y], DoorData[a][Door_Inside_Z]))
		{
			PlayerAtDoorID[playerid] = a;
			break;
		}
	}
	return 1;
}

forward LoadHouses();
public LoadHouses()
{
	new sloaded = 1;
    while(sloaded <= MAX_HOUSES)
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `house_information` WHERE `house_id` = '%i' LIMIT 1", sloaded);
    	mysql_tquery(connection, query, "LoadHouses_Results");

    	sloaded++;
	}
	printf("Server: Houses loaded into the server");
	return 1;
}

forward LoadHouses_Results();
public LoadHouses_Results()
{
    new rows = cache_num_rows();

	if(rows)
	{
	    new loaded;
		cache_get_value_name_int(0, "house_id", loaded);

		cache_get_value_name_int(0, "house_id", HouseData[loaded][House_ID]);
		cache_get_value_name_int(0, "house_price_money", HouseData[loaded][House_Price_Money]);
		cache_get_value_name_int(0, "house_price_coins", HouseData[loaded][House_Price_Coins]);
		cache_get_value_name_int(0, "house_sold", HouseData[loaded][House_Sold]);
		
		cache_get_value_name(0, "house_owner", HouseData[loaded][House_Owner], 50);
		cache_get_value_name(0, "house_address", HouseData[loaded][House_Address], 150);
		
		cache_get_value_name_int(0, "house_alarm", HouseData[loaded][House_Alarm]);
		cache_get_value_name_int(0, "house_lock", HouseData[loaded][House_Lock]);
		
		cache_get_value_name_int(0, "house_robbed", HouseData[loaded][House_Robbed]);
		cache_get_value_name_int(0, "house_robbed_value", HouseData[loaded][House_Robbed_Value]);
		
		cache_get_value_name_float(0, "house_spawn_x", HouseData[loaded][House_Spawn_X]);
		cache_get_value_name_float(0, "house_spawn_y", HouseData[loaded][House_Spawn_Y]);
		cache_get_value_name_float(0, "house_spawn_z", HouseData[loaded][House_Spawn_Z]);
		cache_get_value_name_int(0, "house_spawn_interior", HouseData[loaded][House_Spawn_Interior]);
		cache_get_value_name_int(0, "house_spawn_vw", HouseData[loaded][House_Spawn_VW]);

		cache_get_value_name_float(0, "house_outside_x", HouseData[loaded][House_Outside_X]);
		cache_get_value_name_float(0, "house_outside_y", HouseData[loaded][House_Outside_Y]);
		cache_get_value_name_float(0, "house_outside_z", HouseData[loaded][House_Outside_Z]);
		cache_get_value_name_float(0, "house_outside_a", HouseData[loaded][House_Outside_A]);
		cache_get_value_name_int(0, "house_outside_interior", HouseData[loaded][House_Outside_Interior]);
		cache_get_value_name_int(0, "house_outside_vw", HouseData[loaded][House_Outside_VW]);
		
		cache_get_value_name_int(0, "house_preset_type", HouseData[loaded][House_Preset_Type]);
		cache_get_value_name_int(0, "house_alarm_active", HouseData[loaded][House_Alarm_Active]);
		cache_get_value_name_int(0, "house_lock_active", HouseData[loaded][House_Lock_Active]);
		
		cache_get_value_name_float(0, "house_inside_x", HouseData[loaded][House_Inside_X]);
		cache_get_value_name_float(0, "house_inside_y", HouseData[loaded][House_Inside_Y]);
		cache_get_value_name_float(0, "house_inside_z", HouseData[loaded][House_Inside_Z]);
		cache_get_value_name_float(0, "house_inside_a", HouseData[loaded][House_Inside_A]);
		cache_get_value_name_int(0, "house_inside_interior", HouseData[loaded][House_Inside_Interior]);
		cache_get_value_name_int(0, "house_inside_vw", HouseData[loaded][House_Inside_VW]);
		
		cache_get_value_name_int(0, "house_inventory_safe", HouseData[loaded][House_Inventory_Safe]);
		cache_get_value_name_int(0, "house_inventory_cocaine", HouseData[loaded][House_Inventory_Cocaine]);
		cache_get_value_name_int(0, "house_inventory_heroin", HouseData[loaded][House_Inventory_Heroin]);
		cache_get_value_name_int(0, "house_inventory_weed", HouseData[loaded][House_Inventory_Weed]);
		cache_get_value_name_int(0, "house_inventory_rope", HouseData[loaded][House_Inventory_Rope]);
		cache_get_value_name_int(0, "house_inventory_lockpick", HouseData[loaded][House_Inventory_Lockpick]);
		cache_get_value_name_int(0, "house_inventory_drugs", HouseData[loaded][House_Inventory_Drugs]);
		cache_get_value_name_int(0, "house_inventory_metal", HouseData[loaded][House_Inventory_Metal]);
		cache_get_value_name_int(0, "house_inventory_parts", HouseData[loaded][House_Inventory_Parts]);
		cache_get_value_name_int(0, "house_inventory_gunpowder", HouseData[loaded][House_Inventory_Gunpowder]);
		cache_get_value_name_int(0, "house_inventory_device", HouseData[loaded][House_Inventory_Device]);
		
        if(HouseData[loaded][House_Outside_X] != 0 && HouseData[loaded][House_Sold] == 0)
      	{
     	    HouseData[loaded][House_Pickup_ID_Outside] = CreateDynamicPickup(1273, 1,HouseData[loaded][House_Outside_X], HouseData[loaded][House_Outside_Y], HouseData[loaded][House_Outside_Z], -1);
		}
        if(HouseData[loaded][House_Outside_X] != 0 && HouseData[loaded][House_Sold] == 1)
      	{
     	    HouseData[loaded][House_Pickup_ID_Outside] = CreateDynamicPickup(1272, 1,HouseData[loaded][House_Outside_X], HouseData[loaded][House_Outside_Y], HouseData[loaded][House_Outside_Z], -1);
		}
		if(HouseData[loaded][House_Inside_X] != 0)
		{
		    HouseData[loaded][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[loaded][House_Inside_X], HouseData[loaded][House_Inside_Y], HouseData[loaded][House_Inside_Z]+0.3, loaded);
		}
	}
	return 1;
}

forward GetPlayerHouseID(playerid);
public GetPlayerHouseID(playerid)
{
    if(cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "house_id", FoundPlayerHouseID[playerid]);
    }
    return 1;
}

forward GetNextHouseValue(playerid);
public GetNextHouseValue(playerid)
{
    if(cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "house_id", SQL_HOUSE_NEXTID);

        new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The next avaliable house id is: %i and it hasn't been set up yet", SQL_HOUSE_NEXTID);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);

		SQL_HOUSE_NEXTID = 0;
    }
    return 1;
}

forward GetNextWeedID(playerid);
public GetNextWeedID(playerid)
{
    if(cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "weed_id", SQL_WEED_NEXTID);
		
		if(SQL_WEED_NEXTID == 0) return SendPlayerErrorMessage(playerid, " There are no more weed slots allowed!");
		else
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
			
			new string[256];
			format(string, sizeof(string), "> %s starts planting some already some what ready bushes on the ground", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

			WeedData[SQL_WEED_NEXTID][Weed_Pickup_ID] = CreateDynamicObject(824, x, y, z-1.5,   0.00000, 0.00000, 90.00000);	
			
			WeedData[SQL_WEED_NEXTID][Weed_Model_ID] = 824;
			WeedData[SQL_WEED_NEXTID][Weed_Pos_X] = x;
			WeedData[SQL_WEED_NEXTID][Weed_Pos_Y] = y;
			WeedData[SQL_WEED_NEXTID][Weed_Pos_Z] = z;
			WeedData[SQL_WEED_NEXTID][Weed_Alive] = 100;
			WeedData[SQL_WEED_NEXTID][Weed_Cut] = 0;
			
			new fquery[2000];
			mysql_format(connection, fquery, sizeof(fquery), "UPDATE `weed_information` SET `weed_model_id` = '%d', `weed_pos_x` = '%f', `weed_pos_y` = '%f', `weed_pos_z` = '%f', `weed_alive` = '%d', `weed_cut` = '%d' WHERE `weed_id` = '%i' LIMIT 1", WeedData[SQL_WEED_NEXTID][Weed_Model_ID], WeedData[SQL_WEED_NEXTID][Weed_Pos_X],	WeedData[SQL_WEED_NEXTID][Weed_Pos_Y], WeedData[SQL_WEED_NEXTID][Weed_Pos_Z], WeedData[SQL_WEED_NEXTID][Weed_Alive], WeedData[SQL_WEED_NEXTID][Weed_Cut], SQL_WEED_NEXTID);
			mysql_tquery(connection, fquery);
			
			SendClientMessage(playerid, COLOR_YELLOW, " - You have just placed a weed plant on the ground, come back in due time to crop it!");
			
			PlayerData[playerid][Character_Has_Drugs] -= 10;
			
			SQL_WEED_NEXTID = 0;
		}
    }
    return 1;
}

forward LoadPlants();
public LoadPlants()
{
	new sloaded = 1;
    while(sloaded <= MAX_PLANTS)
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `weed_information` WHERE `weed_id` = '%i' LIMIT 1", sloaded);
    	mysql_tquery(connection, query, "LoadPlants_Results");

    	sloaded++;
	}
	printf("Server: Weed plants loaded into the server");
	return 1;
}

forward LoadPlants_Results();
public LoadPlants_Results()
{
    new rows = cache_num_rows();
	
	if(rows)
	{
	    new loaded;
		cache_get_value_name_int(0, "weed_id", loaded);
	    
		cache_get_value_name_int(0, "weed_id", WeedData[loaded][Weed_ID]);
		cache_get_value_name_int(0, "weed_pickup_id", WeedData[loaded][Weed_Pickup_ID]);
		cache_get_value_name_int(0, "weed_model_id", WeedData[loaded][Weed_Model_ID]);
		
		cache_get_value_name_float(0, "weed_pos_x", WeedData[loaded][Weed_Pos_X]);
		cache_get_value_name_float(0, "weed_pos_y", WeedData[loaded][Weed_Pos_Y]);
		cache_get_value_name_float(0, "weed_pos_z", WeedData[loaded][Weed_Pos_Z]);
		
		cache_get_value_name_int(0, "weed_alive", WeedData[loaded][Weed_Alive]);
		cache_get_value_name_int(0, "weed_cut", WeedData[loaded][Weed_Cut]);

        if(WeedData[loaded][Weed_Pos_X] != 0)
      	{
     	    WeedData[loaded][Weed_Pickup_ID] =  CreateDynamicObject(WeedData[loaded][Weed_Model_ID],WeedData[loaded][Weed_Pos_X], WeedData[loaded][Weed_Pos_Y], WeedData[loaded][Weed_Pos_Z]-1.5,0.00000, 0.00000, 90.00000);
		}
	}
	return 1;
}

forward IsPlayerNearWeedPlant(playerid);
public IsPlayerNearWeedPlant(playerid)
{
    for(new a = 1; a < MAX_PLANTS; a++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, WeedData[a][Weed_Pos_X], WeedData[a][Weed_Pos_Y], WeedData[a][Weed_Pos_Z]))
		{
			PlayerAtPlantID[playerid] = a;
			break;
		}
	}
	return 1;
}

forward IsPlayerNearFactionIcon(playerid);
public IsPlayerNearFactionIcon(playerid)
{
    for(new a = 1; a < MAX_FACTIONS; a++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[a][Faction_Icon_X], FactionData[a][Faction_Icon_Y], FactionData[a][Faction_Icon_Z]))
		{
			PlayerAtFactionID[playerid] = a;
			break;
		}
	}
	return 1;
}

forward IsPlayerNearHouseDoor(playerid);
public IsPlayerNearHouseDoor(playerid)
{
	new vwid;
	vwid = GetPlayerVirtualWorld(playerid);
	
    for(new a = 1; a < MAX_HOUSES; a++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseData[a][House_Outside_X], HouseData[a][House_Outside_Y], HouseData[a][House_Outside_Z]))
		{
			PlayerAtHouseID[playerid] = a;
			break;
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseData[a][House_Inside_X], HouseData[a][House_Inside_Y], HouseData[a][House_Inside_Z]) && HouseData[a][House_Inside_VW] == vwid)
		{
			PlayerAtHouseID[playerid] = a;
			break;
		}
	}
	return 1;
}

forward IsPlayerInsideHouse(playerid);
public IsPlayerInsideHouse(playerid)
{	
    for(new a = 1; a < MAX_HOUSES; a++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseData[a][House_Inside_X], HouseData[a][House_Inside_Y], HouseData[a][House_Inside_Z]))
		{
			PlayerAtHouseID[playerid] = a;
			break;
		}
	}
	return 1;
}

forward LoadBusinesses();
public LoadBusinesses()
{
	new sloaded = 1;
    while(sloaded <= MAX_BUSINESSES)
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `business_information` WHERE `business_id` = '%i' LIMIT 1", sloaded);
    	mysql_tquery(connection, query, "LoadBusinesses_Results");

    	sloaded++;
	}
	printf("Server: Businesses loaded into the server");
	return 1;
}

forward LoadBusinesses_Results();
public LoadBusinesses_Results()
{
    new rows = cache_num_rows();

	if(rows)
	{
	    new loaded;
	
		cache_get_value_name_int(0, "business_id", loaded);

		cache_get_value_name_int(0, "business_id", BusinessData[loaded][Business_ID]);
		cache_get_value_name_int(0, "business_price_money", BusinessData[loaded][Business_Price_Money]);
		cache_get_value_name_int(0, "business_price_coins", BusinessData[loaded][Business_Price_Coins]);
		cache_get_value_name_int(0, "business_sold", BusinessData[loaded][Business_Sold]);
		
		cache_get_value_name(0, "business_owner", BusinessData[loaded][Business_Owner], 50);
		cache_get_value_name(0, "business_name", BusinessData[loaded][Business_Name], 50);

		cache_get_value_name_int(0, "business_type", BusinessData[loaded][Business_Type]);
		cache_get_value_name_int(0, "business_alarm", BusinessData[loaded][Business_Alarm]);
		
		cache_get_value_name_int(0, "business_value", BusinessData[loaded][Business_Value]);
		cache_get_value_name_int(0, "business_robbed", BusinessData[loaded][Business_Robbed]);
		cache_get_value_name_int(0, "business_robbed_value", BusinessData[loaded][Business_Robbed_Value]);
		
		cache_get_value_name_float(0, "business_outside_x", BusinessData[loaded][Business_Outside_X]);
		cache_get_value_name_float(0, "business_outside_y", BusinessData[loaded][Business_Outside_Y]);
		cache_get_value_name_float(0, "business_outside_z", BusinessData[loaded][Business_Outside_Z]);
		cache_get_value_name_float(0, "business_outside_a", BusinessData[loaded][Business_Outside_A]);
		cache_get_value_name_int(0, "business_outside_interior", BusinessData[loaded][Business_Outside_Interior]);
		cache_get_value_name_int(0, "business_outside_vw", BusinessData[loaded][Business_Outside_VW]);
		
		cache_get_value_name_float(0, "business_inside_x", BusinessData[loaded][Business_Inside_X]);
		cache_get_value_name_float(0, "business_inside_y", BusinessData[loaded][Business_Inside_Y]);
		cache_get_value_name_float(0, "business_inside_z", BusinessData[loaded][Business_Inside_Z]);
		cache_get_value_name_float(0, "business_inside_a", BusinessData[loaded][Business_Inside_A]);
		cache_get_value_name_int(0, "business_inside_interior", BusinessData[loaded][Business_Inside_Interior]);
		cache_get_value_name_int(0, "business_inside_vw", BusinessData[loaded][Business_Inside_VW]);
		
		cache_get_value_name_float(0, "business_buypoint_x", BusinessData[loaded][Business_BuyPoint_X]);
		cache_get_value_name_float(0, "business_buypoint_y", BusinessData[loaded][Business_BuyPoint_Y]);
		cache_get_value_name_float(0, "business_buypoint_z", BusinessData[loaded][Business_BuyPoint_Z]);

        if(BusinessData[loaded][Business_Outside_X] != 0 && BusinessData[loaded][Business_Sold] == 0)
      	{
     	    BusinessData[loaded][Business_Pickup_ID_Outside] = CreateDynamicPickup(19523, 1,BusinessData[loaded][Business_Outside_X], BusinessData[loaded][Business_Outside_Y], BusinessData[loaded][Business_Outside_Z], -1);
		}
        if(BusinessData[loaded][Business_Outside_X] != 0 && BusinessData[loaded][Business_Sold] == 1)
      	{
     	    BusinessData[loaded][Business_Pickup_ID_Outside] = CreateDynamicPickup(19522, 1,BusinessData[loaded][Business_Outside_X], BusinessData[loaded][Business_Outside_Y], BusinessData[loaded][Business_Outside_Z], -1);
		}
		if(BusinessData[loaded][Business_Inside_X] != 0)
		{
		    BusinessData[loaded][Business_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,BusinessData[loaded][Business_Inside_X], BusinessData[loaded][Business_Inside_Y], BusinessData[loaded][Business_Inside_Z]+0.5, loaded);
		    CreateDynamicPickup(1274, 1,BusinessData[loaded][Business_BuyPoint_X], BusinessData[loaded][Business_BuyPoint_Y], BusinessData[loaded][Business_BuyPoint_Z], loaded);
		}
	}
	return 1;
}

forward GotoBusinessID(playerid);
public GotoBusinessID(playerid)
{
    if(cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "business_id", SQL_BUSINESS_ID);
		
		new Float:SQL_BUSINESS_INSIDE_X, Float:SQL_BUSINESS_INSIDE_Y, Float:SQL_BUSINESS_INSIDE_Z;
		cache_get_value_name_float(0, "business_inside_x", SQL_BUSINESS_INSIDE_X);
		cache_get_value_name_float(0, "business_inside_y", SQL_BUSINESS_INSIDE_Y);
		cache_get_value_name_float(0, "business_inside_z", SQL_BUSINESS_INSIDE_Z);

		SetPlayerPos(playerid, SQL_BUSINESS_INSIDE_X, SQL_BUSINESS_INSIDE_Y, SQL_BUSINESS_INSIDE_Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

        new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have been teleported to business ID: %i", SQL_BUSINESS_ID);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);

		SQL_BUSINESS_ID = 0;
		SQL_BUSINESS_INSIDE_X = 0;
		SQL_BUSINESS_INSIDE_X = 0;
		SQL_BUSINESS_INSIDE_X = 0;
    }
    return 1;
}

forward GetNextBusinessID(playerid);
public GetNextBusinessID(playerid)
{
    if(cache_num_rows() > 0)
    {
		cache_get_value_name_int(0, "business_id", SQL_BUSINESS_NEXTID);

        new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The next avaliable business id is: %i and it hasn't been set up yet", SQL_BUSINESS_NEXTID);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);

		SQL_BUSINESS_NEXTID = 0;
    }
    return 1;
}

forward IsPlayerNearBusinessDoor(playerid);
public IsPlayerNearBusinessDoor(playerid)
{
	new vwid;
	vwid = GetPlayerVirtualWorld(playerid);

    for(new a = 1; a < MAX_BUSINESSES; a++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessData[a][Business_Outside_X], BusinessData[a][Business_Outside_Y], BusinessData[a][Business_Outside_Z]))
		{
			PlayerAtBusinessID[playerid] = a;
			break;
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessData[a][Business_Inside_X], BusinessData[a][Business_Inside_Y], BusinessData[a][Business_Inside_Z]) && BusinessData[a][Business_Inside_VW] == vwid)
		{
			PlayerAtBusinessID[playerid] = a;
			break;
		}
	}
	return 1;
}

forward IsPlayerNearBusinessShopPoint(playerid);
public IsPlayerNearBusinessShopPoint(playerid)
{
    for(new a = 1; a < MAX_BUSINESSES; a++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessData[a][Business_BuyPoint_X], BusinessData[a][Business_BuyPoint_Y], BusinessData[a][Business_BuyPoint_Z]) && BusinessData[a][Business_Inside_VW] == GetPlayerVirtualWorld(playerid))
		{
			PlayerAtBusinessBuyPointID[playerid] = a;
			break;
		}
	}
	return 1;
}

forward LoadVehicles();
public LoadVehicles()
{
	new sloaded = 1;
    while(sloaded <= MAX_VEHICLES)
	{
	    new query[256];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_id` = '%i' LIMIT 1", sloaded);
    	mysql_tquery(connection, query, "LoadVehicles_Results");

    	sloaded++;
	}
	printf("Server: Vehicles loaded into the server");
	return 1;
}

forward LoadVehicles_Results();
public LoadVehicles_Results()
{
    new rows = cache_num_rows();

	if(rows)
	{
	    new loaded;
		cache_get_value_name_int(0, "vehicle_id", loaded);

		cache_get_value_name_int(0, "vehicle_id", VehicleData[loaded][Vehicle_ID]);
		cache_get_value_name_int(0, "vehicle_faction", VehicleData[loaded][Vehicle_Faction]);
		cache_get_value_name_int(0, "vehicle_job", VehicleData[loaded][Vehicle_Job]);
		cache_get_value_name(0, "vehicle_owner", VehicleData[loaded][Vehicle_Owner], 50);
		cache_get_value_name_int(0, "vehicle_used", VehicleData[loaded][Vehicle_Used]);
		
		cache_get_value_name_int(0, "vehicle_model", VehicleData[loaded][Vehicle_Model]);
		cache_get_value_name_int(0, "vehicle_color_1", VehicleData[loaded][Vehicle_Color_1]);
		cache_get_value_name_int(0, "vehicle_color_2", VehicleData[loaded][Vehicle_Color_2]);
		
		cache_get_value_name_float(0, "vehicle_spawn_x", VehicleData[loaded][Vehicle_Spawn_X]);
		cache_get_value_name_float(0, "vehicle_spawn_y", VehicleData[loaded][Vehicle_Spawn_Y]);
		cache_get_value_name_float(0, "vehicle_spawn_z", VehicleData[loaded][Vehicle_Spawn_Z]);
		cache_get_value_name_float(0, "vehicle_spawn_a", VehicleData[loaded][Vehicle_Spawn_A]);		
		cache_get_value_name_int(0, "vehicle_spawn_interior", VehicleData[loaded][Vehicle_Spawn_Interior]);
		cache_get_value_name_int(0, "vehicle_spawn_vw", VehicleData[loaded][Vehicle_Spawn_VW]);
		
		cache_get_value_name_int(0, "vehicle_lock", VehicleData[loaded][Vehicle_Lock]);
		cache_get_value_name_int(0, "vehicle_alarm", VehicleData[loaded][Vehicle_Alarm]);
		cache_get_value_name_int(0, "vehicle_gps", VehicleData[loaded][Vehicle_GPS]);
		cache_get_value_name_int(0, "vehicle_fuel", VehicleData[loaded][Vehicle_Fuel]);
		cache_get_value_name_int(0, "vehicle_type", VehicleData[loaded][Vehicle_Type]);
		cache_get_value_name_int(0, "vehicle_lock_status", VehicleData[loaded][Vehicle_Lock_Status]);
		cache_get_value_name_int(0, "vehicle_alarm_status", VehicleData[loaded][Vehicle_Alarm_Status]);
		
		cache_get_value_name(0, "vehicle_license_plate", VehicleData[loaded][Vehicle_License_Plate], 50);

        if(VehicleData[loaded][Vehicle_Used] == 0)
        {
            new vehicleid = AddStaticVehicleEx(402, 4572.7007, -1116.7518, 0.3459, 180, 1, 1, -1);

			new licenseplate[10];
			format(licenseplate, sizeof(licenseplate), "%s", VehicleData[loaded][Vehicle_License_Plate]);
			SetVehicleNumberPlate(vehicleid, licenseplate);
        }
        else if(VehicleData[loaded][Vehicle_Used] != 0 && VehicleData[loaded][Vehicle_Type] != 2)
        {
            new vehicleid = AddStaticVehicleEx(VehicleData[loaded][Vehicle_Model], VehicleData[loaded][Vehicle_Spawn_X], VehicleData[loaded][Vehicle_Spawn_Y], VehicleData[loaded][Vehicle_Spawn_Z], VehicleData[loaded][Vehicle_Spawn_A], VehicleData[loaded][Vehicle_Color_1], VehicleData[loaded][Vehicle_Color_2], -1);

			new licenseplate[10];
			format(licenseplate, sizeof(licenseplate), "%s", VehicleData[loaded][Vehicle_License_Plate]);
			SetVehicleNumberPlate(vehicleid, licenseplate);
        }
        else if(VehicleData[loaded][Vehicle_Used] != 0 && VehicleData[loaded][Vehicle_Type] >= 2)
        {
            new vehicleid = AddStaticVehicleEx(VehicleData[loaded][Vehicle_Model], VehicleData[loaded][Vehicle_Spawn_X], VehicleData[loaded][Vehicle_Spawn_Y], VehicleData[loaded][Vehicle_Spawn_Z], VehicleData[loaded][Vehicle_Spawn_A], VehicleData[loaded][Vehicle_Color_1], VehicleData[loaded][Vehicle_Color_2], 200);

			new licenseplate[10];
			format(licenseplate, sizeof(licenseplate), "%s", VehicleData[loaded][Vehicle_License_Plate]);
			SetVehicleNumberPlate(vehicleid, licenseplate);
        }

		VehicleData[loaded][Vehicle_Fuel] = 100;
	}
	return 1;
}

forward DealershipFindNextFreeVehicleID(playerid);
public DealershipFindNextFreeVehicleID(playerid)
{
	printf("DealershipFindNextFreeVehicleID - Started");
	
    new rows = cache_num_rows();
    new nextID = 0;

    if (rows > 0)
    {
		cache_get_value_name_int(0, "vehicle_id", nextID);
		
		printf("DealershipFindNextFreeVehicleID - Found an ID");

        HasPlayerConfirmedVehicleID[playerid] = nextID;
        
        IsNewVehicleType[playerid] = 1;

		if(HasPlayerConfirmedVehicleID[playerid] == 0)
		{
			printf("DealershipFindNextFreeVehicleID - Find Another ID Loop");
			
		    new query[128];
		    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
		    mysql_tquery(connection, query, "DealershipFindNextFreeVehicleID", "i", playerid);
		}
		else if(HasPlayerConfirmedVehicleID[playerid] > 0)
		{
			printf("DealershipFindNextFreeVehicleID - Player has found unused ID - Function Passed");
			
			if(IsNewVehicleType[playerid] == 1)
			{
				printf("DealershipFindNextFreeVehicleID - Unused ID - Vehicle Destroyed");
				
				DestroyVehicle(HasPlayerConfirmedVehicleID[playerid]);
						
				printf("DealershipFindNextFreeVehicleID - Unused ID - Vehicle Created");
					    
			    new vehicleid;
				
				if(DealershipType[playerid] == 1)
				{
					new randIndex = random(sizeof(DealershipOneParks));
					vehicleid = AddStaticVehicleEx(VehicleModelPurchasing[playerid], DealershipOneParks[randIndex][0], DealershipOneParks[randIndex][1], DealershipOneParks[randIndex][2], DealershipOneParks[randIndex][3], 1, 1, -1);
					
					VehicleData[vehicleid][Vehicle_Spawn_X] = DealershipOneParks[randIndex][0];
					VehicleData[vehicleid][Vehicle_Spawn_Y] = DealershipOneParks[randIndex][1];
					VehicleData[vehicleid][Vehicle_Spawn_Z] = DealershipOneParks[randIndex][2];
					VehicleData[vehicleid][Vehicle_Spawn_A] = DealershipOneParks[randIndex][3];
				}
				if(DealershipType[playerid] == 2)
				{
					new randIndex = random(sizeof(DealershipTwoParks));
					vehicleid = AddStaticVehicleEx(VehicleModelPurchasing[playerid], DealershipTwoParks[randIndex][0], DealershipTwoParks[randIndex][1], DealershipTwoParks[randIndex][2], DealershipTwoParks[randIndex][3], 1, 1, -1);
					
					VehicleData[vehicleid][Vehicle_Spawn_X] = DealershipTwoParks[randIndex][0];
					VehicleData[vehicleid][Vehicle_Spawn_Y] = DealershipTwoParks[randIndex][1];
					VehicleData[vehicleid][Vehicle_Spawn_Z] = DealershipTwoParks[randIndex][2];
					VehicleData[vehicleid][Vehicle_Spawn_A] = DealershipTwoParks[randIndex][3];				
				}
				if(DealershipType[playerid] == 3)
				{
					new randIndex = random(sizeof(DealershipThreeParks));
					vehicleid = AddStaticVehicleEx(VehicleModelPurchasing[playerid], DealershipThreeParks[randIndex][0], DealershipThreeParks[randIndex][1], DealershipThreeParks[randIndex][2], DealershipThreeParks[randIndex][3], 1, 1, -1);
					
					VehicleData[vehicleid][Vehicle_Spawn_X] = DealershipThreeParks[randIndex][0];
					VehicleData[vehicleid][Vehicle_Spawn_Y] = DealershipThreeParks[randIndex][1];
					VehicleData[vehicleid][Vehicle_Spawn_Z] = DealershipThreeParks[randIndex][2];
					VehicleData[vehicleid][Vehicle_Spawn_A] = DealershipThreeParks[randIndex][3];					
				}
				
			    VehicleData[vehicleid][Vehicle_ID] = HasPlayerConfirmedVehicleID[playerid];
		    	VehicleData[vehicleid][Vehicle_Used] = 1;
			    VehicleData[vehicleid][Vehicle_Model] = VehicleModelPurchasing[playerid];
				VehicleData[vehicleid][Vehicle_Color_1] = 1;
				VehicleData[vehicleid][Vehicle_Color_2] = 1;
				VehicleData[vehicleid][Vehicle_Fuel] = 100;
				VehicleData[vehicleid][Vehicle_License_Plate] = 0;

				new ownername[50];
				ownername = GetName(playerid);
				VehicleData[vehicleid][Vehicle_Owner] = ownername;


				if(strlen(VehicleData[vehicleid][Vehicle_License_Plate]) <= 1)
				{
				    new lpstring[10];
				    if(VehicleData[vehicleid][Vehicle_ID] < 10)
				    {
					    format(lpstring, sizeof(lpstring), "ORP 00%i", VehicleData[vehicleid][Vehicle_ID]);
					    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
				    }
				    else if(VehicleData[vehicleid][Vehicle_ID] >= 10 && VehicleData[vehicleid][Vehicle_ID] <= 100)
				    {
					    format(lpstring, sizeof(lpstring), "ORP 0%i", VehicleData[vehicleid][Vehicle_ID]);
					    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
				    }
				    else
				    {
					    format(lpstring, sizeof(lpstring), "ORP %i", VehicleData[vehicleid][Vehicle_ID]);
					    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
					}

				    new fquery[2000];
			        mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_license_plate` = '%s' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_License_Plate], VehicleData[vehicleid][Vehicle_ID]);
					mysql_tquery(connection, fquery);
				}

                new fquery[2000];
				mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_owner` = '%s', `vehicle_used` = '1', `vehicle_model` = '%i', `vehicle_color_1` = '%i', `vehicle_color_2` = '%i',`vehicle_spawn_x` = '%f', `vehicle_spawn_y` = '%f', `vehicle_spawn_z` = '%f', `vehicle_spawn_a` = '%f' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Owner], VehicleData[vehicleid][Vehicle_Model], VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2], VehicleData[vehicleid][Vehicle_Spawn_X], VehicleData[vehicleid][Vehicle_Spawn_Y], VehicleData[vehicleid][Vehicle_Spawn_Z], VehicleData[vehicleid][Vehicle_Spawn_A], VehicleData[vehicleid][Vehicle_ID]);
				mysql_tquery(connection, fquery);

				new licenseplate[10];
				format(licenseplate, sizeof(licenseplate), "%s", VehicleData[vehicleid][Vehicle_License_Plate]);
				SetVehicleNumberPlate(vehicleid, licenseplate);
				
				printf("DealershipFindNextFreeVehicleID - Unused ID - Vehicle Updated");
				
				PlayerData[playerid][Character_Total_Vehicles] ++;

                SetCameraBehindPlayer(playerid);

				VehicleModelPurchasing[playerid] = 0;
			    HasPlayerConfirmedVehicleID[playerid] = 0;
			    IsNewVehicleType[playerid] = 0;

			    VEHICLEPROCESS = 0;
			}
		}
    }
    else
    {
		printf("DealershipFindNextFreeVehicleID - Cannot Find Free Car");
		
        new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT MAX(`vehicle_id`) AS max_id FROM `vehicle_information`");
	    mysql_tquery(connection, query, "DealershipFindNextNewVehicleID", "i", playerid);
    }
    return 1;
}

forward DealershipFindNextNewVehicleID(playerid);
public DealershipFindNextNewVehicleID(playerid)
{
	printf("DealershipFindNextNewVehicleID - Started");
	
    new rows = cache_num_rows();
    new maxID = 0;

    if (rows > 0)
    {
		cache_get_value_name_int(0, "max_id", maxID);
		maxID = maxID + 1;
		
		HasPlayerConfirmedVehicleID[playerid] = maxID;

		printf("DealershipFindNextNewVehicleID - New DB ID %d", HasPlayerConfirmedVehicleID[playerid]);
	
	    IsNewVehicleType[playerid] = 2;
	
		if(HasPlayerConfirmedVehicleID[playerid] > 0)
		{
			printf("DealershipFindNextNewVehicleID - Player has found unique ID - Function Passed");
			
			if(IsNewVehicleType[playerid] == 2)
			{
				printf("DealershipFindNextNewVehicleID - New ID - Record Created");
				
		        new query[128];
			    mysql_format(connection, query, sizeof(query), "INSERT INTO `vehicle_information` (`vehicle_id`, `vehicle_used`) VALUES (%d, '0')", HasPlayerConfirmedVehicleID[playerid]);
			    mysql_tquery(connection, query);
	
				printf("DealershipFindNextNewVehicleID - New ID - Vehicle Created");
				
				new vehicleid;
				if(DealershipType[playerid] == 1)
				{
					new randIndex = random(sizeof(DealershipOneParks));
					vehicleid = AddStaticVehicleEx(VehicleModelPurchasing[playerid], DealershipOneParks[randIndex][0], DealershipOneParks[randIndex][1], DealershipOneParks[randIndex][2], DealershipOneParks[randIndex][3], 1, 1, -1);
					
					VehicleData[vehicleid][Vehicle_Spawn_X] = DealershipOneParks[randIndex][0];
					VehicleData[vehicleid][Vehicle_Spawn_Y] = DealershipOneParks[randIndex][1];
					VehicleData[vehicleid][Vehicle_Spawn_Z] = DealershipOneParks[randIndex][2];
					VehicleData[vehicleid][Vehicle_Spawn_A] = DealershipOneParks[randIndex][3];
				}
				if(DealershipType[playerid] == 2)
				{
					new randIndex = random(sizeof(DealershipTwoParks));
					vehicleid = AddStaticVehicleEx(VehicleModelPurchasing[playerid], DealershipTwoParks[randIndex][0], DealershipTwoParks[randIndex][1], DealershipTwoParks[randIndex][2], DealershipTwoParks[randIndex][3], 1, 1, -1);
					
					VehicleData[vehicleid][Vehicle_Spawn_X] = DealershipTwoParks[randIndex][0];
					VehicleData[vehicleid][Vehicle_Spawn_Y] = DealershipTwoParks[randIndex][1];
					VehicleData[vehicleid][Vehicle_Spawn_Z] = DealershipTwoParks[randIndex][2];
					VehicleData[vehicleid][Vehicle_Spawn_A] = DealershipTwoParks[randIndex][3];				
				}
				if(DealershipType[playerid] == 3)
				{
					new randIndex = random(sizeof(DealershipThreeParks));
					vehicleid = AddStaticVehicleEx(VehicleModelPurchasing[playerid], DealershipThreeParks[randIndex][0], DealershipThreeParks[randIndex][1], DealershipThreeParks[randIndex][2], DealershipThreeParks[randIndex][3], 1, 1, -1);
					
					VehicleData[vehicleid][Vehicle_Spawn_X] = DealershipThreeParks[randIndex][0];
					VehicleData[vehicleid][Vehicle_Spawn_Y] = DealershipThreeParks[randIndex][1];
					VehicleData[vehicleid][Vehicle_Spawn_Z] = DealershipThreeParks[randIndex][2];
					VehicleData[vehicleid][Vehicle_Spawn_A] = DealershipThreeParks[randIndex][3];					
				}
				
			    VehicleData[vehicleid][Vehicle_ID] = HasPlayerConfirmedVehicleID[playerid];
		    	VehicleData[vehicleid][Vehicle_Used] = 1;
			    VehicleData[vehicleid][Vehicle_Model] = VehicleModelPurchasing[playerid];
				VehicleData[vehicleid][Vehicle_Color_1] = 1;
				VehicleData[vehicleid][Vehicle_Color_2] = 1;
				VehicleData[vehicleid][Vehicle_Fuel] = 100;
				VehicleData[vehicleid][Vehicle_License_Plate] = 0;
	
				new ownername[50];
				ownername = GetName(playerid);
				VehicleData[vehicleid][Vehicle_Owner] = ownername;
	
				if(strlen(VehicleData[vehicleid][Vehicle_License_Plate]) <= 1)
				{
				    new lpstring[10];
				    if(VehicleData[vehicleid][Vehicle_ID] < 10)
				    {
					    format(lpstring, sizeof(lpstring), "ORP 00%i", VehicleData[vehicleid][Vehicle_ID]);
					    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
				    }
				    else if(VehicleData[vehicleid][Vehicle_ID] >= 10 && VehicleData[vehicleid][Vehicle_ID] <= 100)
				    {
					    format(lpstring, sizeof(lpstring), "ORP 0%i", VehicleData[vehicleid][Vehicle_ID]);
					    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
				    }
				    else
				    {
					    format(lpstring, sizeof(lpstring), "ORP %i", VehicleData[vehicleid][Vehicle_ID]);
					    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
					}
	
				    new fquery[2000];
			        mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_license_plate` = '%s' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_License_Plate], VehicleData[vehicleid][Vehicle_ID]);
					mysql_tquery(connection, fquery);
				}
	
	            new fquery[2000];
				mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_owner` = '%s', `vehicle_used` = '1', `vehicle_model` = '%i', `vehicle_color_1` = '%i', `vehicle_color_2` = '%i',`vehicle_spawn_x` = '%f', `vehicle_spawn_y` = '%f', `vehicle_spawn_z` = '%f', `vehicle_spawn_a` = '%f' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Owner], VehicleData[vehicleid][Vehicle_Model], VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2], VehicleData[vehicleid][Vehicle_Spawn_X], VehicleData[vehicleid][Vehicle_Spawn_Y], VehicleData[vehicleid][Vehicle_Spawn_Z], VehicleData[vehicleid][Vehicle_Spawn_A], VehicleData[vehicleid][Vehicle_ID]);
				mysql_tquery(connection, fquery);
	
				new licenseplate[10];
				format(licenseplate, sizeof(licenseplate), "%s", VehicleData[vehicleid][Vehicle_License_Plate]);
				SetVehicleNumberPlate(vehicleid, licenseplate);
				
				printf("DealershipFindNextNewVehicleID - New ID - Vehicle Updated");

				PlayerData[playerid][Character_Total_Vehicles] ++;
	
	            SetCameraBehindPlayer(playerid);
	
				VehicleModelPurchasing[playerid] = 0;
			    HasPlayerConfirmedVehicleID[playerid] = 0;
			    IsNewVehicleType[playerid] = 0;
	
			    VEHICLEPROCESS = 0;
			} 		
		}
    }	
    return 1;
}

forward CollectNextFreeVehicleID(playerid);
public CollectNextFreeVehicleID(playerid)
{
	printf("CollectNextFreeVehicleID - Started");
	
    new rows = cache_num_rows();
    new nextID = 0;
    new dstring[256];

    if (rows > 0)
    {
		printf("CollectNextFreeVehicleID - Player has found unused ID - Function Passed");
		
		cache_get_value_name_int(0, "vehicle_id", nextID);
        
        HasPlayerConfirmedVehicleID[playerid] = nextID;
        
        IsNewVehicleType[playerid] = 1;
        
		if(IsNewVehicleType[playerid] == 1)
		{
			new Float:px, Float:py, Float:pz, Float:pa;
			new Float:vehx, Float:vehy, Float:vehz, Float:veha;
			
			GetPlayerPos(playerid, px, py, pz);
		    GetPlayerFacingAngle(playerid, pa);
			    
			printf("CollectNextFreeVehicleID - Existing ID - Vehicle Destroyed");
			
		    DestroyVehicle(HasPlayerConfirmedVehicleID[playerid]);

		    new vehicleid;
			vehicleid = AddStaticVehicleEx(vcreatemodel[playerid], px, py, pz, pa, vcreatec1[playerid], vcreatec2[playerid], -1);
			
			printf("CollectNextFreeVehicleID - Existing ID - Vehicle Created");

			PutPlayerInVehicle(playerid, vehicleid, 0);

		    GetVehiclePos(vehicleid, vehx, vehy, vehz);
		    GetVehicleZAngle(vehicleid, veha);

		    VehicleData[vehicleid][Vehicle_ID] = HasPlayerConfirmedVehicleID[playerid];
	    	VehicleData[vehicleid][Vehicle_Used] = 1;
		    VehicleData[vehicleid][Vehicle_Model] = vcreatemodel[playerid];
			VehicleData[vehicleid][Vehicle_Color_1] = vcreatec1[playerid];
			VehicleData[vehicleid][Vehicle_Color_2] = vcreatec2[playerid];

			VehicleData[vehicleid][Vehicle_Spawn_X] = vehx;
			VehicleData[vehicleid][Vehicle_Spawn_Y] = vehy;
			VehicleData[vehicleid][Vehicle_Spawn_Z] = vehz;
			VehicleData[vehicleid][Vehicle_Spawn_A] = veha;

			VehicleData[vehicleid][Vehicle_Fuel] = 100;

			if(strlen(VehicleData[vehicleid][Vehicle_License_Plate]) <= 1)
			{
			    new lpstring[10];
			    if(VehicleData[vehicleid][Vehicle_ID] < 10)
			    {
				    format(lpstring, sizeof(lpstring), "ORP 00%i", VehicleData[vehicleid][Vehicle_ID]);
				    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
			    }
			    else if(VehicleData[vehicleid][Vehicle_ID] >= 10 && VehicleData[vehicleid][Vehicle_ID] <= 100)
			    {
				    format(lpstring, sizeof(lpstring), "ORP 0%i", VehicleData[vehicleid][Vehicle_ID]);
				    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
			    }
			    else
			    {
				    format(lpstring, sizeof(lpstring), "ORP %i", VehicleData[vehicleid][Vehicle_ID]);
				    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
				}

			    new fquery[2000];
		        mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_license_plate` = '%s' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_License_Plate], VehicleData[vehicleid][Vehicle_ID]);
				mysql_tquery(connection, fquery);
			}

            new fquery[2000];
			mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_used` = '1', `vehicle_model` = '%i', `vehicle_color_1` = '%i', `vehicle_color_2` = '%i',`vehicle_spawn_x` = '%f', `vehicle_spawn_y` = '%f', `vehicle_spawn_z` = '%f', `vehicle_spawn_a` = '%f' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Model], VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2], VehicleData[vehicleid][Vehicle_Spawn_X], VehicleData[vehicleid][Vehicle_Spawn_Y], VehicleData[vehicleid][Vehicle_Spawn_Z], VehicleData[vehicleid][Vehicle_Spawn_A], VehicleData[vehicleid][Vehicle_ID]);
			mysql_tquery(connection, fquery);

			new licenseplate[10];
			format(licenseplate, sizeof(licenseplate), "%s", VehicleData[vehicleid][Vehicle_License_Plate]);
			SetVehicleNumberPlate(vehicleid, licenseplate);
			
			printf("CollectNextFreeVehicleID - Existing ID - Vehicle Updated");

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just used an existing unused vehicle! %d", VehicleData[vehicleid][Vehicle_ID]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
				
			HasPlayerConfirmedVehicleID[playerid] = 0;
			IsNewVehicleType[playerid] = 0;
		}
    }
    else
    {
		printf("CollectNextNewIDValue - Started");
		
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT MAX(`vehicle_id`) AS max_id FROM `vehicle_information`");
	    mysql_tquery(connection, query, "CollectNextNewIDValue", "i", playerid);
    }
    return 1;
}

forward CollectNextNewIDValue(playerid);
public CollectNextNewIDValue(playerid)
{
    new rows = cache_num_rows();
    new maxID = 0;
    new dstring[256];

    if (rows > 0)
    {
		printf("CollectNextNewIDValue - New Vehicle ID Found - Function Passed");
		
		cache_get_value_name_int(0, "max_id", maxID);
		maxID = maxID + 1;
		
		HasPlayerConfirmedVehicleID[playerid] = maxID;
    
    	IsNewVehicleType[playerid] = 2;

		if(IsNewVehicleType[playerid] == 2)
		{
			new Float:px, Float:py, Float:pz, Float:pa;
			new Float:vehx, Float:vehy, Float:vehz, Float:veha;
			
			new query[128];
		    mysql_format(connection, query, sizeof(query), "INSERT INTO `vehicle_information` (`vehicle_id`, `vehicle_used`) VALUES (%d, '0')", HasPlayerConfirmedVehicleID[playerid]);
		    mysql_tquery(connection, query);
		
			printf("CollectNextNewIDValue - New Vehicle ID - Record Created");
				
			GetPlayerPos(playerid, px, py, pz);
		    GetPlayerFacingAngle(playerid, pa);
		    
		    new vehicleid;
			vehicleid = AddStaticVehicleEx(vcreatemodel[playerid], px, py, pz, pa, vcreatec1[playerid], vcreatec2[playerid], -1);
			
			printf("CollectNextNewIDValue - New Vehicle ID - Vehicle Created Model: %d | Colours: %d %d", vcreatemodel[playerid], vcreatec1[playerid], vcreatec2[playerid]);

			PutPlayerInVehicle(playerid, vehicleid, 0);

		    GetVehiclePos(vehicleid, vehx, vehy, vehz);
		    GetVehicleZAngle(vehicleid, veha);

		    VehicleData[vehicleid][Vehicle_ID] = HasPlayerConfirmedVehicleID[playerid];
	    	VehicleData[vehicleid][Vehicle_Used] = 1;
		    VehicleData[vehicleid][Vehicle_Model] = vcreatemodel[playerid];
			VehicleData[vehicleid][Vehicle_Color_1] = vcreatec1[playerid];
			VehicleData[vehicleid][Vehicle_Color_2] = vcreatec2[playerid];

			VehicleData[vehicleid][Vehicle_Spawn_X] = vehx;
			VehicleData[vehicleid][Vehicle_Spawn_Y] = vehy;
			VehicleData[vehicleid][Vehicle_Spawn_Z] = vehz;
			VehicleData[vehicleid][Vehicle_Spawn_A] = veha;
				
			VehicleData[vehicleid][Vehicle_Fuel] = 100;
				
			if(strlen(VehicleData[vehicleid][Vehicle_License_Plate]) <= 1)
			{
			    new lpstring[10];
			    if(VehicleData[vehicleid][Vehicle_ID] < 10)
			    {
				    format(lpstring, sizeof(lpstring), "ORP 00%i", VehicleData[vehicleid][Vehicle_ID]);
				    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
			    }
			    else if(VehicleData[vehicleid][Vehicle_ID] >= 10 && VehicleData[vehicleid][Vehicle_ID] <= 100)
			    {
				    format(lpstring, sizeof(lpstring), "ORP 0%i", VehicleData[vehicleid][Vehicle_ID]);
				    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
			    }
			    else
			    {
				    format(lpstring, sizeof(lpstring), "ORP %i", VehicleData[vehicleid][Vehicle_ID]);
				    VehicleData[vehicleid][Vehicle_License_Plate] = lpstring;
				}
				    
			    new fquery[2000];
		        mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_license_plate` = '%s' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_License_Plate], VehicleData[vehicleid][Vehicle_ID]);
				mysql_tquery(connection, fquery);
			}

            new fquery[2000];
			mysql_format(connection, fquery, sizeof(fquery), "UPDATE `vehicle_information` SET `vehicle_used` = '1', `vehicle_model` = '%i', `vehicle_color_1` = '%i', `vehicle_color_2` = '%i',`vehicle_spawn_x` = '%f', `vehicle_spawn_y` = '%f', `vehicle_spawn_z` = '%f', `vehicle_spawn_a` = '%f' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Model], VehicleData[vehicleid][Vehicle_Color_1], VehicleData[vehicleid][Vehicle_Color_2], VehicleData[vehicleid][Vehicle_Spawn_X], VehicleData[vehicleid][Vehicle_Spawn_Y], VehicleData[vehicleid][Vehicle_Spawn_Z], VehicleData[vehicleid][Vehicle_Spawn_A], VehicleData[vehicleid][Vehicle_ID]);
			mysql_tquery(connection, fquery);
				
			new licenseplate[10];
			format(licenseplate, sizeof(licenseplate), "%s", VehicleData[vehicleid][Vehicle_License_Plate]);
			SetVehicleNumberPlate(vehicleid, licenseplate);
			
			printf("CollectNextNewIDValue - New Vehicle ID - Vehicle Updated");

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just created a new vehicle! %d", VehicleData[vehicleid][Vehicle_ID]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			HasPlayerConfirmedVehicleID[playerid] = 0;
			IsNewVehicleType[playerid] = 0;
		}
    }
    return 1;
}

forward DynamicDoorEntry(playerid);
public DynamicDoorEntry(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInHospital[playerid] == 1) return SendPlayerErrorMessage(playerid, " You cannot leave the hospital just yet, please wait one minute before leaving!");
	    if(IsPlayerNearDynamicDoor(playerid))
	    {
	        new ddoorid = PlayerAtDoorID[playerid];
	        if(IsPlayerInRangeOfPoint(playerid, 1.5, DoorData[ddoorid][Door_Outside_X], DoorData[ddoorid][Door_Outside_Y], DoorData[ddoorid][Door_Outside_Z]) && DoorData[ddoorid][Door_Faction] > 0 && DoorData[ddoorid][Door_Faction] < 1000 && PlayerData[playerid][Character_Faction] != DoorData[ddoorid][Door_Faction])
	        {
                new tdstring1[500];
	    		format(tdstring1, sizeof(tdstring1), "~r~You Cannot Use This Door!");
				PlayerTextDrawSetString(playerid, PlayerText:Notification_Textdraw, tdstring1);
				PlayerTextDrawShow(playerid, PlayerText:Notification_Textdraw);

		        Notification_Timer[playerid] = SetTimerEx("OnTimerCancels", 4000, false, "i", playerid);
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 1.5, DoorData[ddoorid][Door_Inside_X], DoorData[ddoorid][Door_Inside_Y], DoorData[ddoorid][Door_Inside_Z]) && DoorData[ddoorid][Door_Faction] > 0 && DoorData[ddoorid][Door_Faction] < 1000 && PlayerData[playerid][Character_Faction] != DoorData[ddoorid][Door_Faction])
	        {
                new tdstring1[500];
	    		format(tdstring1, sizeof(tdstring1), "~r~You Cannot Use This Door!");
				PlayerTextDrawSetString(playerid, PlayerText:Notification_Textdraw, tdstring1);
				PlayerTextDrawShow(playerid, PlayerText:Notification_Textdraw);

		        Notification_Timer[playerid] = SetTimerEx("OnTimerCancels", 4000, false, "i", playerid);
	        }
			else if(IsPlayerInRangeOfPoint(playerid, 1.5, DoorData[ddoorid][Door_Outside_X], DoorData[ddoorid][Door_Outside_Y], DoorData[ddoorid][Door_Outside_Z]) && DoorData[ddoorid][Door_Faction] == 9999 && PlayerData[playerid][Character_VIP] == 0)
	        {
                new tdstring1[500];
	    		format(tdstring1, sizeof(tdstring1), "~r~You Cannot Use This Door!");
				PlayerTextDrawSetString(playerid, PlayerText:Notification_Textdraw, tdstring1);
				PlayerTextDrawShow(playerid, PlayerText:Notification_Textdraw);

		        Notification_Timer[playerid] = SetTimerEx("OnTimerCancels", 4000, false, "i", playerid);
	        }
			else if(IsPlayerInRangeOfPoint(playerid, 1.5, DoorData[ddoorid][Door_Inside_X], DoorData[ddoorid][Door_Inside_Y], DoorData[ddoorid][Door_Inside_Z]) && DoorData[ddoorid][Door_Faction] == 9999 && PlayerData[playerid][Character_VIP] == 0)
	        {
                new tdstring1[500];
	    		format(tdstring1, sizeof(tdstring1), "~r~You Cannot Use This Door!");
				PlayerTextDrawSetString(playerid, PlayerText:Notification_Textdraw, tdstring1);
				PlayerTextDrawShow(playerid, PlayerText:Notification_Textdraw);

		        Notification_Timer[playerid] = SetTimerEx("OnTimerCancels", 4000, false, "i", playerid);
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 1.5, DoorData[ddoorid][Door_Outside_X], DoorData[ddoorid][Door_Outside_Y], DoorData[ddoorid][Door_Outside_Z]))
			{
			    if(DoorData[ddoorid][Door_Inside_X] == 0)
			    {
			        SetPlayerPos(playerid, 1529.6, -1691.2, 13.3);
				   	SetPlayerInterior(playerid, 0);
				    SetPlayerVirtualWorld(playerid, 0);
				    
				    SendClientMessage(playerid, COLOR_YELLOW, "Your character has entered a door with no exit parameters set, please report to the admins!");
			    }
			    else
			    {
					SetPlayerPos(playerid, DoorData[ddoorid][Door_Inside_X], DoorData[ddoorid][Door_Inside_Y], DoorData[ddoorid][Door_Inside_Z]);
					SetPlayerInterior(playerid, DoorData[ddoorid][Door_Inside_Interior]);
					SetPlayerVirtualWorld(playerid, DoorData[ddoorid][Door_Inside_VW]);

					SetPlayerFacingAngle(playerid, DoorData[ddoorid][Door_Inside_A]);

	                PlayerAtDoorID[playerid] = 0;

	                TogglePlayerControllable(playerid,false);
					DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
				}
			}
   			else if(IsPlayerInRangeOfPoint(playerid, 1.5, DoorData[ddoorid][Door_Inside_X], DoorData[ddoorid][Door_Inside_Y], DoorData[ddoorid][Door_Inside_Z]))
			{
			    if(DoorData[ddoorid][Door_Inside_X] == 0)
			    {
			        SetPlayerPos(playerid, 1529.6, -1691.2, 13.3);
				   	SetPlayerInterior(playerid, 0);
				    SetPlayerVirtualWorld(playerid, false);
				    
				    SendClientMessage(playerid, COLOR_YELLOW, "Your character has entered a door with no exit parameters set, please report to the admins!");
			    }
			    else
			    {
					SetPlayerPos(playerid, DoorData[ddoorid][Door_Outside_X], DoorData[ddoorid][Door_Outside_Y], DoorData[ddoorid][Door_Outside_Z]);
					SetPlayerInterior(playerid, DoorData[ddoorid][Door_Outside_Interior]);
					SetPlayerVirtualWorld(playerid, DoorData[ddoorid][Door_Outside_VW]);

					SetPlayerFacingAngle(playerid, DoorData[ddoorid][Door_Outside_A]);

					PlayerAtDoorID[playerid] = 0;
				}
   			}
	    }
	    
	    if(IsPlayerNearHouseDoor(playerid))
	    {
	    	new hdoorid = PlayerAtHouseID[playerid];

	        if(IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z]) && HouseData[hdoorid][House_Inside_X] != 0)
			{
				if(HouseData[hdoorid][House_Lock_Active] == 1) return SendPlayerErrorMessage(playerid, " You cannot enter a locked house!");
				
				if(HouseData[hdoorid][House_Alarm_Active] == 1)
				{
					HOUSE_ALARM_ID = hdoorid;
										
	                new dstring[256];
					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} A property alarm has just been activated [/acceptjob 2]");
					SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
				}
				
			    SetPlayerPos(playerid, HouseData[hdoorid][House_Inside_X], HouseData[hdoorid][House_Inside_Y], HouseData[hdoorid][House_Inside_Z]);
				SetPlayerInterior(playerid, HouseData[hdoorid][House_Inside_Interior]);
				SetPlayerVirtualWorld(playerid, HouseData[hdoorid][House_Inside_VW]);
				SetPlayerFacingAngle(playerid, HouseData[hdoorid][House_Inside_A]);

                PlayerAtHouseID[playerid] = 0;

                TogglePlayerControllable(playerid,false);
				DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
			}
         	else if(IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z]) && HouseData[hdoorid][House_Inside_X] == 0)
			{
				if(HouseData[hdoorid][House_Lock_Active] == 1) return SendPlayerErrorMessage(playerid, " You cannot enter a locked house!");
				
				if(HouseData[hdoorid][House_Alarm_Active] == 1)
				{
					HOUSE_ALARM_ID = hdoorid;
										
	                new dstring[256];
					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} A property alarm has just been activated");
					SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
				}
				
				SetPlayerPos(playerid, 1529.6, -1691.2, 13.3);
			   	SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);

                PlayerAtHouseID[playerid] = 0;

                SendPlayerErrorMessage(playerid, " Your character has entered a house with no exit parameters set, please report to the admins!");

                TogglePlayerControllable(playerid,false);
				DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
			}
   			else if(IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[hdoorid][House_Inside_X], HouseData[hdoorid][House_Inside_Y], HouseData[hdoorid][House_Inside_Z]))
			{
				SetPlayerPos(playerid, HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z]);
				SetPlayerInterior(playerid, HouseData[hdoorid][House_Outside_Interior]);
				SetPlayerVirtualWorld(playerid, HouseData[hdoorid][House_Outside_VW]);
				SetPlayerFacingAngle(playerid, HouseData[hdoorid][House_Outside_A]);

				PlayerAtHouseID[playerid] = 0;
   			}
	    }
	    if(IsPlayerNearBusinessDoor(playerid))
	    {
	    	new bdoorid = PlayerAtBusinessID[playerid];
	        if(IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]) && HouseData[bdoorid][House_Inside_X] != 0)
			{
				SetPlayerPos(playerid, BusinessData[bdoorid][Business_Inside_X], BusinessData[bdoorid][Business_Inside_Y], BusinessData[bdoorid][Business_Inside_Z]);
				SetPlayerInterior(playerid, BusinessData[bdoorid][Business_Inside_Interior]);
				SetPlayerVirtualWorld(playerid, BusinessData[bdoorid][Business_Inside_VW]);
				SetPlayerFacingAngle(playerid, BusinessData[bdoorid][Business_Inside_A]);

                PlayerAtBusinessID[playerid] = 0;

                TogglePlayerControllable(playerid,false);
				DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]) && HouseData[bdoorid][House_Inside_X] != 0)
			{
			    SetPlayerPos(playerid, 1529.6, -1691.2, 13.3);
			   	SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);

                PlayerAtBusinessID[playerid] = 0;

                SendPlayerErrorMessage(playerid, " Your character has entered a business with no exit parameters set, please report to the admins!");

                TogglePlayerControllable(playerid,false);
				DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
			}
   			else if(IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[bdoorid][Business_Inside_X], BusinessData[bdoorid][Business_Inside_Y], BusinessData[bdoorid][Business_Inside_Z]))
			{
				SetPlayerPos(playerid, BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]);
				SetPlayerInterior(playerid, BusinessData[bdoorid][Business_Outside_Interior]);
				SetPlayerVirtualWorld(playerid, BusinessData[bdoorid][Business_Outside_VW]);
				SetPlayerFacingAngle(playerid, BusinessData[bdoorid][Business_Outside_A]);

				PlayerAtBusinessID[playerid] = 0;
   			}
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 1.5, 1498.2710,-1581.8063,13.5498))
     	{
			if(PlayerData[playerid][Character_Hotel_ID] == 1)
   			{
		    	SetPlayerPos(playerid, 267.2495,304.6546,999.1484);
				SetPlayerInterior(playerid, 2);
				SetPlayerVirtualWorld(playerid, PlayerData[playerid][Hotel_Character_Virtual_World]);
				SetPlayerFacingAngle(playerid, 277.2628);

                TogglePlayerControllable(playerid,false);
				DoorEntry_Timer[playerid] = SetTimerEx("DoorDelayTimer", 2000, false, "i", playerid);
            }
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 267.2495,304.6546,999.1484))
     	{
			if(PlayerData[playerid][Character_Hotel_ID] == 1)
   			{
		    	SetPlayerPos(playerid, 1498.2710,-1581.8063,13.5498);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerFacingAngle(playerid, 355.2835);
            }
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2142.4463,1626.2913,993.6882) && PlayerData[playerid][Character_Faction] == 1)
	    {
			ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, false, false, false, false, 0, SYNC_ALL);

	        new string[256];
	        format(string, sizeof(string), "> %s pulls their ID out of their pocket and swipes it on the pad", GetRPName(playerid));
	   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

	        if(BankDoorOpen == true)
	        {
	            MoveDynamicObject(BankDoor, 2144.19385, 1627.00122, 994.24762, 0.1, 0.00000, 0.00000, 180.00000);
				BankDoorOpen = false;
	        }
	        else if(BankDoorOpen == false)
	        {
	            MoveDynamicObject(BankDoor, 2145.1274, 1626.2031, 994.2476, 0.1, 0.00000, 0.00000, 270.00000);
	            BankDoorOpen = true;
	        }
	    }
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1777.9543, -1700.9966, 13.3870) && PlayerData[playerid][Character_Faction] == 2)
	    {
	        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, false, false, false, false, 0, SYNC_ALL);
	        
	        new string[256];
	        format(string, sizeof(string), "> %s pulls their ID out of their pocket and swipes it on the pad", GetRPName(playerid));
	   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        
	        if(LSFDGarageDoorOpen == true)
	        {
	            MoveDynamicObject(LSFDGarageDoor, 1775.91125, -1701.51245, 12.24770, 1, 0, 0, 0);
	            LSFDGarageDoorOpen = false;
	        }
	        else if(LSFDGarageDoorOpen == false)
	        {
	            MoveDynamicObject(LSFDGarageDoor, 1773.91125, -1701.51245, 12.24770, 1, 0, 0, 0);
	            LSFDGarageDoorOpen = true;
	        }
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1782.9009, -1705.1691, 16.7503) && PlayerData[playerid][Character_Faction] == 2)
	    {
	        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, false, false, false, false, 0, SYNC_ALL);
	        
	        new string[256];
	        format(string, sizeof(string), "> %s pulls their ID out of their pocket and swipes it on the pad", GetRPName(playerid));
	   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        
	        if(LSFDTopDoorOpen == true)
	        {
	            MoveDynamicObject(LSFDTopDoor, 1782.34351, -1707.03296, 15.71100, 1, 0, 0, 90.00000);
	            LSFDTopDoorOpen = false;
	        }
	        else if(LSFDTopDoorOpen == false)
	        {
	            MoveDynamicObject(LSFDTopDoor, 1782.34351, -1709.03296, 15.71100, 1, 0, 0, 90.00000);
	            LSFDTopDoorOpen = true;
	        }
	    }
	}
	return 1;
}

/* -------------- START OF STOCK FUNCTIONS FOR THE SCRIPT ---------------------- */

stock ContainsSymbols(const string[])
{
    for (new i = 0; i < strlen(string); i++)
    {
        // Check if character is NOT alphanumeric or space
        if (!((string[i] >= 'a' && string[i] <= 'z') || 
              (string[i] >= 'A' && string[i] <= 'Z') || 
              (string[i] >= '0' && string[i] <= '9') || 
              string[i] == ' '))
        {
            return true; // Symbol found
        }
    }
    return false; // No symbols found
}

stock GetPlayerID(const playername[])
{
  for(new i = 0; i <= MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if(IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if(IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock IsTruckVehicle(vehicleModel)
{
    for (new i = 0; i < TRUCK_VEHICLE_MODELS_COUNT; i++)
    {
        if (truckVehicleModels[i] == vehicleModel)
        {
            return 1;
        }
    }
    return 0;
}

stock IsMotorcycle(vehicleModel)
{
    for (new i = 0; i < MOTORCYCLE_MODELS_COUNT; i++)
    {
        if (motorcycleModels[i] == vehicleModel)
        {
            return 1;
        }
    }
    return 0;
}

stock IsAircraft(vehicleModel)
{
    for (new i = 0; i < AIRCRAFT_MODELS_COUNT; i++)
    {
        if (aircraftModels[i] == vehicleModel)
        {
            return 1;
        }
    }
    return 0;
}

stock IsBoat(vehicleModel)
{
    for (new i = 0; i < BOAT_MODELS_COUNT; i++)
    {
        if (boatModels[i] == vehicleModel)
        {
            return 1;
        }
    }
    return 0;
}

stock GetValidHouseJobNumber()
{
    new randomNumber;
    do
    {
        randomNumber = random(MAX_HOUSES) + 1;
    }
    while (HouseData[randomNumber][House_Outside_X] == 0);

    return randomNumber;
}

stock GetValidMechanicJobNumber()
{
    new randomNumber;
    new engine, lights, alarm, doors, bonnet, boot, objective;
    do
    {
        randomNumber = random(MAX_VEHICLES) + 1;
        GetVehicleParamsEx(randomNumber, engine, lights, alarm, doors, bonnet, boot, objective);
    }
    while (VehicleData[randomNumber][Vehicle_Used] == 0 && engine == 0);

    return randomNumber;
}

stock IsPlayerAtBootOfVehicle(playerid, vehicleid)
{
    new Float:playerPos[3];
    GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);

    vehicleid = GetClosestVehicle(playerPos[0], playerPos[1], playerPos[2]);

    if (vehicleid == 0)
        return 0;

    new Float:vehiclePos[3], Float:vehicleRotation[3];
    GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
    GetVehicleRotation(vehicleid, vehicleRotation[0], vehicleRotation[1], vehicleRotation[2]);

    new Float:backPos[3];
    backPos[0] = vehiclePos[0] - 1.5 * floatcos(vehicleRotation[2]);
    backPos[1] = vehiclePos[1] - 1.5 * floatsin(vehicleRotation[2]);
    backPos[2] = vehiclePos[2];

    if (GetDistanceBetweenCoords(playerPos[0], playerPos[1], playerPos[2],
                                  backPos[0], backPos[1], backPos[2]) < 1.0)
    {
        return 1;
    }

    return 0;
}

stock GetNearestVehicleModel(playerid, modelId)
{
    new 
        Float:fPos[3],
        Float:closestDistance = 100.0,
        Float:curDistance,
        closestVehicle = INVALID_VEHICLE_ID;

    for (new v = 0; v < MAX_VEHICLES; v++)
    {
        if (v != INVALID_VEHICLE_ID)
        {
            GetVehiclePos(v, fPos[0], fPos[1], fPos[2]);
            curDistance = GetPlayerDistanceFromPoint(playerid, fPos[0], fPos[1], fPos[2]);

            if (curDistance < closestDistance && GetVehicleModel(v) == modelId)
            {
                closestVehicle = v;
                closestDistance = curDistance;
            }
        }
    }

    return closestVehicle;
}

stock GetClosestVehicleModel(playerid)
{
    new vehicleId = GetClosestVehicle(playerid);
    
    if (vehicleId != INVALID_VEHICLE_ID)
    {
        return GetVehicleModel(vehicleId);
    }
    
    return 0;
}

stock GetClosestVehicle(playerid)
{
    new
        Float:fPos[3],
        Float:distance = 10,
        Float:curdistance,
        currentVehicle;

    for(new v = 0; v < MAX_VEHICLES; v++)
    {
        GetVehiclePos(v, fPos[0], fPos[1], fPos[2]);
        curdistance = GetPlayerDistanceFromPoint(playerid, fPos[0], fPos[1], fPos[2]);

        if(curdistance < distance)
        {
            currentVehicle = v;
            distance = curdistance;
        }
    }
    return currentVehicle;
}

stock IsDrivingVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Type] == 3)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsVIPVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Type] == 4)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsAdminVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Type] == 5)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsRentalVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Type] == 2)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsGarbageVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Job] == 2)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsPizzaVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Job] == 1)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsElectricianVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Job] == 3)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsBankVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 4)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsTowVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 5)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsTaxiVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 6)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsSchoolVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 16)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsTruckCoVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 7)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsDudeFixVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 8)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsGang1Vehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 10)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsGang2Vehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 11)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsGang3Vehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 12)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsGang4Vehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 13)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsGang5Vehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 14)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsGang6Vehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 15)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsLSPDVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 1)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsLSFDVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 2)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsLSMCVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 3)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock IsMechanicVehicle(playerid)
{
    new vehicle_handle = GetPlayerVehicleID(playerid);

    if (vehicle_handle == INVALID_VEHICLE_ID)
    {
        return 0;
    }

    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        if (VehicleData[i][Vehicle_ID] == vehicle_handle)
        {
            if (VehicleData[i][Vehicle_Faction] == 9)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    return 0;
}

stock GetVehicleModelName(modelID)
{
	new vehiclesName[25];
	if(modelID >= 400 && modelID <= 612)
	{
	    format(vehiclesName, sizeof(vehiclesName), "%s", VehicleModelNames[modelID - 400]);
	}
	return vehiclesName;
}

stock bool:IsEqual(const str1[], const str2[], bool:ignorecase = false) {
    new
        c1 = (str1[0] > 255) ? str1{0} : str1[0],
        c2 = (str2[0] > 255) ? str2{0} : str2[0]
    ;

    if (!c1 != !c2)
        return false;

    return !strcmp(str1, str2, ignorecase);
}

stock GetRPName(playerid)
{
	new name[MAX_PLAYER_NAME];
    if(HasPlayerUsedMask[playerid] > 0)
	{
		format(name, sizeof(name), "Stranger (%d)", HasPlayerUsedMask[playerid]);
	}
	else
	{
	    GetPlayerName(playerid, name, sizeof(name));
	}
    return name;
}
 
stock GetName(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    return name;
}

stock SendHelpMeMessage(color, const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Helper_Level] >= 1 && HasPlayerToggledHelpMe[i] == 0 || PlayerData[i][Moderator_Level] >= 1 && HasPlayerToggledHelpMe[i] == 0 || PlayerData[i][Admin_Level] >= 1 && HasPlayerToggledHelpMe[i] == 0)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendReportMessage(color, const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Moderator_Level] >= 1 || PlayerData[i][Admin_Level] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendHelperMessage(color, const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Helper_Level] >= 1 || PlayerData[i][Moderator_Level] >= 1 || PlayerData[i][Admin_Level] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendModeratorMessage(color, const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Moderator_Level] >= 1 || PlayerData[i][Admin_Level] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendAdminMessage(color, const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Admin_Level] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendFactionOOCMessage(factionid, color, const str[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Character_Faction] == factionid)
			{
			    SendClientMessage(i, color, str);
			}
		}
	}
	return 1;
}

stock SendFactionRadioMessage(factionid, color, const str[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Character_Faction] == factionid)
			{
			    if(IsPlayerOnDuty[i] == 1 && factionid == 1 || factionid == 2 || factionid == 3)
			    {
			    	SendClientMessage(i, color, str);
				}
			}
			else if(PlayerData[i][Character_Faction] == factionid && factionid > 3)
			{
				SendClientMessage(i, color, str);		
			}
		}
	}
	return 1;
}

stock SendGovRadioMessage(color, const str[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Character_Faction] == 1 || PlayerData[i][Character_Faction] == 2 || PlayerData[i][Character_Faction] == 3 || PlayerData[i][Character_Faction] == 5)
			{
			    if(IsPlayerOnDuty[i] == 1)
			    {
			    	SendClientMessage(i, color, str);
				}
			}
		}
	}
	return 1;
}

stock SendVIPMessage(color, const str[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][Character_VIP] == 1)
			{
			    SendClientMessage(i, color, str);
			}
		}
	}
	return 1;
}

stock SendGroupRadioMessage(radiofreq, color, const str[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerSetFreq[i] == radiofreq)
			{
			    SendClientMessage(i, color, str);
			}
		}
	}
	return 1;
}

stock ClearMessages(playerid)
{
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
    SendClientMessage(playerid, COLOR_YELLOW, "");
	return 1;
}
stock GetVehicleSpeed(vehicleid)
{
    new Float:x, Float:y, Float:z, vel;
    GetVehicleVelocity(vehicleid, x, y, z);
    vel = floatround( floatsqroot( x*x + y*y + z*z ) * 180 );
    return vel;
}

/* -------------- START OF GAMEPLAY CONTROLS FOR USERS ---------------------- */

// ANIMATION COMMANDS

CMD:stopanim(playerid, params[])
{
	if(IsPlayerInjured[playerid] == 0)
	{
		if(IsPlayerCuffed[playerid] == 1) return SendPlayerErrorMessage(playerid, " You cannot use this command while cuffed!");
		
		ClearAnimations(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);	
	}
	return 1;
}

CMD:bodypush(playerid, params[])
{
	ApplyAnimation(playerid, "GANGS", "shake_cara", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:lowbodypush(playerid, params[])
{
	ApplyAnimation(playerid, "GANGS", "shake_carSH", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:headbutt(playerid, params[])
{
	ApplyAnimation(playerid, "WAYFARER", "WF_Fwd", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:airkick(playerid, params[])
{
	ApplyAnimation(playerid, "FIGHT_C", "FightC_M", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:doorkick(playerid, params[])
{
	ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:leftslap(playerid, params[])
{
	ApplyAnimation(playerid, "ped", "BIKE_elbowL", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:elbow(playerid, params[])
{
	ApplyAnimation(playerid, "FIGHT_D", "FightD_3", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:coprun(playerid, params[])
{
	ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:handsup(playerid, params[])
{
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:piss(playerid, params[])
{
   	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return 1;
}

CMD:sneak(playerid, params[])
{	
	ApplyAnimation(playerid, "ped", "Player_Sneak", 4.1, true, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:drunk(playerid, params[])
{
	ApplyAnimation(playerid, "ped", "WALK_drunk", 4.1, true, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:bomb(playerid, params[])
{
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:robbing(playerid, params[])
{	
	ApplyAnimation(playerid, "ped", "ARRESTgun", 4.1, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:laugh(playerid, params[])
{	
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.1, false, false, false, false, 0, SYNC_ALL);
	return 1;
}

CMD:lookout(playerid, params[])
{
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:robman(playerid, params[])
{
	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.1, true, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:hide(playerid, params[])
{
	ApplyAnimation(playerid, "ped", "cower", 4.1, true, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:vomit(playerid, params[])
{
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, true, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:eatfood(playerid, params[])
{
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, true, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:slapass(playerid, params[])
{
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:fuckyou(playerid, params[])
{
	ApplyAnimation(playerid, "ped", "fucku", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:sleep(playerid, params[])
{
	ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:wavedown(playerid, params[])
{
	ApplyAnimation(playerid, "BD_FIRE", "BD_Panic_01", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:cpr(playerid, params[])
{
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:throw(playerid, params[])
{
	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:robbed(playerid, params[])
{
	ApplyAnimation(playerid, "SHOP", "SHP_Rob_GiveCash", 4.1, true, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:hurt(playerid, params[])
{
	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:fallover(playerid, params[])
{
	ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:smoke(playerid, params[])
{
	ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:crossarms(playerid, params[])
{
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, false, false, false, false, 0, SYNC_ALL);
    return 1;
}

CMD:sit(playerid, params[])
{
	switch(strval(params))
	{
	case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.1, true, false, false, false, 0, SYNC_ALL);
	case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.1, true, false, false, false, 0, SYNC_ALL);
	case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.1, true, false, false, false, 0, SYNC_ALL);
	case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.1, true, false, false, false, 0, SYNC_ALL);
	case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.1, true, false, false, false, 0, SYNC_ALL);
	default: SendPlayerTipMessage(playerid, " /sit [1-5]");
	}
	return 1;
}

CMD:dance(playerid, params[])
{
	switch(strval(params))
	{
	case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
	case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
	case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
	case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	default: SendPlayerTipMessage(playerid, " /dance [1-4]");
	}
	return 1;
}


// GENERAL SETTINGS COMMANDS

CMD:unstuck(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(IsPlayerCuffed[playerid] == 1 || IsPlayerTied[playerid] == 1) return SendPlayerErrorMessage(playerid, " You cannot use this command while tied or handcuffed!");
	else
	{
	    TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		
		if(VEHICLEPROCESS == 1 && VehicleModelPurchasing[playerid] != 0)
		{
			VEHICLEPROCESS = 0;
            HasPlayerConfirmedVehicleID[playerid] = 0;
			VehicleModelPurchasing[playerid] = 0;
		}
		
		if(IsPlayerInViewState_Binco[playerid] == 1)
		{			
			IsPlayerInViewState_Binco[playerid] = 0;
			Binco_Current_Outfit[playerid] = 0;
			Binco_New_Outfit[playerid] = 0;
			Binco_Current_VW[playerid] = 0;
			currentSkinIndex[playerid] = 0;
			
			PlayerTextDrawHide(playerid, PlayerText:Store_Textdraw);
		}
		
		new dstring1[156];
		format(dstring1, sizeof(dstring1), "- You have just unstuck yourself, the staff have been advised, do not abuse this!");
		SendClientMessage(playerid, COLOR_YELLOW, dstring1);
		
		new dstring[156];
		format(dstring, sizeof(dstring), "[Player Alert] %s (%d) has just used the /unstuck command, go check on them", GetName(playerid), playerid);
		SendHelperMessage(COLOR_CORAL, dstring);
	}
	return 1;
}

CMD:paymenttype(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	else
	{
	    if(PlayerDefaultPayment[playerid] == 1)
		{
			PlayerDefaultPayment[playerid] = 2;
			
			new dstring1[156];
			format(dstring1, sizeof(dstring1), "- You have just switched to paying with [COINS], this will effect only buying houses, businesses or factions!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring1);
		}
		else if(PlayerDefaultPayment[playerid] == 2)
		{
			PlayerDefaultPayment[playerid] = 1;
			
			new dstring1[156];
			format(dstring1, sizeof(dstring1), "- You have just switched to paying with [MONEY], this will effect only buying houses, businesses or factions!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring1);
		}
	}
	return 1;
}

CMD:changepassword(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new password[129];

		if(sscanf(params, "s[129]", password))
		{
			SendPlayerTipMessage(playerid, " /changepassword [newpassword]");
   		}
		else
		{			
		    new acquery[2000];
	        mysql_format(connection, acquery, sizeof(acquery), "UPDATE `user_accounts` SET `character_password` = '%s' WHERE `character_name` = '%e' LIMIT 1", password, PlayerData[playerid][Character_Name]);
    		mysql_tquery(connection, acquery);

		    new dstring[500];
			format(dstring, sizeof(dstring), "- You have just changed your password");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
		}
	}
	return 1;
}

// GENERAL CHAT COMMANDS
CMD:me(playerid, params[])
{
	if(isnull(params)) return SendPlayerTipMessage(playerid, " /me [ACTION]");

   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s %s", GetRPName(playerid), params);
   	
   	printf("CMD_ME: %s", params);
   	
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params)) return SendPlayerTipMessage(playerid, " /do [ACTION]");
	
 	new string[128];
  	format(string, sizeof(string), "> %s ((%s))", params, GetRPName(playerid));
   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
   	
   	printf("CMD_DO: %s", string);
   	
	return 1;
}

CMD:whisper(playerid, params[]) return cmd_w(playerid,params);
CMD:w(playerid, params[])
{
    if(isnull(params)) return SendPlayerTipMessage(playerid, " /w(hisper) [TEXT]");
    
	new message[128];
 	format(message, sizeof(message), "%s whispers: %s", GetRPName(playerid), params);
    SendNearbyMessage(playerid, 15.0, COLOR_WHITE, message);
	
	printf("WhisperChat: %s", message);
	
	return 1;
}

CMD:shout(playerid, params[]) return cmd_s(playerid,params);
CMD:s(playerid, params[])
{
    if(isnull(params)) return SendPlayerTipMessage(playerid, " /s(hout) [TEXT]");
    
	new message[128];
 	format(message, sizeof(message), "%s shouts: %s", GetRPName(playerid), params);
    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);
	
	printf("ShoutChat: %s", message);
	
	return 1;
}

CMD:pm(playerid, params[])
{
	new targetid, message[250];

	if(sscanf(params, "is[250]", targetid, message))
	{
		SendPlayerTipMessage(playerid, " /pm [targetid] [message]");
	}
	else
	{
		if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot private message yourself!");
		if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
		
		new dstring[500];
		format(dstring, sizeof(dstring), "(PM from %s (ID: %d): %s)", GetName(playerid), playerid, message);
		SendClientMessage(targetid, COLOR_YELLOW, dstring);
		
		new dstring1[500];
		format(dstring1, sizeof(dstring1), "(PM to %s (ID: %d): %s)", GetName(targetid), targetid, message);
		SendClientMessage(playerid, COLOR_YELLOW, dstring1);
	}
	return 1;
}

CMD:clearchat(playerid, params)
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    ClearMessages(playerid);
	}
	return 1;
}

CMD:b(playerid, params[]) return cmd_o(playerid, params);
CMD:ooc(playerid, params[]) return cmd_o(playerid,params);
CMD:o(playerid, params[])
{
    if(isnull(params)) return SendPlayerTipMessage(playerid, " /o(oc) [TEXT]");

	new message[128];
 	format(message, sizeof(message), "([OOC] %s: %s )", GetName(playerid), params);
	SendNearbyMessage(playerid, 30.0, COLOR_WHITE, message);

    printf("OOCChat: %s", message);
    
	return 1;
}

CMD:global(playerid, params[]) return cmd_g(playerid,params);
CMD:g(playerid, params[])
{
    if(isnull(params)) return SendPlayerTipMessage(playerid, " /g(lobal) [TEXT]");
	if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
    if(GLOBALCHAT == 1 && PlayerData[playerid][Admin_Level] == 0) return SendPlayerErrorMessage(playerid, " You cannot use this feature at the moment. No admin has enabled global chat");

	new message[128];
 	format(message, sizeof(message), "([GLOBAL CHAT] %s: %s )", GetName(playerid), params);
	SendClientMessageToAll(COLOR_ORANGE, message);

	printf("GlobalChat: %s", message);
	
	return 1;
}

CMD:helpme(playerid, params[])
{
	if(isnull(params)) return SendPlayerTipMessage(playerid, " /helpme [Question]");
	if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
    if(IsPlayerInHelpMeCooldown[playerid] == 1) return SendPlayerErrorMessage(playerid, " You have sent a helpme request already, please wait a short period before submitting another one!");
	
	new dstring1[156];
	format(dstring1, sizeof(dstring1), "- You have just submitted a help me request, please stand by for a private message!");
	SendClientMessage(playerid, COLOR_YELLOW, dstring1);
	
	IsPlayerInHelpMeCooldown[playerid] = 1;
	Cooldown_Timer[playerid] = SetTimerEx("Cooldown_Helpme_Timer", 15000, false, "i", playerid);
	
	new string[500];
	format(string, sizeof(string), "[HELP QUESTION]:{FFFFFF} %s (ID:%d) asked: %s", GetName(playerid), playerid, params);
	SendHelpMeMessage(COLOR_AQUABLUE, string);
	
	printf("Helpme Question: %s asks %s", GetName(playerid), params);
	
	return 1;
}

	// GENERAL PLAYER COMMANDS
CMD:mask(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Has_Mask] == 0) return SendPlayerErrorMessage(playerid, " You do not have a mask!");
		else
    	{
			if(HasPlayerUsedMask[playerid] == 0)
			{
				new FindMaskID, found, Float:x, Float:y, Float:z, vw;
				FindMaskID = 10000 + random(100000);
				found = 0;
				
				GetPlayerPos(playerid, x, y, z);
				vw = GetPlayerVirtualWorld(playerid);
				
				while(!found)
				{
					FindMaskID = 10000 + random(100000);
					found = 1;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(HasPlayerUsedMask[i] == FindMaskID)
						{						
							found = 0;
							break;
						}
					}
				}
				
				HasPlayerUsedMask[playerid] = FindMaskID;

				textLabelID[playerid] = Create3DTextLabel("Stranger %d", 0xFFFFFFFF, x, y, z + 0.5, 15.0, vw, false, FindMaskID);
				Attach3DTextLabelToPlayer(Text3D:textLabelID[playerid], playerid, 0.0, 0.0, 0.0);
				
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s removes a piece of fabric from their pocket and wraps it around their face", GetRPName(playerid));
				
				for (new i = 0; i < MAX_PLAYERS; i++)
			    {
			        ShowPlayerNameTagForPlayer(i, playerid, false);
			    }
			}
			else if(HasPlayerUsedMask[playerid] > 0)
			{
				HasPlayerUsedMask[playerid] = 0;
				Delete3DTextLabel(Text3D:textLabelID[playerid]);
				
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s removes a piece of fabric from around their face", GetRPName(playerid));
				
				for (new i = 0; i < MAX_PLAYERS; i++)
			    {
			        ShowPlayerNameTagForPlayer(i, playerid, true);
			    }
			}
		}
    }
    return 1;
}

CMD:getlicense(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 1376.2294,-1423.9144,13.5768))
    	{
			if(HasGPSBeenDisabled[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently already in an action that requires a checkpoint to be cleared!");
        	ShowPlayerDialog(playerid, DIALOG_LICENSE_VIEW, DIALOG_STYLE_LIST, "License School - Options", "1. Motorcycle License ($240)\n2. Car License ($500)\n3. Truck License ($1,000)", "Start", "Close");
     	}
        else return SendPlayerErrorMessage(playerid, " You are not near the license school help desk!");
	}
	return 1;
}

CMD:stoplicense(playerid, params[])
{
    if(DrivingBikePlayer[playerid] == 1 || DrivingTruckPlayer[playerid] == 1 || DrivingCarPlayer[playerid] == 1)
    {
        GPSOn[playerid] = false;
		HasGPSBeenDisabled[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "You have just cancelled completing your driving course!");
	
		DrivingBikePlayer[playerid] = 0;
		DrivingTruckPlayer[playerid] = 0;
		DrivingCarPlayer[playerid] = 0;
		
		DrivingBikeCount[playerid] = 0;
		DrivingTruckCount[playerid] = 0;
		DrivingCarCount[playerid] = 0;
		
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}
    else return SendPlayerErrorMessage(playerid, " You are not completing a driving course at this time!");
    return 1;
}

CMD:houses(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    new cquery[256];
		mysql_format(connection, cquery, sizeof(cquery), "SELECT * FROM `house_information` WHERE `house_owner` = '%e' ", GetName(playerid));
		mysql_tquery(connection, cquery, "OnHouseCheck", "i", playerid);
	}
	return 1;
}

CMD:rego(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    new cquery[256];
		mysql_format(connection, cquery, sizeof(cquery), "SELECT * FROM `vehicle_information` WHERE `vehicle_owner` = '%e' ", GetName(playerid));
		mysql_tquery(connection, cquery, "OnRegistrationCheck", "i", playerid);
	}
	return 1;
}

CMD:showrego(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		new targetid;

		if(sscanf(params, "i", targetid))
		{
			SendPlayerTipMessage(playerid, " /showrego [targetid]");
   		}
		else
		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot show your registration to yourself with this command! [/rego]");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
					
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
			
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot show your registration to yourself with this command! [/rego]");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			
		    new cquery[256];
			mysql_format(connection, cquery, sizeof(cquery), "SELECT * FROM `vehicle_information` WHERE `vehicle_owner` = '%e' ", GetName(playerid));
			mysql_tquery(connection, cquery, "OnRegistrationShow", "i", targetid);
		}
	}
	return 1;
}

CMD:licenses(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new string[256], string1[256], string2[256], string3[256], string4[256], string5[256], string6[256], string7[256];
	    new L1[30], L2[30], L3[30], L4[30], L5[30], L6[30];
	
	    if(PlayerData[playerid][Character_License_Car] == 1) { format(L1, sizeof(L1), "{99D87D}Issued"); }
   		else if(PlayerData[playerid][Character_License_Car] == 0) { format(L1, sizeof(L1), "{F08080}Not Obtained"); }

        if(PlayerData[playerid][Character_License_Truck] == 1) { format(L2, sizeof(L2), "{99D87D}Issued"); }
        else if(PlayerData[playerid][Character_License_Truck] == 0) { format(L2, sizeof(L2), "{F08080}Not Obtained"); }

        if(PlayerData[playerid][Character_License_Motorcycle] == 1) { format(L3, sizeof(L3), "{99D87D}Issued"); }
        else if(PlayerData[playerid][Character_License_Motorcycle] == 0) { format(L3, sizeof(L3), "{F08080}Not Obtained"); }

        if(PlayerData[playerid][Character_License_Boat] == 1) { format(L4, sizeof(L4), "{99D87D}Issued"); }
        else if(PlayerData[playerid][Character_License_Boat] == 0) { format(L4, sizeof(L4), "{F08080}Not Obtained"); }

        if(PlayerData[playerid][Character_License_Flying] == 1) { format(L5, sizeof(L5), "{99D87D}Issued"); }
        else if(PlayerData[playerid][Character_License_Flying] == 0) { format(L5, sizeof(L5), "{F08080}Not Obtained"); }

        if(PlayerData[playerid][Character_License_Firearms] == 1) { format(L6, sizeof(L6), "{99D87D}Issued"); }
        else if(PlayerData[playerid][Character_License_Firearms] == 0) { format(L6, sizeof(L6), "{F08080}Not Obtained"); }

  		format(string, sizeof(string), "> %s has removed their ID from their pocket and looks at it", GetRPName(playerid));
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

		format(string1, sizeof(string1), "*** {F2F746}Your Licenses{FFFFFF} ***");
		SendClientMessage(playerid, COLOR_WHITE, string1);

		format(string2, sizeof(string2), "> Car License:{FFFFFF} %s", L1);
		SendClientMessage(playerid, COLOR_WHITE, string2);
		format(string3, sizeof(string3), "> Truck License:{FFFFFF} %s", L2);
		SendClientMessage(playerid, COLOR_WHITE, string3);
		format(string4, sizeof(string4), "> Motorcycle License:{FFFFFF} %s", L3);
		SendClientMessage(playerid, COLOR_WHITE, string4);
		format(string5, sizeof(string5), "> Boat License:{FFFFFF} %s", L4);
		SendClientMessage(playerid, COLOR_WHITE, string5);
		format(string6, sizeof(string6), "> Pilot License:{FFFFFF} %s", L5);
		SendClientMessage(playerid, COLOR_WHITE, string6);
		format(string7, sizeof(string7), "> Weapon License:{FFFFFF} %s", L6);
		SendClientMessage(playerid, COLOR_WHITE, string7);
	}
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new targetid;

		if(sscanf(params, "i", targetid))
		{
			SendPlayerTipMessage(playerid, " /showlicenses [targetid]");
   		}
		else
		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot show your license to yourself with this command! [/licenses]");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
					
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
			
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot show your license to yourself with this command! [/licenses]");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			
		    new string[256], string1[256], string2[256], string3[256], string4[256], string5[256], string6[256], string7[256];
		    new L1[30], L2[30], L3[30], L4[30], L5[30], L6[30];
		    
		    if(PlayerData[playerid][Character_License_Car] == 1) { format(L1, sizeof(L1), "{99D87D}Issued"); }
	   		else if(PlayerData[playerid][Character_License_Car] == 0) { format(L1, sizeof(L1), "{F08080}Not Obtained"); }
	
	        if(PlayerData[playerid][Character_License_Truck] == 1) { format(L2, sizeof(L2), "{99D87D}Issued"); }
	        else if(PlayerData[playerid][Character_License_Truck] == 0) { format(L2, sizeof(L2), "{F08080}Not Obtained"); }
	
	        if(PlayerData[playerid][Character_License_Motorcycle] == 1) { format(L3, sizeof(L3), "{99D87D}Issued"); }
	        else if(PlayerData[playerid][Character_License_Motorcycle] == 0) { format(L3, sizeof(L3), "{F08080}Not Obtained"); }
	
	        if(PlayerData[playerid][Character_License_Boat] == 1) { format(L4, sizeof(L4), "{99D87D}Issued"); }
	        else if(PlayerData[playerid][Character_License_Boat] == 0) { format(L4, sizeof(L4), "{F08080}Not Obtained"); }
	
	        if(PlayerData[playerid][Character_License_Flying] == 1) { format(L5, sizeof(L5), "{99D87D}Issued"); }
	        else if(PlayerData[playerid][Character_License_Flying] == 0) { format(L5, sizeof(L5), "{F08080}Not Obtained"); }
	
	        if(PlayerData[playerid][Character_License_Firearms] == 1) { format(L6, sizeof(L6), "{99D87D}Issued"); }
	        else if(PlayerData[playerid][Character_License_Firearms] == 0) { format(L6, sizeof(L6), "{F08080}Not Obtained"); }

	  		format(string, sizeof(string), "> %s has removed their ID from their pocket and handed it to %s", GetRPName(playerid), GetRPName(targetid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			format(string1, sizeof(string1), "*** %s Licenses ***", PlayerData[playerid][Character_Name]);
			SendClientMessage(targetid, COLOR_WHITE, string1);
	
			format(string2, sizeof(string2), "> Car License:{FFFFFF} %s", L1);
			SendClientMessage(targetid, COLOR_WHITE, string2);
			format(string3, sizeof(string3), "> Truck License:{FFFFFF} %s", L2);
			SendClientMessage(targetid, COLOR_WHITE, string3);
			format(string4, sizeof(string4), "> Motorcycle License:{FFFFFF} %s", L3);
			SendClientMessage(targetid, COLOR_WHITE, string4);
			format(string5, sizeof(string5), "> Boat License:{FFFFFF} %s", L4);
			SendClientMessage(targetid, COLOR_WHITE, string5);
			format(string6, sizeof(string6), "> Pilot License:{FFFFFF} %s", L5);
			SendClientMessage(targetid, COLOR_WHITE, string6);
			format(string7, sizeof(string7), "> Weapon License:{FFFFFF} %s", L6);
			SendClientMessage(targetid, COLOR_WHITE, string7);
		}
	}
	return 1;
}

CMD:pockets(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		new string[256];
  		format(string, sizeof(string), "> %s has just searched their pockets", GetRPName(playerid));
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

        new titlestring[100], bodytext[2000];
		format(titlestring, sizeof(titlestring), "%s - Pockets", GetName(playerid));
		format(bodytext, sizeof(bodytext), "Ropes\t%i\nFuel Cans\t%i\nLockpicks\t%i\nDrugs\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood\t%i\nDrinks\t%i\nAlcohol\t%i\nHacking Devices\t%i\nMetal Pieces\t%i\nGun Powder\t%i\nWeapon Parts\t%i\nHouse Lock\t%i\nHouse Alarm\t%i", PlayerData[playerid][Character_Has_Rope], PlayerData[playerid][Character_Has_Fuelcan], PlayerData[playerid][Character_Has_Lockpick], PlayerData[playerid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[playerid][Character_Has_Food], PlayerData[playerid][Character_Has_Drinks], PlayerData[playerid][Character_Has_Alcohol], PlayerData[playerid][Character_Has_Device], PlayerData[playerid][Character_Has_Metal], PlayerData[playerid][Character_Has_Gunpowder], PlayerData[playerid][Character_Has_Parts], PlayerData[playerid][Character_House_Lock], PlayerData[playerid][Character_House_Alarm]);

		ShowPlayerDialog(playerid, DIALOG_PLAYER_POCKETS, DIALOG_STYLE_TABLIST, titlestring, bodytext, "Close", "");
	}
	return 1;
}

CMD:storage(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{		
		if(IsPlayerInsideHouse(playerid) && PlayerAtHouseID[playerid] != 0)
		{
	     	new string[256];
	     	new hdoorid;
	
			IsPlayerLookingInSafe[playerid] = PlayerAtHouseID[playerid];
			hdoorid = IsPlayerLookingInSafe[playerid];
			
			if(HouseData[hdoorid][House_Inventory_Safe] == 0) return SendPlayerErrorMessage(playerid, " This house does not have a safe that you can open!");
			else
			{
				if(hdoorid != 0 && strcmp(HouseData[hdoorid][House_Owner], PlayerData[playerid][Character_Name], false) != 0)
				{
				    SendPlayerErrorMessage(playerid, " You do not own this house, use /breaksafe!");
				}
				else
				{
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
					format(string, sizeof(string), "> %s has opened their safe and starts going through the items", GetRPName(playerid));
					SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
					
					PlayerAtHouseID[playerid] = 0;
				}
			}
		}
		else return SendPlayerErrorMessage(playerid, " You cannot use this command because you are not inside a house!");
	}
	return 1;
}

CMD:breaksafe(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{		
		if(IsPlayerInsideHouse(playerid) && PlayerAtHouseID[playerid] != 0)
		{
	     	new string[256];
	     	new hdoorid;
	
			IsPlayerLookingInSafe[playerid] = PlayerAtHouseID[playerid];
			hdoorid = IsPlayerLookingInSafe[playerid];
			
			if(HouseData[hdoorid][House_Inventory_Safe] == 0) return SendPlayerErrorMessage(playerid, " This house does not have a safe that you can open!");
			else
			{
				if(hdoorid != 0 && PlayerData[playerid][Character_Has_Lockpick] >= 10)
				{
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
					format(string, sizeof(string), "> %s has lockpicked the safe and broken into it", GetRPName(playerid));
					SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
					
					PlayerData[playerid][Character_Has_Lockpick] -= 10;
					
					new safetitlestring[100], safebodytext[2000];
					safetitlestring = "";
					safebodytext = "";
					
					format(safetitlestring, sizeof(safetitlestring), "%s - Safe Contents", HouseData[hdoorid][House_Address]);
					format(safebodytext, sizeof(safebodytext), "Cocaine\t%i\nHeroin\t%i\nWeed\t%i\nDrugs\t%i\nMetal\t%i\nParts\t%i\nGunpowder\t%i\nDevice\t%i\nLockpick\t%i\nRope\t%i", HouseData[hdoorid][House_Inventory_Cocaine],HouseData[hdoorid][House_Inventory_Heroin],HouseData[hdoorid][House_Inventory_Weed],HouseData[hdoorid][House_Inventory_Drugs],HouseData[hdoorid][House_Inventory_Metal],HouseData[hdoorid][House_Inventory_Parts],HouseData[hdoorid][House_Inventory_Gunpowder],HouseData[hdoorid][House_Inventory_Device],HouseData[hdoorid][House_Inventory_Lockpick],HouseData[hdoorid][House_Inventory_Rope]);
					ShowPlayerDialog(playerid, DIALOG_HOUSE_SAFE, DIALOG_STYLE_TABLIST, safetitlestring, safebodytext, "Select", "Close");
					
					PlayerAtHouseID[playerid] = 0;
				}
				else return SendPlayerErrorMessage(playerid, " You need 10 lockpicks before you can break into a safe!");
			}
		}
		else return SendPlayerErrorMessage(playerid, " You cannot use this command because you are not inside a house!");
	}
	return 1;
}

CMD:rent(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Hotel_ID] == 0)
        {
            new dstring[250];
            
            if(IsPlayerInRangeOfPoint(playerid, 3.0, 1498.2710,-1581.8063,13.5498))
        	{
        	    if(PlayerData[playerid][Character_Money] >= 250)
        	    {
        	        PlayerData[playerid][Character_Money] += -250;

					new text_value1[256];
					format(text_value1, sizeof(text_value1), "~r~~h~-$250");
					GameTextForPlayer(playerid, text_value1, 3000, 1);
        	        
	            	PlayerData[playerid][Character_Hotel_ID] = 1;

					PlayerData[playerid][Hotel_Character_Pos_X] = 272.5362;
				    PlayerData[playerid][Hotel_Character_Pos_Y] = 307.3446;
				    PlayerData[playerid][Hotel_Character_Pos_Z] = 999.1484;
				    PlayerData[playerid][Hotel_Character_Pos_Angle] = 0;

					PlayerData[playerid][Hotel_Character_Interior_ID] = 2;
				    PlayerData[playerid][Hotel_Character_Virtual_World] = playerid+1;

				    format(dstring, sizeof(dstring), "- You have just rented a room at the Trump Hotel!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					new updatequery[2000];
     				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_hotel_id` = '%i', \
																											`hotel_character_pos_x` = '%f', \
																											`hotel_character_pos_y` = '%f', \
																											`hotel_character_pos_z` = '%f', \
																											`hotel_character_pos_angle` = '%f', \
																											`hotel_character_interior_id` = '%i', \
																											`hotel_character_virtual_world` = '%i' WHERE `character_name` = '%e' LIMIT 1" \
																											, PlayerData[playerid][Character_Hotel_ID] \
																											, PlayerData[playerid][Hotel_Character_Pos_X] \
																											, PlayerData[playerid][Hotel_Character_Pos_Y] \
																											, PlayerData[playerid][Hotel_Character_Pos_Z] \
																											, PlayerData[playerid][Hotel_Character_Pos_Angle] \
																											, PlayerData[playerid][Hotel_Character_Interior_ID] \
																											, PlayerData[playerid][Hotel_Character_Virtual_World], GetName(playerid));
				    mysql_tquery(connection, updatequery);
				}
				else return SendPlayerErrorMessage(playerid, " You do not have $250 to rent this property!");
	        }
	        else return SendPlayerErrorMessage(playerid, " You are not at a rental property!");
        }
        else return SendPlayerErrorMessage(playerid, " You already are renting a room somewhere else, try again later!");
    }
	return 1;
}

CMD:unrent(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Hotel_ID] == 1)
        {
            new dstring[250];

            if(IsPlayerInRangeOfPoint(playerid, 3.0, 1498.2710,-1581.8063,13.5498))
        	{
        	    PlayerData[playerid][Character_Money] += 50;

				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$50");
				GameTextForPlayer(playerid, text_value1, 3000, 1);

				PlayerData[playerid][Character_Hotel_ID] = 0;

				PlayerData[playerid][Hotel_Character_Pos_X] = 0;
			    PlayerData[playerid][Hotel_Character_Pos_Y] = 0;
			    PlayerData[playerid][Hotel_Character_Pos_Z] = 0;
			    PlayerData[playerid][Hotel_Character_Pos_Angle] = 0;

				PlayerData[playerid][Hotel_Character_Interior_ID] = 0;
			    PlayerData[playerid][Hotel_Character_Virtual_World] = 0;

			    format(dstring, sizeof(dstring), "- You have just unrented a room at the Trump Hotel and received a $50 deposit back!");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_hotel_id` = '0', \
																											`hotel_character_pos_x` = '0', \
																											`hotel_character_pos_y` = '0', \
																											`hotel_character_pos_z` = '0', \
																											`hotel_character_pos_angle` = '0', \
																											`hotel_character_interior_id` = '0', \
																											`hotel_character_virtual_world` = '0' WHERE `character_name` = '%e' LIMIT 1", GetName(playerid));
	        }
	        else return SendPlayerErrorMessage(playerid, " You are not at a rental property!");
        }
        else return SendPlayerErrorMessage(playerid, " You cannot unrent a room that you do not have, try again later!");
    }
	return 1;
}


CMD:change(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Skin_1] > 0 || PlayerData[playerid][Character_Skin_2] > 0 || PlayerData[playerid][Character_Skin_3] > 0)
        {
            new option1[256], option2[256], option3[256], options[256];
            
            if(PlayerData[playerid][Character_Skin_1] == 0)
            {
            	format(option1, sizeof(option1), "Outfit 1 - [Nothing Saved]");
			}
			else if(PlayerData[playerid][Character_Skin_1] != 0)
			{
				format(option1, sizeof(option1), "Outfit 1");
			}
			
			if(PlayerData[playerid][Character_Skin_2] == 0)
            {
            	format(option2, sizeof(option2), "Outfit 2 - [Nothing Saved]");
			}
			else if(PlayerData[playerid][Character_Skin_2] != 0)
			{
				format(option2, sizeof(option2), "Outfit 2");
			}
			
			if(PlayerData[playerid][Character_Skin_3] == 0)
            {
            	format(option3, sizeof(option3), "Outfit 3 - [Nothing Saved]");
			}
			else if(PlayerData[playerid][Character_Skin_3] != 0)
			{
				format(option3, sizeof(option3), "Outfit 3");
			}
			
			format(options, sizeof(options), "%s\n%s\n%s", option1, option2, option3);
			
			ShowPlayerDialog(playerid, DIALOG_PLAYER_SKINS, DIALOG_STYLE_LIST, "Clothing Selection Menu", options, "Change", "Close");
        }
        else return SendPlayerErrorMessage(playerid, " You have not purchased any skins for this Character!");
    }
	return 1;
}

CMD:commands(playerid, params[]) return cmd_cmds(playerid, params);
CMD:cmds(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
			ShowPlayerDialog(playerid, DIALOG_COMMANDS_MAIN, DIALOG_STYLE_LIST, "Open Roleplay - Commands Menu", "Generic Commands\nFaction Commands\nHouse Commands\nBusiness Commands\nJob Commands\nVIP Commands\nStaff Commands", "Select", "Close");			
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:rules(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
			new string[500];
			format(string, sizeof(string), 
				"Welcome to our Medium RP Server! Thank you for participating in the open beta.\n\n"\
				"Please keep these core roleplay guidelines in mind:\n\n"\
				"1. No Powergaming: Avoid forcing unrealistic or impossible actions.\n"\
				"2. No Metagaming: Keep OOC info separate from IC.\n"\
				"3. Value Your Life (VLM): Make realistic decisions to avoid harm.\n"\
				"4. Roleplay Everything: Play out injuries realistically.\n"\
				"5. Respect RP Settings: Avoid breaking character unless needed\n\nIf you see anyone not roleplaying, report them using /report!"
			);
			
			ShowPlayerDialog(playerid, DIALOG_SERVER_RULES, DIALOG_STYLE_MSGBOX, "Basic Guidelines", string, "Close", "");

	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:animations(playerid, params[]) return cmd_anims(playerid, params);
CMD:anims(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
			SendClientMessage(playerid, COLOR_YELLOW, "*** Open Roleplay Animations ***");
      		SendClientMessage(playerid, COLOR_WHITE, "/stopanim /bodypush /lowbodypush /headbutt /airkick /doorkick /leftslap /elbow /coprun");
			SendClientMessage(playerid, COLOR_WHITE, "/handsup /piss /sneak /drunk /bomb /robbing /laugh /lookout /robman /hide /vomit /eat /slapass");
			SendClientMessage(playerid, COLOR_WHITE, "/fuckyou /sleep /wavedown /cpr /throw /robbed /hurt /fallover /smoke /crossarms /sit /dance");
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:assistance(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(HasPlayerRequestAssistance[playerid] == 1) return SendPlayerErrorMessage(playerid, " You have already sent a request through to the staff team, please wait!"); 
	    if(IsPlayerLogged[playerid])
	    {
			HasPlayerRequestAssistance[playerid] = 1;			
			
	        new string[256];

			SendPlayerServerMessage(playerid, " You have just requested for an admins assistance, please wait!");

	        format(string, sizeof(string), "[ASSISTANCE REQUIRED]:{FFFFFF} %s has requested assistance at their current spot [Player ID: %d]", GetName(playerid), playerid);
			SendAdminMessage(COLOR_AQUABLUE, string);
			
			Assistance_Timer[playerid] = SetTimerEx("AssistanceTimer", 60000, false, "i", playerid);
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:report(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new targetid, reason[256];

		if(sscanf(params, "is[256]", targetid, reason))
		{
			SendPlayerTipMessage(playerid, " /report [targetid] [reason]");
   		}
		else
		{
			if(ContainsSymbols(reason)) return SendPlayerErrorMessage(playerid, " The reason contains invalid characters. Please use only letters, numbers, and spaces.");
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot report yourself. Use /helpme for further assistance!!");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
					
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
			
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot report yourself. Use /helpme for further assistance!!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
			
		    new query[2000];
   			mysql_format(connection, query, sizeof(query), "INSERT INTO `report_information` (`character_name`, `target_name`, `reason`) VALUES ('%e', '%e','%s')", PlayerData[playerid][Character_Name], PlayerData[targetid][Character_Name], reason);
			mysql_tquery(connection, query);

		    new dstring[500];
			format(dstring, sizeof(dstring), "- You have just reported %s for '%s'", GetName(targetid), reason);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			new string[500];
			format(string, sizeof(string), "[NEW REPORT]:{FFFFFF} %s has just reported %s for %s", GetName(playerid), GetName(targetid), reason);
			SendReportMessage(COLOR_AQUABLUE, string);
		}
	}
	return 1;
}

CMD:staff(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
	        new atext[50], string[256], status[50], count;
	        count = 0;
	
			SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Online Community Staff{FFFFFF} ***");
			
	        for (new i = 0; i < MAX_PLAYERS; i++)
	        {
				if(IsAdminOnDuty[i] == 1)
				{
					status = "On-Duty";
				}
				else status = "Off-Duty";
				
				if(PlayerData[i][Helper_Level] > 0)
				{
					count ++;
					
		            format(string, sizeof(string), "> {F2F746}[Helper]{FFFFFF} %s | Status: %s", PlayerData[i][Character_Name], status);
		            SendClientMessage(playerid, COLOR_WHITE, string);
				}
				
				if(PlayerData[i][Moderator_Level] > 0)
				{
					count ++;
					
		            format(string, sizeof(string), "> {F2F746}[Moderator]{FFFFFF} %s | Status: %s", PlayerData[i][Character_Name], status);
		            SendClientMessage(playerid, COLOR_WHITE, string);
				}
				
				if(PlayerData[i][Admin_Level] > 0)
				{
					switch(PlayerData[i][Admin_Level])
					{
					    case 1: { atext = "[Admin - L1]"; }
					    case 2: { atext = "[Admin - L2]"; }
					    case 3: { atext = "[Admin - L3]"; }
					    case 4: { atext = "[Senior Admin]"; }
					    case 5: { atext = "[Management]"; }
					    case 6: { atext = "[Owner]"; }
					}
					count ++;

		            format(string, sizeof(string), "> {F2F746}%s{FFFFFF} %s | Status: %s", atext, PlayerData[i][Character_Name], status);
		            SendClientMessage(playerid, COLOR_WHITE, string);
				}
	        }
			if(count == 0)
			{
				format(string, sizeof(string), "There is currently not staff online!");
		        SendClientMessage(playerid, COLOR_WHITE, string);
			}
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:guide(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 1)
	{
	    if(PlayerData[playerid][Character_Registered] == 1)
	    {
	        ShowPlayerDialog(playerid, DIALOG_GUIDE_LIST, DIALOG_STYLE_LIST, "Open Roleplay - Entry Guide", "Quick Job Information\nQuick Faction Information\nQuick Command Information\nQuick Vehicle Information\nQuick House Information\nQuick Admin Information", "Select", "Close");
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:time(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 1)
	{
	    if(PlayerData[playerid][Character_Registered] == 1)
	    {
	        new dstring[256];
			if(IsPlayerInHospital[playerid] == 1)
			{
				format(dstring, sizeof(dstring), "[TIMER]:{FFFFFF} You have less that one minute remaining in the hospital!");
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
			}
	        if(PlayerData[playerid][Admin_Jail] == 1 && PlayerData[playerid][Character_Jail] == 0)
	        {
	            format(dstring, sizeof(dstring), "[TIMER]:{FFFFFF} You have %i minutes left in your sentence within the admin jail!", PlayerData[playerid][Admin_Jail_Time]);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
	        }
	        if(PlayerData[playerid][Character_Jail] == 1 && PlayerData[playerid][Admin_Jail] == 0)
	        {
	            format(dstring, sizeof(dstring), "[TIMER]:{FFFFFF} You have %i minutes left in your sentence within the prison!", PlayerData[playerid][Character_Jail_Time]);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
	        }
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:rentcar(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 1)
	{
	    if(PlayerData[playerid][Character_Registered] == 1)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 5.0,1753.2698,-1862.1169,13.5767))
			{
		        if(IsPlayerRentingCar[playerid] == 1)
		        {
		            SendPlayerErrorMessage(playerid, " You are already renting a vehicle, you need to use /unrentcar before you can use this again!");

		            printf("%s has tried to rent a vehicle while already renting a vehicle - denied access", GetName(playerid));
		        }
				else
				{
					ShowPlayerDialog(playerid, DIALOG_RENTAL_CAR, DIALOG_STYLE_MSGBOX, "Rental Car - Confirmation", "You are about to rent a temp vehicle from the airport.\n\nPlease note that there are publically spawned vehicles around the map, so if your rental despawns, go find a car\n\nRENTAL COST: $250.00", "Rent Car", "Close");					
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near the vehicle rental place!");
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:unrentcar(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 1)
	{
	    if(PlayerData[playerid][Character_Registered] == 1)
	    {
	        new dstring[256];

	        if(IsPlayerRentingCar[playerid] == 0)
	        {
	            SendPlayerErrorMessage(playerid, " You are currently not renting any vehicles!");
	            
	            printf("%s has tried to unrent a vehicle they do not have - access denied", GetName(playerid));
	        }
	        else if(IsPlayerRentingCar[playerid] == 1)
	        {
	            IsPlayerRentingCar[playerid] = 0;
	            
	            PlayerData[playerid][Character_Money] += 100;
	
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$100");
				GameTextForPlayer(playerid, text_value1, 3000, 1);

				format(dstring, sizeof(dstring), "- You have just been given $100 for returning the vehicle!");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("%s has returned a rental vehicle and received money", GetName(playerid));
	        }
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:acceptdeath(playerid, params[])
{
    if(IsPlayerInjured[playerid] == 0) return SendPlayerErrorMessage(playerid, " You cannot accept death when you are not low on health!");
    if(PlayerData[playerid][Admin_Jail] == 1) return SendPlayerErrorMessage(playerid, " You cannot accept death while you are in admin jail!");
    else
	{
		SetPlayerHealth(playerid, 0);
	}
	return 1;
}

CMD:stats(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 1)
	{
	    if(PlayerData[playerid][Character_Registered] == 1)
	    {
	        new titlestring[100], dialogstring[2000], staffname[50];
			new fstring[20], frankstring[20], jstring[50], vstring[50];
			new factionid;
	
			if(PlayerData[playerid][Helper_Level] == 1) { format(staffname, sizeof(staffname), "Helper"); }
			else if(PlayerData[playerid][Moderator_Level] == 1) { format(staffname, sizeof(staffname), "Moderator"); }
			else if(PlayerData[playerid][Admin_Level] == 1) { format(staffname, sizeof(staffname), "Admin - Level 1"); }
			else if(PlayerData[playerid][Admin_Level] == 2) { format(staffname, sizeof(staffname), "Admin - Level 2"); }
			else if(PlayerData[playerid][Admin_Level] == 3) { format(staffname, sizeof(staffname), "Admin - Level 3"); }
			else if(PlayerData[playerid][Admin_Level] == 4) { format(staffname, sizeof(staffname), "Admin - Level 4"); }
			else if(PlayerData[playerid][Admin_Level] == 5) { format(staffname, sizeof(staffname), "Admin - Level 5"); }
			else if(PlayerData[playerid][Admin_Level] == 6) { format(staffname, sizeof(staffname), "Admin - Level 6"); }

			factionid = PlayerData[playerid][Character_Faction];

			if(PlayerData[playerid][Character_Faction] == 0)
			{
				fstring = "None";
			}
			else
			{
				format(fstring, sizeof(fstring), "%s", FactionData[factionid][Faction_Name]);
			}

			switch(PlayerData[playerid][Character_Faction_Rank])
			{
				case 0: { format(frankstring, sizeof(frankstring), "None"); }
				case 1: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_1]); }
				case 2: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_2]); }
				case 3: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_3]); }
				case 4: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_4]); }
				case 5: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_5]); }
				case 6: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_6]); }
			}
				
			switch(PlayerData[playerid][Character_Job])
			{
				case 0: { format(jstring, sizeof(jstring), "None"); }
				case 1: { format(jstring, sizeof(jstring), "Pizza Delivery"); }
				case 2: { format(jstring, sizeof(jstring), "Garbage Collector"); }
				case 3: { format(jstring, sizeof(jstring), "Electrician"); }
			}
			
			switch(PlayerData[playerid][Character_VIP])
			{
				case 0: { format(vstring, sizeof(vstring), "No"); }
				case 1: { format(vstring, sizeof(vstring), "Yes"); }
			}
			
			new levelexp;
			
			if(PlayerData[playerid][Character_Level] == 1) { levelexp = 8; }
			else if(PlayerData[playerid][Character_Level] == 2) { levelexp = 10; }
			else if(PlayerData[playerid][Character_Level] == 3) { levelexp = 12; }
			else if(PlayerData[playerid][Character_Level] == 4) { levelexp = 14; }
			else if(PlayerData[playerid][Character_Level] == 5) { levelexp = 16; }
			else if(PlayerData[playerid][Character_Level] == 6) { levelexp = 18; }
			else if(PlayerData[playerid][Character_Level] == 7) { levelexp = 20; }
			else if(PlayerData[playerid][Character_Level] == 8) { levelexp = 22; }
			else if(PlayerData[playerid][Character_Level] == 9) { levelexp = 24; }
			else if(PlayerData[playerid][Character_Level] == 10) { levelexp = 26; }
			else if(PlayerData[playerid][Character_Level] == 11) { levelexp = 28; }
			else if(PlayerData[playerid][Character_Level] >= 12) { levelexp = 30; }
	        
	        format(titlestring, sizeof(titlestring), "%s - Statistics", GetName(playerid));
			format(dialogstring, sizeof(dialogstring), " Character Name: \t%s\n Character Age: \t%i\n Character Sex: \t%s\n Character Birthplace: \t%s\n\n Character Level: \t%i\n Character Exp: \t%i/%i\n Character VIP: \t%s\n Character VIP Exp: \t%s\n Staff Level: \t%s\n Faction: \t%s\n Faction Rank: \t%s\n Job: \t%s", PlayerData[playerid][Character_Name], PlayerData[playerid][Character_Age], PlayerData[playerid][Character_Sex], PlayerData[playerid][Character_Birthplace],PlayerData[playerid][Character_Level] , PlayerData[playerid][Character_Level_Exp], levelexp, vstring, PlayerData[playerid][Character_VIP_Exp], staffname, fstring, frankstring, jstring);
	        ShowPlayerDialog(playerid, DIALOG_PLAYER_STATS, DIALOG_STYLE_TABLIST, titlestring, dialogstring, "More", "Close");
	    }
	}
	return 1;
}

CMD:shop(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new shopid, count;

		if(!IsPlayerNearBusinessShopPoint(playerid) || PlayerAtBusinessBuyPointID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a purchase point!");
		else
		{
			PlayerTextDrawHide(playerid, PlayerText:Notification_Textdraw);
			Notification_Timer[playerid] = 0;
		
		    shopid = PlayerAtBusinessBuyPointID[playerid];

			if(BusinessData[shopid][Business_Type] == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_ONE, DIALOG_STYLE_TABLIST, "Gas Station", "1. Hotdog\t$12\n2. Soda\t$4\n3. Spirits\t$30\n4. Lockpick\t$800\n5. Rope\t$200\n6. Mask\t$2500\n7. Radio\t$3500\n8. Blindfold\t$50", "Purchase", "Close");
    		}
			else if(BusinessData[shopid][Business_Type] == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_TWO, DIALOG_STYLE_LIST, "Supermarket Store", "Fruit\nVegetables\nDrinks\nMilk\nCheese\nMetal Fragments\nMeat", "Purchase", "Close");
    		}
			else if(BusinessData[shopid][Business_Type] == 3)
			{
		 		ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_THREE, DIALOG_STYLE_LIST, "Electronic Store", "1. Mobile Phone\n2. Sim Card\n3. House Items", "Next", "Close");
	    	}
			else if(BusinessData[shopid][Business_Type] == 4)
			{
		 		ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FOUR, DIALOG_STYLE_TABLIST, "Fast Food Joint", "1. Number 1\t$10\n2. Number 2\t$15\n3. Number 3\t$50\n4. Number 4\t$65\n5. Fat Guy\t$150", "Purchase", "Close");
	    	}
			else if(BusinessData[shopid][Business_Type] == 5)
			{
		 		ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_FIVE, DIALOG_STYLE_LIST, "Bar / Resturant", "Vodka ($10)\nRose Bud ($15)\nBeer ($20)\nPeanuts ($4)\nCrisps ($6)", "Purchase", "Close");
	    	}
			else if(BusinessData[shopid][Business_Type] == 6)
			{			
			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnected(i))
			        {
			            if(IsPlayerInViewState_Binco[i] == 1)
						{
			                count++;
			            }
			        }
			    }
			    if (count > 0)
			    {
			        SendPlayerErrorMessage(playerid, " Someone else is already viewing clothing, please wait!");
			    }
				else
				{
					Binco_Current_Outfit[playerid] = GetPlayerSkin(playerid);
					Binco_Current_VW[playerid] = GetPlayerVirtualWorld(playerid);
					
					IsPlayerInViewState_Binco[playerid] = 1;
					
					SetPlayerPos(playerid, 217.3819,-98.1815,1005.2578);
					SetPlayerCameraPos(playerid, 213.1676,-101.4018,1006.3436);
					SetPlayerCameraLookAt(playerid, 217.3819,-98.1815,1005.2578);
					SetPlayerFacingAngle(playerid, 127.9192);
					SetPlayerVirtualWorld(playerid, 200);
					
					TogglePlayerControllable(playerid,false);
					
					new tdstring1[500];
					format(tdstring1, sizeof(tdstring1), "Welcome to the ~y~Binco Clothing Store~n~~n~~w~This is your current outfit~n~~n~Press ~g~Jump~w~ To Change Skins~n~~n~Press ~g~Fire~w~ To Confirm~n~~n~Press ~r~Aim~w~ To Leave or Purchase");
					PlayerTextDrawSetString(playerid, PlayerText:Store_Textdraw, tdstring1);
					PlayerTextDrawShow(playerid, PlayerText:Store_Textdraw);
				}		
	    	}
	    	else if(BusinessData[shopid][Business_Type] == 7)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(HasPlayerRobbedAmmunation[i] > 0)
					{
					    count ++;
					}
				}
				
				if(count > 0) return SendPlayerErrorMessage(playerid, " Someone has robbed this store recently, please come back later to purchase weapons!");			
				if(IsPlayerWeaponBanned[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are weapon banned you cannot purchase any weapons at the time!");
				
		 		ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_SEVEN, DIALOG_STYLE_LIST, "Ammunation Store", "Weapons\nExtras", "Next", "Close");
	    	}
			else if(BusinessData[shopid][Business_Type] == 8)
			{
		 		ShowPlayerDialog(playerid, DIALOG_SHOP_TYPE_EIGHT, DIALOG_STYLE_LIST, "Donut Shop", "Sprinkles ($10)\nStuffed ($15)\nMystery Filled ($25)", "Purchase", "Close");
	    	}
	    	else if(BusinessData[shopid][Business_Type] == 10)
	    	{	    	    
				if(PlayerData[playerid][Character_Total_Vehicles] == 2)
		        {
		            SetCameraBehindPlayer(playerid);

                    VehicleModelPurchasing[playerid] = 0;
                	VEHICLEPROCESS = 0;

                	SendPlayerErrorMessage(playerid, " You cannot own more than two vehicles, please go recycle or sell one if you need to purchase a new one!");
		        }
	    	    else
	    	    {
	    	        if(VEHICLEPROCESS == 0)
					{
		    	        HasPlayerConfirmedVehicleID[playerid] = 0;
			    	    VEHICLEPROCESS = 1;
						DealershipType[playerid] = 1;

			    	    ClearMessages(playerid);

						SetPlayerCameraPos(playerid, -2026.3075,-116.8879,1035.6638);
						SetPlayerCameraLookAt(playerid, -2021.6074,-116.6880,1036.2498);

			    	    new title[256];
			    	    format(title, sizeof(title), "Vehicle Options");
			    	    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_1_MAIN, DIALOG_STYLE_TABLIST, title, "Hermes \t$25,000\nFortune \t$35,000\nEuros \t$45,000\nClub \t$45,000\nHustler \t$65,000\nWashington \t$80,000\nHuntley \t$90,000", "Select", "Close");
					}
					else
					{
					    SendPlayerErrorMessage(playerid, " Someone is already in the process of purchasing a vehicle from a dealership, please wait!");
					}
				}
			}
			else if(BusinessData[shopid][Business_Type] == 11)
	    	{
	    	    if(PlayerData[playerid][Character_Total_Vehicles] == 2)
		        {
		            SetCameraBehindPlayer(playerid);

                    VehicleModelPurchasing[playerid] = 0;
                	VEHICLEPROCESS = 0;

                	SendPlayerErrorMessage(playerid, " You cannot own more than two vehicles, please go recycle or sell one if you need to purchase a new one!");
		        }
	    	    else
	    	    {
		    	    if(VEHICLEPROCESS == 0)
		    	    {
		    	        HasPlayerConfirmedVehicleID[playerid] = 0;
			    	    VEHICLEPROCESS = 1;
						DealershipType[playerid] = 2;

			    	    ClearMessages(playerid);

						SetPlayerCameraPos(playerid, -2026.3075,-116.8879,1035.6638);
						SetPlayerCameraLookAt(playerid, -2021.6074,-116.6880,1036.2498);

			    	    new title[256];
			    	    format(title, sizeof(title), "Vehicle Options");
			    	    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_2_MAIN, DIALOG_STYLE_TABLIST, title, "Banshee \t$50,000\nComet \t$52,000\nFlash \t$52,000\nJester \t$55,000\nSuper GT \t$70,000\nTurismo \t100 Coins\nInfernus \t150 Coins", "Select", "Close");
					}
					else
					{
					    SendPlayerErrorMessage(playerid, " Someone is already in the process of purchasing a vehicle from a dealership, please wait!");
					}
				}
			}
			else if(BusinessData[shopid][Business_Type] == 12)
	    	{
	    	    if(PlayerData[playerid][Character_Total_Vehicles] == 2)
		        {
		            SetCameraBehindPlayer(playerid);

                    VehicleModelPurchasing[playerid] = 0;
                	VEHICLEPROCESS = 0;

                	SendPlayerErrorMessage(playerid, " You cannot own more than two vehicles, please go recycle or sell one if you need to purchase a new one!");
		        }
	    	    else
	    	    {
		    	    if(VEHICLEPROCESS == 0)
		    	    {
		    	        HasPlayerConfirmedVehicleID[playerid] = 0;
			    	    VEHICLEPROCESS = 1;
						DealershipType[playerid] = 3;

			    	    ClearMessages(playerid);

						SetPlayerCameraPos(playerid, -2026.3075,-116.8879,1035.6638);
						SetPlayerCameraLookAt(playerid, -2021.6074,-116.6880,1036.2498);

			    	    new title[256];
			    	    format(title, sizeof(title), "Bike Options");
			    	    ShowPlayerDialog(playerid, DIALOG_DEALERSHIP_3_MAIN, DIALOG_STYLE_TABLIST, title, "Faggio \t$5,000\nSanchez \t$15,000\nBF-400 \t$30,000\nPCJ-600 \t$50,000\nNRG-500 \t$150,000", "Select", "Close");
					}
					else
					{
					    SendPlayerErrorMessage(playerid, " Someone is already in the process of purchasing a vehicle from a dealership, please wait!");
					}
				}
			}
			PlayerAtBusinessBuyPointID[playerid] = 0;
		}
	}
	return 1;
}

CMD:pay(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new targetid, money;

	    if(sscanf(params, "ii", targetid, money))
	    {
	        SendPlayerTipMessage(playerid, " /pay [targetid] [amount]");
	    }
	    else
	    {
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot pay yourself money!");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
				
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
		
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot pay yourself money!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			if(!IsPlayerNearPlayer(playerid, targetid, 5.0)) return SendPlayerErrorMessage(playerid, " You are not near this player!");
			if(money < 0 || money > PlayerData[playerid][Character_Money]) return SendPlayerErrorMessage(playerid, " You do not have enough money to give this player!");
			else
			{
		        PlayerData[playerid][Character_Money] -= money;
		        PlayerData[targetid][Character_Money] += money;
		
				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$%d", money);
				GameTextForPlayer(playerid, text_value, 3000, 1);
					
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$%d", money);
				GameTextForPlayer(targetid, text_value1, 3000, 3);

		        new dstring[256];
				format(dstring, sizeof(dstring), "- You have just been given $%i, by %s!", money, GetName(playerid));
				SendClientMessage(targetid, COLOR_ACTION, dstring);

				format(dstring, sizeof(dstring), "- You have just given %s $%i!", GetName(targetid), money);
				SendClientMessage(playerid, COLOR_ACTION, dstring);
				
				format(dstring, sizeof(dstring), "> %s has removed their wallet and given %s some money", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid,30.0, COLOR_PURPLE, dstring);
			}
	    }
	}
	return 1;
}

CMD:eat(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Has_Food] >= 1)
		{						
			new Float:health;
			GetPlayerHealth(playerid, health);
			
			if (health < 100)
            {
                health += 10;
                if (health > 100)
                    health = 100;
                
                SetPlayerHealth(playerid, health);

				PlayerData[playerid][Character_Has_Food] -= 1;
			
				new string[256];
				format(string, sizeof(string), "> %s removes some food from their pocket and eats it", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, false, false, false, false, 0, SYNC_ALL);
            }
            else
            {
                SendPlayerErrorMessage(playerid, "You already have full health!");
            } 			
		}
		else
		{
			SendPlayerErrorMessage(playerid, " You do not have any food on you at this point!");
		}
	}
	return 1;
}

CMD:drink(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Has_Drinks] >= 1)
		{						
			new Float:health;
			GetPlayerHealth(playerid, health);
			
			if (health < 100)
            {
                health += 5;
                if (health > 100)
                    health = 100;
                
                SetPlayerHealth(playerid, health);

				PlayerData[playerid][Character_Has_Drinks] -= 1;
			
				new string[256];
				format(string, sizeof(string), "> %s removes a can from their pocket and drink it", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
				ApplyAnimation(playerid, "VENDING", "VEND_Drink2_P", 4.0, false, false, false, false, 0, SYNC_ALL);
            }
            else
            {
                SendPlayerErrorMessage(playerid, "You already have full health!");
            } 			
		}
		else
		{
			SendPlayerErrorMessage(playerid, " You do not have any drinks on you at this point!");
		}
	}
	return 1;
}

CMD:usedrugs(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		new drugtype;
		
        if(sscanf(params, "i", drugtype))
        {
		    SendPlayerTipMessage(playerid, " /usedrugs [1 - Cocaine | 2 - Heroin]");
		}
		else
		{
			if(drugtype == 1 && PlayerData[playerid][Character_Drug_Cocaine] > 0)
			{
				PlayerData[playerid][Character_Drug_Cocaine] -= 1;
						
				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_drug_cocaine` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Drug_Cocaine], GetName(playerid));
				mysql_tquery(connection, updatequery);
							
				new string[256];
				format(string, sizeof(string), "> %s has just put an item on a spoon and smoked it", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				
				ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, false, false, false, false, 0, SYNC_ALL);
				
				SetPlayerDrunkLevel(playerid, 50000);
				SetPlayerWeather(playerid, 234);
			
				new Float:health;
				GetPlayerHealth(playerid, health);
				health = health + 50;
				
				if(health > 100) { SetPlayerHealth(playerid, 100); }
				else { SetPlayerHealth(playerid, health); }
				
				ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, false, false, false, false, 0, SYNC_ALL);
				
				DrugUseCooldown_Timer[playerid] = SetTimerEx("DrugUseCooldown", 60000, false, "i", playerid);
			}
			else if(drugtype == 2 && PlayerData[playerid][Character_Drug_Heroin] > 0)
			{
				PlayerData[playerid][Character_Drug_Heroin] -= 1;
						
				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_drug_heroin` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Drug_Heroin], GetName(playerid));
				mysql_tquery(connection, updatequery);
							
				new string[256];
				format(string, sizeof(string), "> %s has just injected themselves", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				
				ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, false, false, false, false, 0, SYNC_ALL);
				
				SetPlayerDrunkLevel(playerid, 50000);
				SetPlayerWeather(playerid, 188);
				
				new Float:armour;
				GetPlayerArmour(playerid, armour);
				armour = armour + 40;
				
				if(armour > 100) { SetPlayerArmour(playerid, 100); }
				else { SetPlayerArmour(playerid, armour); }
				
				ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, true, false, false, false, 0, SYNC_ALL);
				
				DrugUseCooldown_Timer[playerid] = SetTimerEx("DrugUseCooldown", 135000, false, "i", playerid);
			}
			else return SendPlayerErrorMessage(playerid, " You do not have enough of this drug to use!");
        }
	}
	return 1;
}

CMD:smokeweed(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Drug_Weed] >= 2)
		{			
			PlayerData[playerid][Character_Drug_Weed] -= 2;
			
			new string[256];
			format(string, sizeof(string), "> %s rolls up a joint and smokes it", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				
			ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, false, false, false, false, 0, SYNC_ALL);
			
			SetPlayerWeather(playerid, 188);
			
			DrugUseCooldown_Timer[playerid] = SetTimerEx("DrugUseCooldown", 135000, false, "i", playerid);
			
		}
		else
		{
			SendPlayerErrorMessage(playerid, " You do not have any drugs that you can plant!");
		}
	}
	return 1;
}

CMD:crop(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(IsPlayerNearWeedPlant(playerid) && PlayerAtPlantID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not near a plant that you can crop!");
		else
		{
			new plantid = PlayerAtPlantID[playerid];
			
			if(WeedData[plantid][Weed_Alive] > 80) return SendPlayerErrorMessage(playerid, " You cannot pick this plant yet, let it grow a bit longer!");
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
			
			new string[256];
			format(string, sizeof(string), "> %s starts ripping out a plant from the ground", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				
			SendClientMessage(playerid, COLOR_ACTION, "- You have just gathered 5 grams of weed!");
			
			DestroyDynamicObject(WeedData[plantid][Weed_Pickup_ID]);

			WeedData[plantid][Weed_Pickup_ID] = 0;
			WeedData[plantid][Weed_Model_ID] = 0;
			WeedData[plantid][Weed_Pos_X] = 0;
			WeedData[plantid][Weed_Pos_Y] = 0;
			WeedData[plantid][Weed_Pos_Z] = 0;
			WeedData[plantid][Weed_Alive] = 0;
			WeedData[plantid][Weed_Cut] = 0;
			
			new fquery[2000];
			mysql_format(connection, fquery, sizeof(fquery), "UPDATE `weed_information` SET `weed_model_id` = 0, `weed_pos_x` = 0, `weed_pos_y` = 0, `weed_pos_z` = 0, `weed_alive` = 0, `weed_cut` = 0 WHERE `weed_id` = '%i' LIMIT 1", plantid);
			mysql_tquery(connection, fquery);
			
			if(WeedData[plantid][Weed_Alive] >= 20)
			{
				PlayerData[playerid][Character_Drug_Weed] += 8;
			}
			else
			{
				PlayerData[playerid][Character_Drug_Weed] += 3;
			}	
		}
	}
	return 1;
}

CMD:plant(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Has_Drugs] >= 10)
		{			
			new query[128];
		    mysql_format(connection, query, sizeof(query), "SELECT * FROM `weed_information` WHERE `weed_pos_x` = '0' LIMIT 1");
			mysql_tquery(connection, query, "GetNextWeedID", "i", playerid);
		}
		else
		{
			SendPlayerErrorMessage(playerid, " You do not have any drugs that you can plant!");
		}
	}
	return 1;
}

CMD:bake(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1115.8197,-316.7228,73.9955))
		{
			if(PlayerData[playerid][Character_Has_Drugs] > 0 && HasPlayerBakedDrugs[playerid] == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_DRUG_SELECTION, DIALOG_STYLE_LIST, "Shack House Kitchen", "Cocaine\nHeroin", "Bake", "Close");
			}
			else
			{
				SendPlayerErrorMessage(playerid, " You either do not have any drug materials left or have baked some other drugs recently!");
			}
		}
		else return SendPlayerErrorMessage(playerid, " You are currently not inside the crack house, you cannot start cooking yet!");
	}
	return 1;
}

CMD:smuggle(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		new Float:tx, Float:ty, Float:tz, Float:gx, Float:gy, Float:gz;
		GetActorPos(DrugActor, tx, ty, tz);
		GetActorPos(WeaponActor, gx, gy, gz);

		if(IsPlayerInRangeOfPoint(playerid, 3.0, tx, ty, tz))
		{
			if(DrugActorAmountHeld > 0)
			{
				if(HasPlayerTakenDrugs[playerid] == 1) return SendPlayerErrorMessage(playerid, " You have already purchased some drugs recently, please wait a while!");
				else
				{
					new string[256], string1[256], string2[256];
					format(string, sizeof(string), "> Crack Dealer removes a small pouch from their pocket and passes it to %s", GetRPName(playerid));
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
					
					format(string1, sizeof(string1), "Crack Dealer says: Take this and leave me alone");
					SendNearbyMessage(playerid, 15.0, COLOR_WHITE, string1);
					
					DrugActorAmountHeld -= 20;
					HasPlayerTakenDrugs[playerid] = 1;
					PlayerData[playerid][Character_Has_Drugs] += 10;
					
					new updatequery[2000];
					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_drugs` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Drugs], GetName(playerid));
				    mysql_tquery(connection, updatequery);
				
					format(string2, sizeof(string2), "- You have just taken some drugs from a drug dealer, go to the shack to pick your poison! [/bake]");
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					
					CrackDealer_Timer[playerid] = SetTimerEx("CrackDealerCooldownTimer", 60000, false, "i", playerid);
				}
			}
			else
			{
				new string[256], string1[256];
				format(string, sizeof(string), "> Crack Dealer attempts to locate drugs on his body");
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
				
				format(string1, sizeof(string1), "Crack Dealer says: Sorry mate, but it seems I am all out");
				SendNearbyMessage(playerid, 15.0, COLOR_WHITE, string1);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, gx, gy, gz))
		{
			if(WeaponActorAmountHeld > 0)
			{
				if(HasPlayerTakenMetal[playerid] == 1) return SendPlayerErrorMessage(playerid, " You have already purchased some metal recently, please wait a while!");
				else
				{
					new string[256], string1[256], string2[256];
					format(string, sizeof(string), "> Metal Dealer removes a box from the bin area and passes it to %s", GetRPName(playerid));
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
					
					format(string1, sizeof(string1), "Metal Dealer says: Take this and leave me alone");
					SendNearbyMessage(playerid, 15.0, COLOR_WHITE, string1);
					
					WeaponActorAmountHeld -= 20;
					HasPlayerTakenMetal[playerid] = 1;
					PlayerData[playerid][Character_Has_Metal] += 20;
					
					new updatequery[2000];
					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_metal` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Has_Metal], GetName(playerid));
				    mysql_tquery(connection, updatequery);
				
					format(string2, sizeof(string2), "- You have just taken some metal from the metal dealer, go to the back of ammunation and find some gun powder /searchbin]");
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					
					MetalDealer_Timer[playerid] = SetTimerEx("MetalDealerCooldownTimer", 60000, false, "i", playerid);
				}
			}
			else
			{
				new string[256], string1[256];
				format(string, sizeof(string), "> Metal Dealer attempts to locate some spare parts");
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
				
				format(string1, sizeof(string1), "Metal Dealer says: Sorry mate, but it seems I am all out");
				SendNearbyMessage(playerid, 15.0, COLOR_WHITE, string1);
			}
		}
		else return SendPlayerErrorMessage(playerid, " You are not near a local mystery dealer!");
	}
	return 1;
}

CMD:searchbin(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You cannot action this within a vehicle!");
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1424.4550,-1319.0033,13.5547) || IsPlayerInRangeOfPoint(playerid, 3.0, 1420.2544,-1355.7690,13.5642) || IsPlayerInRangeOfPoint(playerid, 3.0, 1415.6238,-1300.2496,13.5450) || IsPlayerInRangeOfPoint(playerid, 3.0, 1439.4373,-1324.7338,13.5455) && PlayerData[playerid][Character_Has_Metal] > 0)
		{
			if(HasPlayerFoundGunPowder[playerid] == 1) return SendPlayerErrorMessage(playerid, " You have already found some gunpowder recently, please wait a while!");
			else
			{
				new string[256];
				format(string, sizeof(string), "> %s opens the bin and starts searching for something", GetRPName(playerid));
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
				
				TogglePlayerControllable(playerid, false);
				
				GameTextForPlayer(playerid, "SEARCHING PARTS...", 10000, 3);
				
				HasPlayerFoundGunPowder[playerid] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
				GunPowder_SearchTimer[playerid] = SetTimerEx("GunPowderSearch", 10000, false, "i", playerid);
			}
		}
		else return SendPlayerErrorMessage(playerid, " You are not near a bin to search for gunpowder or you haven't completed step 1, getting metal yet!");
	}
	return 1;
}

CMD:buildparts(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You cannot action this within a vehicle!");
		if(HasPlayerBuiltParts[playerid]) return SendPlayerErrorMessage(playerid, " You cannot build anymore parts at the moment, please try again later!");
		if(PlayerData[playerid][Character_Has_Metal] >= 20 && PlayerData[playerid][Character_Has_Gunpowder] >= 20)
		{
			TogglePlayerControllable(playerid, false);
			
			new string[256];
			format(string, sizeof(string), "> %s starts to fiddle around with some metal things", GetRPName(playerid));
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
			
			GameTextForPlayer(playerid, "BUILDING PARTS...", 30000, 3);
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
			
			WeaponPart_Timer[playerid] = SetTimerEx("WeaponPartBuilder", 30000, false, "i", playerid);
		}
		else return SendPlayerErrorMessage(playerid, " You do not have the minimum amount required to construct weapon parts!");
	}
	return 1;
}

CMD:buildweapon(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You cannot action this within a vehicle!");
		if(IsPlayerWeaponBanned[playerid]) return SendPlayerErrorMessage(playerid, " You are currently weapon banned and cannot use this feature!");
		else
		{
			if(PlayerData[playerid][Character_Has_Parts] == 0) return SendPlayerErrorMessage(playerid, " You have no weapon parts to use, please go find some!");
			else
			{
				ShowPlayerDialog(playerid, DIALOG_BUILD_WEAPON, DIALOG_STYLE_TABLIST, "Open Roleplay - Build Menu", "1. Knife\t5 Parts\n2. Sword\t10 Parts\n3. Pistol\t20 Parts\n4. Shotgun\t40 Parts\n5. AK-47\t80 Parts", "Select", "Close");						
			}		
		}
	}
	return 1;
}

CMD:givegun(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		new targetid;
		if(sscanf(params, "i", targetid))
		{
			SendPlayerServerMessage(playerid, "/givegun [targetid]");
			SendPlayerServerMessage(playerid, "Tip: This only works for crafted weapons at this time!");
			return 1;
		}
		else
		{
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a nonexistent player!");
			else
			{
				new ammo, string[256], string2[256];
				
				if(GetPlayerWeapon(playerid) == WEAPON_KNIFE)
				{
					ammo = GetPlayerAmmo(playerid);
					
					GivePlayerWeapon(targetid, WEAPON_KNIFE, ammo);
					
					format(string, sizeof(string), "> %s pulls out a knife and hands it over to %s", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
					
					format(string2, sizeof(string2), "- You have just give a player a weapon");
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					
					RemovePlayerWeapon(playerid, WEAPON_KNIFE);
				
					printf("Player Command: Givegun | From Name: %s | To Name: %s", GetName(playerid), GetName(targetid));
				}
				else if(GetPlayerWeapon(playerid) == WEAPON_KATANA)
				{
					ammo = GetPlayerAmmo(playerid);
					
					GivePlayerWeapon(targetid, WEAPON_KATANA, ammo);
					
					format(string, sizeof(string), "> %s pulls out a sword and hands it over to %s", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
					
					format(string2, sizeof(string2), "- You have just give a player a weapon");
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					
					RemovePlayerWeapon(playerid, WEAPON_KATANA);
				
					printf("Player Command: Givegun | From Name: %s | To Name: %s", GetName(playerid), GetName(targetid));
				}
				else if(GetPlayerWeapon(playerid) == WEAPON_COLT45)
				{
					ammo = GetPlayerAmmo(playerid);
					
					GivePlayerWeapon(targetid, WEAPON_COLT45, ammo);
					
					format(string, sizeof(string), "> %s pulls out a pistol and hands it over to %s", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
					
					format(string2, sizeof(string2), "- You have just give a player a weapon");
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					
					RemovePlayerWeapon(playerid, WEAPON_COLT45);
				
					printf("Player Command: Givegun | From Name: %s | To Name: %s", GetName(playerid), GetName(targetid));
				}
				else if(GetPlayerWeapon(playerid) == WEAPON_SHOTGUN)
				{
					ammo = GetPlayerAmmo(playerid);
					
					GivePlayerWeapon(targetid, WEAPON_SHOTGUN, ammo);
					
					format(string, sizeof(string), "> %s pulls out a shotgun and hands it over to %s", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
					
					format(string2, sizeof(string2), "- You have just give a player a weapon");
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					
					RemovePlayerWeapon(playerid, WEAPON_SHOTGUN);
				
					printf("Player Command: Givegun | From Name: %s | To Name: %s", GetName(playerid), GetName(targetid));
				}
				else if(GetPlayerWeapon(playerid) == WEAPON_AK47)
				{
					ammo = GetPlayerAmmo(playerid);
					
					GivePlayerWeapon(targetid, WEAPON_AK47, ammo);
					
					format(string, sizeof(string), "> %s pulls out a ak47 and hands it over to %s", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, string);
					
					format(string2, sizeof(string2), "- You have just give a player a weapon");
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					
					RemovePlayerWeapon(playerid, WEAPON_AK47);
				
					printf("Player Command: Givegun | From Name: %s | To Name: %s", GetName(playerid), GetName(targetid));
				}
				else return SendPlayerErrorMessage(playerid, " You can only give players weapon that are crafted!");
			}
		}
	}
	return 1;
}

CMD:tie(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		new targetid;

        if(PlayerData[playerid][Character_Has_Rope] >= 1)
        {
            if(sscanf(params, "i", targetid))
            {
		    	SendPlayerTipMessage(playerid, " /tie [targetid]");
			}
			else
			{
			    if(targetid == playerid)return SendPlayerErrorMessage(playerid, " You cannot tie up yourself!");
				if(!IsPlayerConnected(targetid))
				{
					new maskid = targetid;
					new count = 0;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
			        {
			            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
			            {
			                targetid = i;
							count = 1;
			                break;
			            }
			        }
			
					if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot tie up yourself!");
					if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
				}
				else
		  		{
		  		    new Float:tx, Float:ty, Float:tz;
		  		    GetPlayerPos(targetid, tx, ty, tz);

		  		    if(IsPlayerInRangeOfPoint(playerid, 5.0, tx, ty, tz))
		  		    {
		  		        if (GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_CUFFED)
		  		        {
		  		            IsPlayerTied[targetid] = 0;

			    		    GameTextForPlayer(targetid, "Untied", 2000, 6);

			    		    SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
							RemovePlayerAttachedObject(targetid, 0);

			    		    new tdstring1[500];
					    	format(tdstring1, sizeof(tdstring1), "You have been untied. You can now walk around freely!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);

							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);
		  		        }
		  		        else
		  		        {
			  		        IsPlayerTied[targetid] = 1;

			    		    GameTextForPlayer(targetid, "Tied Up", 2000, 6);

			    		    SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
							SetPlayerAttachedObject(targetid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);

			    		    new tdstring2[500];
					    	format(tdstring2, sizeof(tdstring2), "You have been tied up, please wait for further roleplay instructions!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring2);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);

							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);
						}
		  		    }
		  		    else return SendPlayerErrorMessage(playerid, " You cannot tie someone up who isn't within the reachable vacinity of you!");
		  		}
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:blindfold(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		new targetid;
        
		if(sscanf(params, "i", targetid))
        {
	    	SendPlayerTipMessage(playerid, " /blindfold [targetid]");
		}
		else
		{
		    if(targetid == playerid)return SendPlayerErrorMessage(playerid, " You cannot action against yourself!");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
					
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
			
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot action against yourself!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			else
	  		{
	  		    new Float:tx, Float:ty, Float:tz;
	  		    GetPlayerPos(targetid, tx, ty, tz);

	  		    if(IsPlayerInRangeOfPoint(playerid, 5.0, tx, ty, tz))
	  		    {
	  		        if(IsPlayerBlindfolded[targetid] == 1)
	  		        {
	  		            IsPlayerBlindfolded[targetid] = 0;

		    		    GameTextForPlayer(targetid, "Blindfold Removed..", 2000, 6);
			
						SetCameraBehindPlayer(targetid);

		    		    new tdstring1[500];
				    	format(tdstring1, sizeof(tdstring1), "You can now see again!");
						PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring1);
						PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);

						Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);
	  		        }
	  		        else
	  		        {
						if(PlayerData[playerid][Character_Has_Blindfold] >= 1)
        				{
			  		        IsPlayerBlindfolded[targetid] = 1;
	
			    		    GameTextForPlayer(targetid, "Blindfolded..", 2000, 6);
			
							SetPlayerCameraPos(targetid, -833.5241, -1358.8575, 86.9054);
							SetPlayerCameraLookAt(targetid, -833.5241, -1358.8575, 0.0000);
	
			    		    new tdstring1[500];
					    	format(tdstring1, sizeof(tdstring1), "You cannot see now!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);
	
							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);
						}
						else return SendPlayerErrorMessage(playerid, " You do not have any blindfolds to use!");
					}
	  		    }
	  		    else return SendPlayerErrorMessage(playerid, " You cannot action this against someone who isn't within the reachable vacinity of you!");
			}
        }
	}
	return 1;
}

CMD:phonenumber(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 1)
	{
	    if(PlayerData[playerid][Character_Registered] == 1)
	    {
	        new dstring[256];

            if(PlayerData[playerid][Character_Has_Phone] == 0) return SendPlayerErrorMessage(playerid, " You do not have a mobile phone!");
	        else if(PlayerData[playerid][Character_Has_Phone] == 1 && PlayerData[playerid][Character_Phonenumber] == 0)
	        {
	            SendPlayerErrorMessage(playerid, " You do not have an assigned phone number!");
	        }
	        else
			{
			    format(dstring, sizeof(dstring), "[Phone Number]:{FFFFFF} %d", PlayerData[playerid][Character_Phonenumber]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:togglephone(playerid, params[])
{
    if(PlayerData[playerid][Character_Has_Phone] > 0 && PlayerData[playerid][Character_Phonenumber] > 0)
    {
        new string[256];
        
		if(HasPlayerToggledOffDirectory[playerid] == 1)
		{
		    HasPlayerToggledOffDirectory[playerid] = 0;
		    
		    format(string, sizeof(string), "[PHONE UPDATE]:{FFFFFF} You have just enabled your phone for public searching!");
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else if(HasPlayerToggledOffDirectory[playerid] == 0)
		{
		    HasPlayerToggledOffDirectory[playerid] = 1;
		    
		    format(string, sizeof(string), "[PHONE UPDATE]:{FFFFFF} You have just disabled your phone for public searching!");
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	return 1;
}

CMD:phonebook(playerid, params[])
{
    if(PlayerData[playerid][Character_Has_Phone] > 0)
    {
	    new dialogText[1024], tempRow[256];
	    new count = 0;
	
		dialogText[0] = '\0';
		
	    for (new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if (IsPlayerConnected(i))
	        {
	            if (HasPlayerToggledOffDirectory[i] == 0)
				{
	                format(tempRow, sizeof(tempRow), "%d. Name: %s | Phone Number: %i\n", count + 1, PlayerData[i][Character_Name], PlayerData[i][Character_Phonenumber]);
	                count++;
	
					strcat(dialogText, tempRow);
	            }
	        }
	    }
	    if (count > 0)
	    {
	        ShowPlayerDialog(playerid, DIALOG_PHONEBOOK_NUMBERS, DIALOG_STYLE_LIST, "Phonebook Directory", dialogText, "Close", "");
	    }
	    else
	    {
	        ShowPlayerDialog(playerid, DIALOG_PHONEBOOK_NUMBERS, DIALOG_STYLE_LIST, "Phonebook Directory", "There are no active phones online!", "Close", "");
	    }
	}
    else return SendPlayerErrorMessage(playerid, " You do not currently have a phone!");
    return 1;
}

CMD:gps(playerid, params[])
{
	if(HasGPSBeenDisabled[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently already in an action that requires a checkpoint to be cleared!");
	else
    {
	    ShowPlayerDialog(playerid, DIALOG_GPS_MAIN, DIALOG_STYLE_LIST, "GPS Device", "Popular Locations\nFaction Locations\nJob Locations", "Next", "Close");
	}
    return 1;
}

CMD:cancelgps(playerid, params[])
{
    if(GPSOn[playerid] == true)
    {
        GPSOn[playerid] = false;
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "You have just cancelled your gps location setup!");
	
		HasGPSBeenDisabled[playerid] = 0;
	}
    else return SendPlayerErrorMessage(playerid, " You do not currently have a phone with a gps location preset!");
    return 1;
}

CMD:rappel(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 2142.9473,1619.6405,1000.9688))
     	{
		    if(PlayerData[playerid][Character_Has_Rope] > 0)
	        {
                new string[256];
				format(string, sizeof(string), "> %s climbed into the vents and used a rope to enter the vault", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

				PlayerData[playerid][Character_Has_Rope] -= 1;

				SetPlayerPos(playerid, 2146.0591,1630.5077,993.5761);
			}
			else return SendPlayerErrorMessage(playerid, " You do not have a rope on you at this time!");
        }
        else return SendPlayerErrorMessage(playerid, " You are currently not near a vent location to rappel down!");
	}
	return 1;
}

CMD:hack(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2142.4463,1626.2913,993.6882))
     	{
		    if(PlayerData[playerid][Character_Has_Device] > 0 && BankDoorOpen == false)
	        {
                new string[256];
				format(string, sizeof(string), "> %s removes a tablet from their pocket and connects it to the keypad and the door opens", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

				PlayerData[playerid][Character_Has_Device] -= 1;

				ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, false, false, false, false, 0, SYNC_ALL);

				MoveDynamicObject(BankDoor, 2145.1274, 1626.2031, 994.2476, 0.05, 0.00000, 0.00000, 270.00000);
	            BankDoorOpen = true;
			}
			else if(PlayerData[playerid][Character_Has_Device] == 0) return SendPlayerErrorMessage(playerid, " You do not have any hacking devices on you to break into this vault!");
        }
		else if(IsPlayerNearHouseDoor(playerid) && PlayerAtHouseID[playerid] != 0)
		{
			new string[256];
			format(string, sizeof(string), "> %s removes a hacking device from their pocket and starts to turn off the alarm", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
			PlayerData[playerid][Character_Has_Device] --;
				
			new hdoorid = PlayerAtHouseID[playerid];
			HouseData[hdoorid][House_Alarm_Active] = 0;
				
			new equery[500];
		    mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_alarm_active` = 0 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
			mysql_tquery(connection, equery);
		}
        else return SendPlayerErrorMessage(playerid, " You are not near anything that can be hacked!");
	}
	return 1;
}

CMD:rob(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2143.9087,1640.0277,993.5761))
     	{	
			new count;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerData[i][Character_Faction] == 1)
				{
				    count ++;
				}
			}
			
			if(count == 0) return SendPlayerErrorMessage(playerid, " The bank cannot be robbed while there are now police online!");
		    else if(count > 0 && BankRobberyTimer == 0)
			{
	            new string[256];
				format(string, sizeof(string), "> %s has started filling their pockets with money", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

				TogglePlayerControllable(playerid, false);

				new dstring[256];
	      		format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} ALL UNITS, ALL UNITS, BANK ROBBERY IN PROGRESS");
				SendFactionRadioMessage(1, COLOR_RED, dstring);

				SendClientMessage(playerid, COLOR_YELLOW, "- You have been frozen for one minute while you rob the bank");
				
				HasPlayerRobbedBank[playerid] = 1;

				BankRobberyTimer = 1;
	        }
	        else return SendPlayerErrorMessage(playerid, " Someone else has robbed the bank recently, please try again later!");
		}
		else if(IsPlayerNearBusinessShopPoint(playerid) && PlayerAtBusinessBuyPointID[playerid] != 0)
		{
		    new shopid, count, string[256];
		    shopid = PlayerAtBusinessBuyPointID[playerid];

			if(BusinessData[shopid][Business_Type] == 7)
			{
		 		for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(HasPlayerRobbedAmmunation[i] > 0)
					{
					    count ++;
					}
				}
				
				if(count > 0)
				{
				    SendPlayerErrorMessage(playerid, " Someone else has robbed this recently, please try again later!");
				}
				else if(count == 0)
				{
				    HasPlayerRobbedAmmunationPoint[playerid] = 1;
				    HasPlayerRobbedAmmunation[playerid] = 300;
				    
				    format(string, sizeof(string), "- You have started to rob the ammunation, go around and collect the markers! [You have one minute]");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					
					new dstring[256];
	      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} ALL UNITS, ALL UNITS, AMMUNATION ROBBERY IN PROGRESS");
					SendFactionRadioMessage(1, COLOR_RED, dstring);
					
					SetPlayerCheckpoint(playerid, 307.3639, -132.0233, 1004.0625, 2.0);
				}
	    	}
			else if(BusinessData[shopid][Business_Type] == 1)
			{
		 		for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(HasPlayerRobbed247Store[i] > 0)
					{
					    count ++;
					}
				}
				
				if(count > 0)
				{
				    SendPlayerErrorMessage(playerid, " Someone else has robbed this recently, please try again later!");
				}
				else if(count == 0)
				{
				    HasPlayerRobbed247Store[playerid] = 560;
				
					format(string, sizeof(string), "> %s has started grabbing money out of the cash register", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					TogglePlayerControllable(playerid, false);

					new dstring[256];
	      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} ALL UNITS, ALL UNITS, GAS STATION ROBBERY IN PROGRESS");
					SendFactionRadioMessage(1, COLOR_RED, dstring);

					SendClientMessage(playerid, COLOR_YELLOW, "- You have been frozen for 30 seconds while you rob the gas station");
					
					Cooldown_Timer[playerid] = SetTimerEx("Rob247_Cooldown_Timer", 30000, false, "i", playerid);
				}
	    	}
			else if(BusinessData[shopid][Business_Type] == 2)
			{
		 		for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(HasPlayerRobbedSupermarket[i] > 0)
					{
					    count ++;
					}
				}
				
				if(count > 0)
				{
				    SendPlayerErrorMessage(playerid, " Someone else has robbed this recently, please try again later!");
				}
				else if(count == 0)
				{
				    HasPlayerRobbedSupermarket[playerid] = 560;
				
					format(string, sizeof(string), "> %s has started grabbing money out of the cash register", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					TogglePlayerControllable(playerid, false);

					new dstring[256];
	      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} ALL UNITS, ALL UNITS, SUPERMARKET ROBBERY IN PROGRESS");
					SendFactionRadioMessage(1, COLOR_RED, dstring);

					SendClientMessage(playerid, COLOR_YELLOW, "- You have been frozen for 30 seconds while you rob the gas station");
					
					Cooldown_Timer[playerid] = SetTimerEx("RobSM_Cooldown_Timer", 30000, false, "i", playerid);
				}
	    	}
			else if(BusinessData[shopid][Business_Type] == 3)
			{
		 		for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(HasPlayerRobbedElectronics[i] > 0)
					{
					    count ++;
					}
				}
				
				if(count > 0)
				{
				    SendPlayerErrorMessage(playerid, " Someone else has robbed this recently, please try again later!");
				}
				else if(count == 0)
				{
				    HasPlayerRobbedElectronics[playerid] = 560;
				
					format(string, sizeof(string), "> %s has started grabbing money out of the cash register", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					TogglePlayerControllable(playerid, false);

					new dstring[256];
	      			format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} ALL UNITS, ALL UNITS, ELECTRONIC STORE ROBBERY IN PROGRESS");
					SendFactionRadioMessage(1, COLOR_RED, dstring);

					SendClientMessage(playerid, COLOR_YELLOW, "- You have been frozen for 30 seconds while you rob the gas station");
					
					Cooldown_Timer[playerid] = SetTimerEx("RobES_Cooldown_Timer", 30000, false, "i", playerid);
				}
	    	}
		}
		else
		{
			SendPlayerErrorMessage(playerid, " You are not in the bank vault or at a store that you can rob!");
		}
	}
	return 1;
}

CMD:hotwire(playerid, params[]) return cmd_hw(playerid, params);
CMD:hw(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Has_Lockpick] > 0)
        {
            new vid;
			new Float:vPos[3];

			vid = GetClosestVehicle(playerid);
			GetVehiclePos(vid, vPos[0],vPos[1],vPos[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, vPos[0], vPos[1], vPos[2]))
            {
                if(VehicleData[vid][Vehicle_Faction] > 0)
                {
                    if(IsPlayerCuffed[playerid] == 1) return SendPlayerErrorMessage(playerid, " You cannot use this command while handcuffed!");

	                IsPlayerStealingCar[playerid] = VehicleData[vid][Vehicle_Faction];
	                IsPlayerStealingCarID[playerid] = vid;
	                
	                new string[256];
					format(string, sizeof(string), "> %s has started to break in and hotwire the vehicle near them", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
					PlayerData[playerid][Character_Has_Lockpick] -= 1;
					
					SendClientMessage(playerid, COLOR_YELLOW, "- You now must wait 20secs before you can use this vehicle!");

					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, true, false, false, false, 0, SYNC_ALL);
					
	                Hotwire_Timer[playerid] = SetTimerEx("HotWireTimer", 20000, false, "i", playerid);
                }
                else if(VehicleData[vid][Vehicle_Faction] == 0)
                {
                    if(IsPlayerCuffed[playerid] == 1) return SendPlayerErrorMessage(playerid, " You cannot use this command while handcuffed!");

	                IsPlayerStealingCar[playerid] = 999;
	                IsPlayerStealingCarID[playerid] = vid;
	                
	                new string[256];
					format(string, sizeof(string), "> %s has started to break in and hotwire the vehicle near them", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
					PlayerData[playerid][Character_Has_Lockpick] -= 1;
					
					SendClientMessage(playerid, COLOR_YELLOW, "- You now must wait 20secs before you can use this vehicle!");

                 	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, true, false, false, false, 0, SYNC_ALL);

	                Hotwire_Timer[playerid] = SetTimerEx("HotWireTimer", 20000, false, "i", playerid);
                }
			}
        }
        else return SendPlayerErrorMessage(playerid, " You currently do not have any lockpicks!");
	}
	return 1;
}

CMD:lockpick(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		if(PlayerData[playerid][Character_Has_Lockpick] == 0) return SendPlayerErrorMessage(playerid, " You cannot lockpick a house door, because you have no lockpicks!");
		{
			if(IsPlayerNearHouseDoor(playerid) && PlayerAtHouseID[playerid] != 0)
			{
				new string[256];
				format(string, sizeof(string), "> %s removes a lockpick from their pocket and starts to enter the property", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				
				PlayerData[playerid][Character_Has_Lockpick] --;
				
				new hdoorid = PlayerAtHouseID[playerid];
				HouseData[hdoorid][House_Lock_Active] = 0;
				
				new equery[500];
		        mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_lock_active` = 0 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
				mysql_tquery(connection, equery);
			}
			else return SendPlayerErrorMessage(playerid, " You are not near anything that can be lockpicked!");
		}
	}
	return 1;
}

CMD:call(playerid, params[])
{
	new phonenumber, matchfound;
	
	matchfound = 0;

    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		if(PlayerData[playerid][Character_Has_Phone] > 0)
        {
            if(sscanf(params, "i", phonenumber))
            {
			   	SendPlayerTipMessage(playerid, " /call [phonenumber]");
				SendPlayerTipMessage(playerid, " [111 - Emergency | 999 - Mechanic | 888 - Towing | ****** - Players Number]");
			}
			else
			{
			    if(phonenumber == 0) return SendPlayerErrorMessage(playerid, " This number is not currently in service!");
			    if(phonenumber == 111)
			    {
			        HasPlayerMadeAnEmergencyCall[playerid] = 1;
			        EmergencyCallTypeRequired[playerid] = 0;
			        EmergencyCallTypeReason[playerid] = 0;
			        
					new string[256];
					format(string, sizeof(string), "> %s removes their phone from their pocket and starts dialing a number", GetRPName(playerid));
	   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	   				
					format(string, sizeof(string), "[Phone] Emergency Responder says: Who is required? (police, fire or medical)");
                    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);

			    }
			    else if(phonenumber == 999)
			    {
			        HasPlayerMadeRequestCall[playerid] = 1;
			        RequestCallType[playerid] = 0;
			        RequestCallReason[playerid] = 0;

					new string[256];
					format(string, sizeof(string), "> %s removes their phone from their pocket and starts dialing a number", GetRPName(playerid));
	   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					format(string, sizeof(string), "[Phone] Mechanic Dispatch says: Do you require assistance at your location?");
					SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);

			    }
			    else if(phonenumber == 888)
			    {
			        HasPlayerMadeRequestCall[playerid] = 2;
			        RequestCallType[playerid] = 0;
			        RequestCallReason[playerid] = 0;

					new string[256];
					format(string, sizeof(string), "> %s removes their phone from their pocket and starts dialing a number", GetRPName(playerid));
	   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					format(string, sizeof(string), "[Phone] Towing Dispatch says: Do you require assistance at your location?");
					SendNearbyMessage(playerid, 5.0, COLOR_WHITE, string);

			    }
			    else
			    {
			        if(PlayerData[playerid][Character_Has_SimCard] > 0)
        			{
				        for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(PlayerData[i][Character_Phonenumber] == phonenumber && matchfound == 0)
				      		{
						    	matchfound = 1;
	                            HasPlayerMadeACall[playerid] = 1;
						    	WhoIsCalling[playerid] = i;
						    	WhoIsCalling[i] = playerid;

								new string[128];
							  	format(string, sizeof(string), "> %s phone starts ringing in their pocket", GetRPName(i));
							   	SendNearbyMessage(i, 30.0, COLOR_PURPLE, string);

							   	new dstring[256];
								format(dstring, sizeof(dstring), "[Phone]:{FFFFFF} You have an incoming call from %s (/pickup to answer the phone)!", PlayerData[playerid][Character_Name]);
								SendClientMessage(i, COLOR_ORANGE, dstring);

								format(string, sizeof(string), "> %s removes their phone from their pocket and starts dialing a number", GetRPName(playerid));
							   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							   	format(dstring, sizeof(dstring), "[Phone]:{FFFFFF} You have dialed an outgoing call to %s (/endcall to stop the line)!", PlayerData[i][Character_Name]);
								SendClientMessage(playerid, COLOR_ORANGE, dstring);

							   	print("match found");
							}
						}
						if(matchfound == 0)
						{
						    SendPlayerErrorMessage(playerid, " This number is not currently in service!");
						}
					}
					else return SendPlayerErrorMessage(playerid, " You cannot make non emergency calls because you don't have a simcard!");
			    }
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not currently have a phone!");
	}
	return 1;
}

CMD:pickup(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		if(PlayerData[playerid][Character_Has_Phone] > 0 && WhoIsCalling[playerid] != 9999999)
        {
            new string[128];
 			format(string, sizeof(string), "> %s answers their phone", GetRPName(playerid));
		 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

		   	new dstring[256];
			format(dstring, sizeof(dstring), "[Phone]:{FFFFFF} [Now you can talk into the phone]");
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			HasCallBeenPickedUp[playerid] = 1;
					
 		   	for(new targetid = 0; targetid < MAX_PLAYERS; targetid++)
			{
				if(WhoIsCalling[targetid] == playerid)
				{
		            HasCallBeenPickedUp[targetid] = 1;
					
					format(dstring, sizeof(dstring), "[Phone]:{FFFFFF} [They have picked up the phone call, you can now talk]");
					SendClientMessage(targetid, COLOR_ORANGE, dstring);
				}
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not currently have any calls to answer!");
	}
	return 1;
}

CMD:endcall(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(HasPlayerMadeAnEmergencyCall[playerid] == 1)
        {
            HasPlayerMadeAnEmergencyCall[playerid] = 0;
        	EmergencyCallTypeRequired[playerid] = 0;
			EmergencyCallTypeReason[playerid] = 0;
			
			new string[128];
 			format(string, sizeof(string), "> %s puts their phone away in their pocket", GetRPName(playerid));
		   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
        }
		else if(HasCallBeenPickedUp[playerid] == 1)
        {
            new string[128];
 			format(string, sizeof(string), "> %s puts their phone away in their pocket", GetRPName(playerid));
		   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

		   	new dstring[256];
			format(dstring, sizeof(dstring), "[Phone]:{FFFFFF} The phonecall has just ended!");
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			HasCallBeenPickedUp[playerid] = 0;
		 	WhoIsCalling[playerid] = 9999999;
					
		   	for(new targetid = 0; targetid < MAX_PLAYERS; targetid++)
			{
				if(WhoIsCalling[targetid] == playerid)
				{
				    format(string, sizeof(string), "> %s puts their phone away in their pocket", GetName(WhoIsCalling[playerid]));
                    SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, string);

				   	format(dstring, sizeof(dstring), "[Phone]:{FFFFFF} The phonecall has just ended!");
					SendClientMessage(targetid, COLOR_ORANGE, dstring);
					
					HasCallBeenPickedUp[targetid] = 0;
			
                    WhoIsCalling[targetid] = 9999999;
				}
			}
		}
		else if(HasPlayerMadeACall[playerid] == 1)
        {
			new string[128];
		  	format(string, sizeof(string), "> %s puts their phone away in their pocket", GetRPName(playerid));
		   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

		   	new dstring[256];
			format(dstring, sizeof(dstring), "[Phone]:{FFFFFF} The phonecall has just ended!");
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			HasPlayerMadeACall[playerid] = 0;
			
  		    WhoIsCalling[playerid] = 9999999;
			for(new targetid = 0; targetid < MAX_PLAYERS; targetid++)
			{
				if(WhoIsCalling[targetid] == playerid)
				{
                    WhoIsCalling[targetid] = 9999999;
				}
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not currently have any calls to end!");
	}
	return 1;
}

CMD:tickets(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `crime_information` WHERE `crime_character_name` = '%e' AND `crime_paid` = 0 AND `crime_type` = 1", PlayerData[playerid][Character_Name]);
		mysql_tquery(connection, query, "OnPlayerTicketCheck", "i", playerid);
	}
	return 1;
}

CMD:payticket(playerid, params[])
{
    if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new ticketid;
	    
	    if(sscanf(params, "i", ticketid))
    	{
			SendPlayerTipMessage(playerid, " /payticket [ticketid]");
   		}
		else
		{
		    new query[128];
		    mysql_format(connection, query, sizeof(query), "SELECT * FROM `crime_information` WHERE `crime_report_id` = '%d' LIMIT 1", ticketid);
			mysql_tquery(connection, query, "OnPlayerTicketPay");
		}
	}
	return 1;
}

CMD:paybill(playerid, params[])
{
    if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new billid;
	    
	    if(sscanf(params, "i", billid))
    	{
			SendPlayerTipMessage(playerid, " /paybill [billid]");
   		}
		else
		{
		    new query[128];
		    mysql_format(connection, query, sizeof(query), "SELECT * FROM `bill_information` WHERE `bill_id` = '%d' LIMIT 1", billid);
			mysql_tquery(connection, query, "OnBillPay");
		}
	}
	return 1;
}
    
CMD:bills(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `bill_information` WHERE `character_name` = '%e'", PlayerData[playerid][Character_Name]);
		mysql_tquery(connection, query, "OnBillCheck");
	}
	return 1;
}

CMD:billcustomer(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    if(PlayerData[playerid][Character_Faction] == 9)
	    {
		    new targetid, money;

		    if(sscanf(params, "ii", targetid, money))
		    {
		        SendPlayerTipMessage(playerid, " /billcustomer [targetid] [amount]");
		    }
		    else
		    {
				if(!IsPlayerConnected(targetid))
				{
					new maskid = targetid;
					new count = 0;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
			        {
			            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
			            {
			                targetid = i;
							count = 1;
			                break;
			            }
			        }
			
					if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot bill yourself money!");
					if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
				}
		        if(IsPlayerNearPlayer(playerid, targetid, 5.0))
		        {
			        new query[2000];
	        		mysql_format(connection, query, sizeof(query), "INSERT INTO `bill_information` (`character_name`, `bill_amount`, `bill_type`, `bill_name`) VALUES ('%e', '%d','9','%e')", PlayerData[targetid][Character_Name], money, PlayerData[playerid][Character_Name]);
					mysql_tquery(connection, query);

				    new dstring[256];
					format(dstring, sizeof(dstring), "- You have just been given a bill of $%i, by %s (/paybill)!", money, GetName(playerid));
					SendClientMessage(targetid, COLOR_YELLOW, dstring);

					format(dstring, sizeof(dstring), "- You have just given a bill to %s for $%i!", GetName(targetid), money);
					SendClientMessage(playerid, COLOR_YELLOW, dstring);

					format(dstring, sizeof(dstring), "> %s has removed a bill sheet from their pocket and given %s a peice of paper", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid,30.0, COLOR_PURPLE, dstring);
				}
				else return SendPlayerErrorMessage(playerid, " You are not near a player to bill a charge too!");
		    }
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

// DUDEFIX COMMANDS

CMD:shovel(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 8)
	    {
	        new vehicleid;
	        new Float:vPos[3];
	        
	        vehicleid = GetClosestVehicle(playerid);
			GetVehiclePos(vehicleid, vPos[0],vPos[1],vPos[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, vPos[0], vPos[1], vPos[2]))
            {
		        if(VehicleData[vehicleid][Vehicle_Faction] == 8 && HasPlayerGotShovel[playerid] == 0)
		        {
		        	GivePlayerWeapon(playerid, WEAPON_SHOVEL, 1);

		        	new string[128];
	  				format(string, sizeof(string), "> %s removes a shovel from the back of their vehicle", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					HasPlayerGotShovel[playerid] = 1;
				}
				else if(VehicleData[vehicleid][Vehicle_Faction] == 8 && HasPlayerGotShovel[playerid] == 1)
		        {
		        	ResetPlayerWeapons(playerid);

		        	new string[128];
	  				format(string, sizeof(string), "> %s places the shovel back into their vehicle", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					HasPlayerGotShovel[playerid] = 0;
				}
			}
		}
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}
		
CMD:fixpipe(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 8)
		{
	        if(DudefixJobID == 0) return SendPlayerErrorMessage(playerid, " There are no above ground pipes to fix!");
			if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You cannot action this within a vehicle!");
	        if(HasPlayerGotShovel[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to have a shovel before you can fix this pipe [Go to the back of your vehicle /shovel]!");
	        if(DudefixJobID == 1)
	        {
		        if(IsPlayerInRangeOfPoint(playerid, 30, 1349.8253,-1399.9447,13.3056))
		        {
		            DestroyDynamicObject(DudeFixObjectFive);
		            
		            MoveDynamicObject(DudeFixObjectOne, 1352.17017, -1397.91748, -20, 0.5, 26.52001, 71.70001, 116.57999);
		            MoveDynamicObject(DudeFixObjectTwo, 1352.20020, -1395.06470, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            MoveDynamicObject(DudeFixObjectThree, 1354.84485, -1398.43799, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            MoveDynamicObject(DudeFixObjectFour, 1348.37390, -1399.37317, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            
		            new string[128];
		  			format(string, sizeof(string), "> %s turns off the water supply and starts to slowly move away the pieces", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					ApplyAnimation(playerid, "CHAINSAW", "CSAW_1", 4.0, true, false, false, false, 0, SYNC_ALL);
		            
                    Repair_Timer[playerid] = SetTimerEx("RepairTimer", 10000, false, "i", playerid);
				}
				else return SendPlayerErrorMessage(playerid, " You are not near the active job site!");
			}
			else if(DudefixJobID == 2)
	        {
		        if(IsPlayerInRangeOfPoint(playerid, 30, 1529.4000,-1672.0344,13.3828))
		        {
		            DestroyDynamicObject(DudeFixObjectFive);
		            
		            MoveDynamicObject(DudeFixObjectOne, 1527.92517, -1671.25366, -20, 0.5, 14.40001, 10.56000, -139.56006);
		            MoveDynamicObject(DudeFixObjectTwo, 1527.42981, -1673.72827, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            MoveDynamicObject(DudeFixObjectThree, 1532.23157, -1673.28320, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            MoveDynamicObject(DudeFixObjectFour, 1526.41724, -1668.61755, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            
		            new string[128];
		  			format(string, sizeof(string), "> %s turns off the water supply and starts to slowly move away the pieces", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
					ApplyAnimation(playerid, "CHAINSAW", "CSAW_1", 4.0, true, false, false, false, 0, SYNC_ALL);
		            
                    Repair_Timer[playerid] = SetTimerEx("RepairTimer", 10000, false, "i", playerid);
				}
				else return SendPlayerErrorMessage(playerid, " You are not near the active job site!");
			}
			else if(DudefixJobID == 3)
	        {
		        if(IsPlayerInRangeOfPoint(playerid, 30, 2090.9763,-1752.6794,13.4049))
		        {
		            DestroyDynamicObject(DudeFixObjectFive);
		            
		            MoveDynamicObject(DudeFixObjectOne, 2092.47217, -1751.63062, -20, 0.5, 46.67999, -10.44001, 0.00000);
		            MoveDynamicObject(DudeFixObjectTwo, 2090.65234, -1753.89099, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            MoveDynamicObject(DudeFixObjectThree, 2091.60034, -1749.64600, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            MoveDynamicObject(DudeFixObjectFour, 2094.53247, -1751.27051, -20, 0.5, 0.00000, 0.00000, 90.00000);
		            
		            new string[128];
		  			format(string, sizeof(string), "> %s turns off the water supply and starts to slowly move away the pieces", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
					ApplyAnimation(playerid, "CHAINSAW", "CSAW_1", 4.0, true, false, false, false, 0, SYNC_ALL);
		            
                    Repair_Timer[playerid] = SetTimerEx("RepairTimer", 10000, false, "i", playerid);
				}
				else return SendPlayerErrorMessage(playerid, " You are not near the active job site!");
			}
		}
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

// LS BANK COMMANDS
CMD:computer(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 4 && PlayerData[playerid][Character_Faction_Rank] > 1)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 20, 2168.2319, 1603.6072, 999.9726))
	        {
	        	ShowPlayerDialog(playerid, DIALOG_BANK_FAC_LOGIN, DIALOG_STYLE_PASSWORD, "Los Santos Bank Computer", "Welcome to the Los Santos Bank Computer System\n\nThis system is where you will be able to review requested loans.\n\nPlease enter in your work password:", "Login", "Close");
			}
			else return SendPlayerErrorMessage(playerid, " You need to be inside the bank office to use this feature!");
		}
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:funds(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 4)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 20, 2168.2319, 1603.6072, 999.9726))
	        {
	        	new dstring[256];
				format(dstring, sizeof(dstring), "- You currently have $%d in your factions funds. If you need more, please request a money delivery or speak to an admin!", FactionData[4][Faction_Money], GetName(playerid));
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
			else return SendPlayerErrorMessage(playerid, " You need to be inside the bank office to use this feature!");
		}
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

// MECHANIC COMMANDS
CMD:fillvehicle(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 9)
	    {
		    new vehicleid = GetPlayerVehicleID(playerid);

		    if(IsPlayerInVehicle(playerid, vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        if(MechanicFuelAmount[playerid] <= 19) return SendPlayerErrorMessage(playerid, " You have a low amount of fuel on your persons, go back to the yard to refill your cans!");
		        else
		        {
			        if(VehicleData[vehicleid][Vehicle_Fuel] >= 20) return SendPlayerErrorMessage(playerid, " You cannot fill up a vehicle that has more than the allowed amount you can give!");
					else
					{
					    VehicleData[vehicleid][Vehicle_Fuel] += 20;
					    MechanicFuelAmount[playerid] -= 20;

					    new string[128];
					  	format(string, sizeof(string), "> %s adds a small amount of fuel to the vehicle to get it going", GetRPName(playerid));
					   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			        }
				}
		    }
		    else
		    {
		        SendPlayerErrorMessage(playerid, " You are not in the drivers seat of a vehicle you are fixing!");
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:fix(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 9)
	    {
		    new vehicleid = GetPlayerVehicleID(playerid);

		    if(IsPlayerInVehicle(playerid, vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new Float:vehicleHealth;
	        	GetVehicleHealth(vehicleid, vehicleHealth);
	        	
		        if(vehicleHealth == 1000) return SendPlayerErrorMessage(playerid, " You cannot repair a vehicle that is sitting at full health!");
		        else
		        {
			        if(MechanicToolAmount[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have any more avaliable tools to use on this vehicle!");
					else
					{
					    MechanicToolAmount[playerid] -= 1;
						SetVehicleHealth(vehicleid, 1000);
						RepairVehicle(vehicleid);

					    new string[128];
					  	format(string, sizeof(string), "> %s starts fixing the vehicle from the issues that have been found", GetRPName(playerid));
					   	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			        }
				}
		    }
		    else
		    {
		        SendPlayerErrorMessage(playerid, " You are not in the drivers seat of a vehicle you are fixing!");
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:checkgear(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 9)
	    {
		    if(IsPlayerOnDuty[playerid] == 1)
   			{
				new string[128];
				
				SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Tool Bag Contents{FFFFFF} ***");
				format(string, sizeof(string), "> Tool Kits: %d", MechanicToolAmount[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "> Fuel Kits: %d", MechanicFuelAmount[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				
	  			format(string, sizeof(string), "> %s remove their tool bag and inspects the contents", GetRPName(playerid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

   			}
   			else return SendPlayerErrorMessage(playerid, " You are not on duty!");
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:tools(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 9)
	    {
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 2054.3008,-1842.2689,13.5633))
		    {
		    	if(IsPlayerOnDuty[playerid] == 1)
	            {
			        MechanicFuelAmount[playerid] = 20;
			        MechanicToolAmount[playerid] = 5;
				
				    new string[128];
	  				format(string, sizeof(string), "> %s removes a fuel can and tool pack from the bench", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				
    			}
    			else return SendPlayerErrorMessage(playerid, " You are not on duty!");
		    }
		    else return SendPlayerErrorMessage(playerid, " You are not near the /tools point!");
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:pickroute(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(HasGPSBeenDisabled[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently already in an action that requires a checkpoint to be cleared!");
    else
    {
		if(PlayerData[playerid][Character_Faction] == 7)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, 2128.1775,-2277.4907,20.6643))
		    {
                ShowPlayerDialog(playerid, DIALOG_JOB_VIEW, DIALOG_STYLE_LIST, "Trucking Company - Jobs", "1. Money Transport\n2. Parcel Transport\n3. Good Deliveries", "Next", "Close");
            }
            else return SendPlayerErrorMessage(playerid, " You are not near your office desk, you cannot select a job here!");
		}
   	}
	return 1;
}

CMD:endroute(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Faction] == 7)
        {
            if(TruckJobPlayer[playerid] > 0)
		    {
                new dstring[256];
				format(dstring, sizeof(dstring), "- You have just finished your current route!");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);

				RouteChosen[playerid] = 0;
				
				TruckJobCount[playerid] = 0;
		   		TruckJobPlayer[playerid] = 0;
		
				DisablePlayerCheckpoint(playerid);
				
				HasGPSBeenDisabled[playerid] = 0;
            }
            else return SendPlayerErrorMessage(playerid, " You have not started a Trucking Job yet!");
		}
		//else return SendPlayerErrorMessage(playerid, " You are not currently running a job route!");
   	}
	return 1;
}

CMD:startjob(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(HasGPSBeenDisabled[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently already in an action that requires a checkpoint to be cleared!");
    else
    {
		if(PlayerData[playerid][Character_Job] == 1 && PizzaJobDeliveryPlayer[playerid] == 0)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, 2102.2109, -1789.1084, 13.5547))
		    {
                PizzaJobDeliveryPlayer[playerid] = 1;
				PizzaJobDeliveryCount[playerid] = 1;
				
				new dstring[256];
				format(dstring, sizeof(dstring), "- You have just started the pizza delivery process. Go inside the store and make a pizza");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				SetPlayerCheckpoint(playerid, 2105.1101,-1806.3700,13.5547, 0.5);
				
				HasGPSBeenDisabled[playerid] = 1;
				
				if(strcmp("Male", PlayerData[playerid][Character_Sex]) == 0)
				{
					SetPlayerSkin(playerid, 155);
				}
				else if(strcmp("Female", PlayerData[playerid][Character_Sex]) == 0)
				{
					SetPlayerSkin(playerid, 205);
				}
            }
            else return SendPlayerErrorMessage(playerid, " You are not near your job icon location!");
		}
		if(PlayerData[playerid][Character_Job] == 2 && GarbageJobPlayer[playerid] == 0)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, 2201.1582,-1974.1382,13.5576))
		    {
                GarbageJobPlayer[playerid] = 1;
				GarbageJobCount[playerid] = 1;
				
				new dstring[256];
				format(dstring, sizeof(dstring), "- You have just started the garbage collection job. Grab a truck and go service the community");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				new randomNumber = GetValidHouseJobNumber();
				SetPlayerCheckpoint(playerid, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z], 3.0);
				
				HasGPSBeenDisabled[playerid] = 1;
				
				if(strcmp("Male", PlayerData[playerid][Character_Sex]) == 0)
				{
					SetPlayerSkin(playerid, 206);
				}
				else if(strcmp("Female", PlayerData[playerid][Character_Sex]) == 0)
				{
					SetPlayerSkin(playerid, 298);
				}
            }
            else return SendPlayerErrorMessage(playerid, " You are not near your job icon location!");
		}
		if(PlayerData[playerid][Character_Job] == 3 && ElectricianJobPlayer[playerid] == 0)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, 992.1449,-1454.0868,13.5469))
		    {
				new randomNumber;
				randomNumber = random(3) + 1;
				
				ElectricianJobPlayer[playerid] = randomNumber;
			    
			    if(ElectricianJobPlayer[playerid] == 1)
			    {
			        new dstring[256];
					format(dstring, sizeof(dstring), "- You have just started an electrician route, go and fix the traffic lights");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					new randIndex = random(sizeof(ElectricianJob1));
					SetPlayerCheckpoint(playerid, ElectricianJob1[randIndex][0],ElectricianJob1[randIndex][1],ElectricianJob1[randIndex][2], 3.0);
				}
				if(ElectricianJobPlayer[playerid] == 2)
			    {
		            new dstring[256];
					format(dstring, sizeof(dstring), "- You have just started a parking meter route, go and fix the payment booths");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					new randIndex = random(sizeof(ElectricianJob2));
					SetPlayerCheckpoint(playerid, ElectricianJob2[randIndex][0],ElectricianJob2[randIndex][1],ElectricianJob2[randIndex][2], 3.0);
				}
				if(ElectricianJobPlayer[playerid] == 3)
			    {
		            new dstring[256];
					format(dstring, sizeof(dstring), "- You have just started a gas pump route, go and fix the pumps at the gas stations");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					new randIndex = random(sizeof(ElectricianJob3));
					SetPlayerCheckpoint(playerid, ElectricianJob3[randIndex][0],ElectricianJob3[randIndex][1],ElectricianJob3[randIndex][2], 3.0);
				}
				
				ElectricianJobCount[playerid] = 1;
				
				HasGPSBeenDisabled[playerid] = 1;
				
				if(strcmp("Male", PlayerData[playerid][Character_Sex]) == 0)
				{
					SetPlayerSkin(playerid, 260);
				}
				else if(strcmp("Female", PlayerData[playerid][Character_Sex]) == 0)
				{
					SetPlayerSkin(playerid, 226);
				}
            }
            else return SendPlayerErrorMessage(playerid, " You are not near your job icon location!");
		}
   	}
	return 1;
}

CMD:stopjob(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Job] == 1 && PizzaJobDeliveryPlayer[playerid] == 1)
        {
            PizzaJobDeliveryPlayer[playerid] = 0;
			PizzaJobDeliveryCount[playerid] = 0;
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just ended your pizza delivery run!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			DisablePlayerCheckpoint(playerid);
			
			HasGPSBeenDisabled[playerid] = 0;	
			
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);	
		}
		if(PlayerData[playerid][Character_Job] == 2 && GarbageJobPlayer[playerid] == 1)
        {
            GarbageJobPlayer[playerid] = 0;
			GarbageJobCount[playerid] = 0;
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just ended your truck run for collecting rubbish!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			DisablePlayerCheckpoint(playerid);	
			
			HasGPSBeenDisabled[playerid] = 0;	
			
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		}
		if(PlayerData[playerid][Character_Job] == 3 && ElectricianJobPlayer[playerid] > 0)
        {
            ElectricianJobPlayer[playerid] = 0;
			ElectricianJobCount[playerid] = 0;
				
			new dstring[256];
			format(dstring, sizeof(dstring), "- You have just ended your electrician run!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			DisablePlayerCheckpoint(playerid);	
			
			HasGPSBeenDisabled[playerid] = 0;	
			
			SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
		}
		//else return SendPlayerErrorMessage(playerid, " You are not currently running a job route!");
   	}
	return 1;
}

// LSMC COMMANDS
CMD:heal(playerid, params[])
{
	new targetid;
	
	if(PlayerData[playerid][Character_Faction] == 3)
	{
	    if(IsPlayerOnDuty[playerid] == 1)
		{
		    if(sscanf(params, "i", targetid))
   			{
				SendPlayerTipMessage(playerid, " /heal [targetid]");
			}
			else
			{
			    if(!IsPlayerConnected(targetid))
				{
					new maskid = targetid;
					new count = 0;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
			        {
			            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
			            {
			                targetid = i;
							count = 1;
			                break;
			            }
			        }
			
					if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot heal yourself!");
					if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
				}
			    else
				{
				    new Float:health;
					GetPlayerHealth(targetid, health);
				    
					if(health > 80) return SendPlayerErrorMessage(playerid, " You cannot heal someone more than 80% of their health!");
					else
					{
					    new string[256];
		      			format(string, sizeof(string), "> %s has removed some medical supplies from their bag and applied them to %s", GetRPName(playerid), GetRPName(targetid));
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, true, false, false, false, 0, SYNC_ALL);
						
						PlayerData[targetid][Character_Health] = 80;
						SetPlayerHealth(targetid, 80);
						
						if(IsPlayerInjured[targetid] == 1)
						{
							IsPlayerInjured[targetid] = 0;
						
							new dstring[256];
							format(dstring, sizeof(dstring), "- You have just received medical care, use /stopanim to get up and move around when ready!");
							SendClientMessage(targetid, COLOR_YELLOW, dstring);
						}
					}
				}
			}
	    }
	    else return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}


// LSFD COMMANDS
CMD:fireex(playerid, params[])
{
	if(PlayerData[playerid][Character_Faction] == 2)
	{
	    if(IsPlayerOnDuty[playerid] == 1)
		{
	    	GivePlayerWeapon(playerid, WEAPON_FIREEXTINGUISHER, 99999);
	    	
	    	new string[256];
      		format(string, sizeof(string), "> %s has just grabbed a fire extinguisher from the lockers", GetRPName(playerid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	    }
	    else return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

// LSPD COMMANDS

CMD:showbadge(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new targetid;

		if(sscanf(params, "i", targetid))
		{
			SendPlayerTipMessage(playerid, " /showbadge [targetid]");
   		}
		else
		{
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
				
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
		
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot show your badge to yourself!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			
		    new string[256], string1[256], string2[256];

	  		format(string, sizeof(string), "> %s has removed their ID from their pocket and handed it to %s", GetRPName(playerid), GetRPName(targetid));
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			
			format(string1, sizeof(string1), "*** %s Badge ***", PlayerData[playerid][Character_Name]);
			SendClientMessage(targetid, COLOR_YELLOW, string1);
	
			format(string2, sizeof(string2), "> %s Badge | Status: Active", PlayerData[playerid][Character_Name]);
			SendClientMessage(targetid, COLOR_WHITE, string2);
		}
	}
	return 1;
}

CMD:megaphone(playerid, params[]) return cmd_mp(playerid,params);
CMD:mp(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Faction] == 1 || PlayerData[playerid][Character_Faction] == 2 || PlayerData[playerid][Character_Faction] == 3)
        {
			if(!IsPlayerInAnyVehicle(playerid))  return SendPlayerErrorMessage(playerid, " You are not within a specific vehicle to use this command!");
            if(isnull(params)) return SendPlayerTipMessage(playerid, " /m(egaphone) [Text]");
			else if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
			else
			{
	   			SendNearbyMessage(playerid, 50.0, COLOR_YELLOW, "([Emergency Megaphone] %s)", params);
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:removeweapons(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Character_Faction] == 1 && IsPlayerOnDuty[playerid] == 1)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /removeweapons [targetid]");
	    }
	    else
	    {
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
		 	else
		 	{
				ResetPlayerWeapons(targetid);
		 	    
		 	    new string2[256];
				format(string2, sizeof(string2), "> %s has just removed all weapons from %s", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string2);
				
				new string[256];						
				format(string, sizeof(string), "- You have just removed all weapons from player %s", GetRPName(targetid));
				SendClientMessage(playerid, COLOR_YELLOW, string);
				
				new string1[256];						
				format(string1, sizeof(string1), "- Officer %s has just removed all weapons from you", GetRPName(playerid));
				SendClientMessage(playerid, COLOR_YELLOW, string1);
				
				printf("Staff Command: Removeweapons | Officer Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
		 	}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:search(playerid, params[])
{
	new targetid;
	
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 1)
			{
			    if(sscanf(params, "i", targetid))
	            {
			    	SendPlayerTipMessage(playerid, " /search [targetid]");
				}
				else
				{
     				if(targetid == playerid)
					{
					    return SendPlayerErrorMessage(playerid, " You cannot search yourself!");
					}
					if(!IsPlayerConnected(targetid))
					{
						new maskid = targetid;
						new count = 0;
						
						for(new i = 0; i < MAX_PLAYERS; i++)
				        {
				            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
				            {
				                targetid = i;
								count = 1;
				                break;
				            }
				        }
				
						if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot search yourself!");
						if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
					}
					else
					{
					    WhoHasBeenSearched[playerid] = targetid;
					    
		   				new Float:tx, Float:ty, Float:tz;
			  		    GetPlayerPos(targetid, tx, ty, tz);

			  		    if(IsPlayerInRangeOfPoint(playerid, 3.0, tx, ty, tz))
			  		    {
                   		    GameTextForPlayer(targetid, "Being Searched...", 5000, 5);

			    		    new tdstring1[500];
					    	format(tdstring1, sizeof(tdstring1), "You have just been searched by the LSPD!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);
							
							new string[256];
				            format(string, sizeof(string), "> %s has just searched %s", GetRPName(playerid), GetRPName(targetid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
							
							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);

					        new bodytext[2000];
		           			format(bodytext, sizeof(bodytext), "Ropes:\t%i\nFuel Cans:\t%i\nLockpicks:\t%i\nDrugs:\t%i\nCocaine\t%i\nHeroin\t%i\nWeed\t%i\nFood:\t%i\nDrinks:\t%i\nAlcohol:\t%i\nHacking Devices:\t%i", PlayerData[targetid][Character_Has_Rope], PlayerData[targetid][Character_Has_Fuelcan], PlayerData[targetid][Character_Has_Lockpick], PlayerData[targetid][Character_Has_Drugs], PlayerData[playerid][Character_Drug_Cocaine], PlayerData[playerid][Character_Drug_Heroin], PlayerData[playerid][Character_Drug_Weed], PlayerData[targetid][Character_Has_Food], PlayerData[targetid][Character_Has_Drinks], PlayerData[targetid][Character_Has_Alcohol], PlayerData[targetid][Character_Has_Device]);

							ShowPlayerDialog(playerid, DIALOG_LSPD_SEARCH, DIALOG_STYLE_TABLIST, "Searched Inventory..", bodytext, "Take Item", "Close");
			  		    }
			  		    else return SendPlayerErrorMessage(playerid, " You cannot search someone from this distance!");
					}
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not on Duty!");
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:cbu(playerid, params[]) return cmd_cancelbackup(playerid,params);
CMD:cancelbackup(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 1)
			{
				if(strcmp(BackupCaller, PlayerData[playerid][Character_Name]) != 0) return SendPlayerErrorMessage(playerid, " You cannot cancel a backup call because you haven't made one!");
				else
				{
				    for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(PlayerData[i][Character_Faction] == 1)
					    {
							
							if(HasPlayerResponded[i] == 1)
							{
								DisablePlayerCheckpoint(i);
								
								HasPlayerResponded[i] = 0;
								HasGPSBeenDisabled[i] = 0;
								KillTimer(Backup_Timer[i]);
							}
						}
					}
					
					LSPDBackupPosition[0] = 0;
				    LSPDBackupPosition[1] = 0;
				    LSPDBackupPosition[2] = 0;
	
				    BackupCaller = "";
				
					new dstring[256];
		   			format(dstring, sizeof(dstring), "([BACKUP ALERT - UPDATE] %s has cancelled their backup request)", GetName(playerid));
					SendFactionRadioMessage(1, COLOR_YELLOW, dstring);
				}				
			}
			else return SendPlayerErrorMessage(playerid, " You are not on Duty!");
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:bu(playerid, params[]) return cmd_backup(playerid,params);
CMD:backup(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 1)
			{
				new Float:px, Float:py, Float:pz;
				GetPlayerPos(playerid, px, py, pz);
				
			    LSPDBackupPosition[0] = px;
			    LSPDBackupPosition[1] = py;
			    LSPDBackupPosition[2] = pz;
			
				HasGPSBeenDisabled[playerid] = 1;
			    
			    new dstring[256];
	   			format(dstring, sizeof(dstring), "([BACKUP ALERT] %s has requested backup at their current location [type /respond])", GetName(playerid));
				SendFactionRadioMessage(1, COLOR_YELLOW, dstring);
				
				BackupCaller = GetName(playerid);
				
				Backup_Timer[playerid] = SetTimerEx("BackupCheck", 2000, true, "i", playerid);
			}
			else return SendPlayerErrorMessage(playerid, " You are not on Duty!");
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:respond(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 1)
			{
				if(HasGPSBeenDisabled[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently already in an action that requires a checkpoint to be cleared!");
				if(strcmp(BackupCaller, PlayerData[playerid][Character_Name]) == 0) return SendPlayerErrorMessage(playerid, " You cannot respond to your own call!");
				if(LSPDBackupPosition[0] == 0) return SendPlayerErrorMessage(playerid, " Noone has activated their backup becon yet!");
				
				HasPlayerResponded[playerid] = 1;
				HasGPSBeenDisabled[playerid] = 1;
				
				Backup_Timer[playerid] = SetTimerEx("BackupCheck", 2000, true, "i", playerid);
			}
			else return SendPlayerErrorMessage(playerid, " You are not on Duty!");
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:cancelrespond(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
		if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 1)
			{
				if(HasPlayerResponded[playerid] == 0) return SendPlayerErrorMessage(playerid, " You haven't responded to a backup call, so you cannot cancel it!");
				
				DisablePlayerCheckpoint(playerid);
								
				HasPlayerResponded[playerid] = 0;
				HasGPSBeenDisabled[playerid] = 0;
				KillTimer(Backup_Timer[playerid]);
			}
			else return SendPlayerErrorMessage(playerid, " You are not on Duty!");
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:mdc(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Faction] == 1)
        {
			if(IsLSPDVehicle(playerid))
	        {
		        if(PlayerData[playerid][Character_Faction] == 1)
		        {
		            new string[256];
		            format(string, sizeof(string), "> %s has just logged into the MDC", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
   							
		            ShowPlayerDialog(playerid, DIALOG_MDC_MENU, DIALOG_STYLE_LIST, "Los Santos Government - MDC", "Search Player Records\nSearch Vehicle Records\nPolice BOLOS", "Select", "Close");
		        }
	        }
			else return SendPlayerErrorMessage(playerid, " You are not in an LSPD vehicle!");
        }
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    }
    return 1;
}

CMD:ticket(playerid, params[])
{
	if(PlayerData[playerid][Character_Faction] ==1)
	{
	    new targetid;
		new amount;
	    new reason[50];
	    new equery[2000];
	    
		if(sscanf(params, "iis[50]", targetid, amount, reason))
		{
			SendPlayerTipMessage(playerid, " /ticket [targetid] [amount] [reason]");
		}
		else
		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot ticket yourself!");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
				
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
		
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot ticket yourself!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			
		    new Float:tx, Float:ty, Float:tz, Float:px, Float:py, Float:pz;
		    
		    GetPlayerPos(targetid, tx, ty, tz);
		    GetPlayerPos(playerid, px, py, pz);
		    
		    if(IsPlayerInRangeOfPoint(playerid, 10.0, tx, ty, tz))
		    {
				if(targetid == playerid)
				{
						new namestring[MAX_PLAYER_NAME];
					    format(namestring, sizeof(namestring), "%s", GetName(playerid));

						new string[256];
      					format(string, sizeof(string), "> %s writes out a ticket and hands it to %s", GetRPName(playerid), GetRPName(playerid));
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						
						format(string, sizeof(string), "- You have just been given a ticket of $%i for '%s' by Officer %s", amount, reason, GetName(playerid));
						SendClientMessage(playerid, COLOR_YELLOW, string);
						
                        mysql_format(connection, equery, sizeof(equery), "INSERT INTO `crime_information` (`crime_type`, `crime_character_name`, `crime_description`, `crime_amount`) VALUES (1, '%e', '%s', '%i')", PlayerData[playerid][Character_Name], reason, amount);
						mysql_tquery(connection, equery);
						
						PlayerData[playerid][Character_Last_Crime] = reason;
				
				}
			    else if(targetid != playerid)
			    {
                    new namestring[MAX_PLAYER_NAME];
			    	format(namestring, sizeof(namestring), "%s", GetName(playerid));

					new string[256];
   					format(string, sizeof(string), "> %s writes out a ticket and hands it to %s", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					format(string, sizeof(string), "- You have just been given a ticket of $%i for '%s' by Officer %s", amount, reason, GetName(playerid));
					SendClientMessage(targetid, COLOR_YELLOW, string);

                    mysql_format(connection, equery, sizeof(equery), "INSERT INTO `crime_information` (`crime_type`, `crime_character_name`, `crime_description`, `crime_amount`) VALUES (1, '%e', '%s', '%i')", PlayerData[targetid][Character_Name], reason, amount);
					mysql_tquery(connection, equery);
					
					PlayerData[targetid][Character_Last_Crime] = reason;
				}
				else return SendPlayerErrorMessage(playerid, " You are not near this person to ticket!");
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(PlayerData[playerid][Character_Faction] == 1)
	{
	    new targetid;
		new minutes;
	    new reason[50];
	    new equery[2000];

        if(IsPlayerInRangeOfPoint(playerid, 3.0, 254.4943,85.0860,1002.4453))
	    {
			if(sscanf(params, "iis[50]", targetid, minutes, reason))
			{
			    SendPlayerTipMessage(playerid, " /arrest [targetid] [minutes] [reason]");
			    SendPlayerTipMessage(playerid, " ((Do not arrest someone for more than 5 minutes for a basic crime))");
			}
			else
			{
			    if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot arrest yourself!");
				if(!IsPlayerConnected(targetid))
				{
					new maskid = targetid;
					new count = 0;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
			        {
			            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
			            {
			                targetid = i;
							count = 1;
			                break;
			            }
			        }
			
					if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot arrest yourself!");
					if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
				}
			    else
			    {
					if(IsPlayerInRangeOfPoint(targetid, 10.0, 254.4943,85.0860,1002.4453))
					{
					    new randIndex = random(sizeof(PoliceJailSpawns));
						SetPlayerPos(targetid, PoliceJailSpawns[randIndex][0], PoliceJailSpawns[randIndex][1], PoliceJailSpawns[randIndex][2]);
						SetPlayerFacingAngle(targetid, 119.4812);

						SetPlayerInterior(targetid, 6);
						SetPlayerVirtualWorld(targetid, 1);

						new namestring[MAX_PLAYER_NAME];
					    format(namestring, sizeof(namestring), "%s", GetName(targetid));

						new dstring[256];
						format(dstring, sizeof(dstring), "[SERVER]:%s has been imprisoned by the police for: %s", GetName(targetid), reason);
						SendClientMessageToAll(COLOR_RED, dstring);

						SendClientMessage(targetid, COLOR_RED, "[SERVER]: {FFFFFF}You can dispute this jail sentence action by taking a screenshot and reporting this on the forums!");
						SendClientMessage(targetid, COLOR_RED, "[SERVER]: {FFFFFF}[/time to check remain sentence]");

                        PlayerData[targetid][Character_Jail] = 1;
						PlayerData[targetid][Character_Jail_Time] = minutes;
						PlayerData[targetid][Character_Jail_Reason] = reason;
						
						PlayerData[targetid][Character_Last_Crime] = reason;
						
						mysql_format(connection, equery, sizeof(equery), "INSERT INTO `crime_information` (`crime_type`, `crime_character_name`, `crime_description`) VALUES (2, '%e', '%s')", PlayerData[targetid][Character_Name], reason);
						mysql_tquery(connection, equery);
					}
					else return SendPlayerErrorMessage(playerid, " You cannot arrest someone who isn't near the arrest point!");
				}
			}
		}
		else return SendPlayerErrorMessage(playerid, " You cannot arrest someone when you are not near an arrest point!");
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:bolo(playerid, params[])
{
	if(PlayerData[playerid][Character_Faction] == 1)
	{
	    new reason[50], type, dstring[256];
	    new equery[2000];

        if(sscanf(params, "is[50]", type, reason))
		{
		    SendPlayerTipMessage(playerid, " /bolo [type] [reason]");
			SendPlayerTipMessage(playerid, " Types: 1 = Lookout | 2 = Dangerous");
		}
		else
		{
			format(dstring, sizeof(dstring), "** BOLO ALERT: **{FFFFFF} There is a new bolo that has been created (/mdc to view)", GetName(playerid));
			SendFactionRadioMessage(1, COLOR_RED, dstring);
							
		    mysql_format(connection, equery, sizeof(equery), "INSERT INTO `crime_information` (`crime_type`, `crime_bolo_type`, `crime_bolo_desc`) VALUES (3, '%i', '%s')", type, reason);
			mysql_tquery(connection, equery);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:placeincar(playerid, params[]) return cmd_pic(playerid, params);
CMD:pic(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    new targetid;
	    
	    if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(sscanf(params, "i", targetid))
            {
		    	SendPlayerTipMessage(playerid, " /placeincar(pic) [targetid]");
			}
			else
			{
			    if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot place yourself in a vehicle!");
				if(!IsPlayerConnected(targetid))
				{
					new maskid = targetid;
					new count = 0;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
			        {
			            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
			            {
			                targetid = i;
							count = 1;
			                break;
			            }
			        }
			
					if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot place yourself in a vehicle!");
					if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
				}
				else
		  		{
		  		    new Float:tx, Float:ty, Float:tz;
		  		    GetPlayerPos(targetid, tx, ty, tz);

		  		    if(IsPlayerCuffed[targetid] == 0) return SendPlayerErrorMessage(playerid, " You cannot place someone into a vehicle that isn't restrained!");

		  		    else if(IsPlayerInRangeOfPoint(playerid, 5.0, tx, ty, tz) && IsPlayerCuffed[targetid] == 1)
		  		    {
		  		        new Float:vPos[3];
						new vid;
						
						vid = GetClosestVehicle(playerid);
						GetVehiclePos(vid, vPos[0],vPos[1],vPos[2]);
						
						if(IsPlayerInRangeOfPoint(playerid, 5.0, vPos[0], vPos[1], vPos[2]))
						{
			  		        new tdstring1[500];
							format(tdstring1, sizeof(tdstring1), "You have been placed into a vehicle, roleplay must continue!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);

							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);
							
							PutPlayerInVehicle(targetid, vid, 3);

							new string[256];
	      					format(string, sizeof(string), "> %s has been placed into the vehicle by %s", GetRPName(targetid), GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}
						else return SendPlayerErrorMessage(playerid, " There are no vehicles close to you!");
		  		    }
		  		    else return SendPlayerErrorMessage(playerid, " The person you are trying to place into a vehicle isn't near you!");
		  		}
			}
        }
        else if(PlayerData[playerid][Character_Faction] == 3)
        {
            if(sscanf(params, "i", targetid))
            {
		    	SendPlayerTipMessage(playerid, " /placeincar(pic) [targetid]");
			}
			else
			{
			    if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot place yourself in a vehicle!");
				if(!IsPlayerConnected(targetid))
				{
					new maskid = targetid;
					new count = 0;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
			        {
			            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
			            {
			                targetid = i;
							count = 1;
			                break;
			            }
			        }
			
					if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot place yourself in a vehicle!");
					if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
				}
				else
		  		{
		  		    new Float:tx, Float:ty, Float:tz;
		  		    GetPlayerPos(targetid, tx, ty, tz);

		  		    if(IsPlayerInRangeOfPoint(playerid, 5.0, tx, ty, tz))
		  		    {
		  		        new Float:vPos[3];
						new vid;

						vid = GetClosestVehicle(playerid);
						GetVehiclePos(vid, vPos[0],vPos[1],vPos[2]);

						if(IsPlayerInRangeOfPoint(playerid, 5.0, vPos[0], vPos[1], vPos[2]))
						{
			  		        new tdstring1[500];
							format(tdstring1, sizeof(tdstring1), "You have been placed into a vehicle, roleplay must continue!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);

							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);

							PutPlayerInVehicle(targetid, vid, 3);

							new string[256];
	      					format(string, sizeof(string), "> %s has been placed into the vehicle by %s", GetRPName(targetid), GetRPName(playerid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
						}
						else return SendPlayerErrorMessage(playerid, " There are no vehicles close to you!");
		  		    }
		  		    else return SendPlayerErrorMessage(playerid, " The person you are trying to place into a vehicle isn't near you!");
		  		}
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		new targetid;

        if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(sscanf(params, "i", targetid))
            {
		    	SendPlayerTipMessage(playerid, " /cuff [targetid]");
			}
			else
			{
			    if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot cuff yourself!");
				if(!IsPlayerConnected(targetid))
				{
					new maskid = targetid;
					new count = 0;
					
					for(new i = 0; i < MAX_PLAYERS; i++)
			        {
			            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
			            {
			                targetid = i;
							count = 1;
			                break;
			            }
			        }
			
					if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot cuff yourself!");
					if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
				}
				else
		  		{
		  		    new Float:tx, Float:ty, Float:tz;
		  		    GetPlayerPos(targetid, tx, ty, tz);

		  		    if(IsPlayerInRangeOfPoint(playerid, 5.0, tx, ty, tz))
		  		    {
		  		        if (GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_CUFFED)
		  		        {
		  		            IsPlayerCuffed[targetid] = 0;

			    		    GameTextForPlayer(targetid, "Uncuffed", 2000, 6);

			    		    SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
							RemovePlayerAttachedObject(targetid, 0);

			    		    new tdstring1[500];
					    	format(tdstring1, sizeof(tdstring1), "You have had your cuffs taken off your body. You can now walk around freely!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring1);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);
							
							new string[256];
				            format(string, sizeof(string), "> %s has removed the cuffs from %s", GetRPName(playerid), GetRPName(targetid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);
		  		        }
		  		        else
		  		        {
			  		        IsPlayerCuffed[targetid] = 1;

			    		    GameTextForPlayer(targetid, "Cuffed", 2000, 6);

			    		    SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
							SetPlayerAttachedObject(targetid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);

			    		    new tdstring2[500];
					    	format(tdstring2, sizeof(tdstring2), "You have been placed in cuffs by the LSPD, please wait for further roleplay instructions!");
							PlayerTextDrawSetString(targetid, PlayerText:Notification_Textdraw, tdstring2);
							PlayerTextDrawShow(targetid, PlayerText:Notification_Textdraw);
							
							new string[256];
				            format(string, sizeof(string), "> %s has placed the cuffs on %s", GetRPName(playerid), GetRPName(targetid));
							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							Notification_Timer[targetid] = SetTimerEx("OnTimerCancels", 5000, false, "i", targetid);
						}
		  		    }
		  		    else return SendPlayerErrorMessage(playerid, " You cannot cuff someone who isn't within the reachable vacinity of you!");
		  		}
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:taser(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {		
        if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You cannot equip a taser while off duty!");
			else
			{
				if(HasPlayerDrawnTaser[playerid] == 0)
				{
					GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
					
					new string[256];
	      			format(string, sizeof(string), "> %s unclips their holster supporting the taser and removes it from their holster", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
					HasPlayerDrawnTaser[playerid] = 1;
					
					GivePlayerWeapon(playerid, WEAPON_SILENCED, 2);
				}
				else
				{					
					new string[256];
	      			format(string, sizeof(string), "> %s removes the exposed charge and places their taser into their holster", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
					
					HasPlayerDrawnTaser[playerid] = 0;
					
					RemovePlayerWeapon(playerid, WEAPON_SILENCED);
					
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
				}
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:acceptjob(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(HasGPSBeenDisabled[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently already in an action that requires a checkpoint to be cleared!");
    else
    {
		if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 1)
            {
				new jobtype;
				
				if(sscanf(params, "i", jobtype))
	            {
				   	SendPlayerTipMessage(playerid, " /acceptjob [1 - Job | 2 - House Alarm]");
				}
				else
				{
			    	if(jobtype == 1)
					{
			            if(LSPDJobHouseInspection == 1 && LSPDJobHouseInspectionAccepted == 1)
			            {
			                SendPlayerErrorMessage(playerid, " Another officer has already accepted this job!");
			            }
			            else if(LSPDJobHouseInspection == 1 && LSPDJobHouseInspectionAccepted == 0)
			            {
							new randomNumber = GetValidHouseJobNumber();
		
			                SetPlayerCheckpoint(playerid, HouseData[randomNumber][House_Outside_X], HouseData[randomNumber][House_Outside_Y], HouseData[randomNumber][House_Outside_Z], 20.0);
		
			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
							format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s is responding to the house inspection job", GetName(playerid));
							SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
		
							LSPDJobHouseInspectionAccepted = 1;
							LSPDJobHouseInpPlayer[playerid] = 1;
							
							HasGPSBeenDisabled[playerid] = 1;
		
							print("LSPD Job Accepted");
			            }
			            else return SendPlayerErrorMessage(playerid, " You cannot accept a job at this time!");
					}
					else if(jobtype == 2)
					{
			            if(HOUSE_ALARM_ID == 0)
			            {
			                SendPlayerErrorMessage(playerid, " There is no active alarm jobs at this time!");
			            }
			            else
			            {		
			                SetPlayerCheckpoint(playerid, HouseData[HOUSE_ALARM_ID][House_Outside_X], HouseData[HOUSE_ALARM_ID][House_Outside_Y], HouseData[HOUSE_ALARM_ID][House_Outside_Z], 20.0);
		
			                new dstring[256];
							format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
							SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
							format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s is responding to the house alarm job [Address: %s]", GetName(playerid), HouseData[HOUSE_ALARM_ID][House_Address]);
							SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
		
							HOUSE_ALARM_ID = 0;
							
							HasGPSBeenDisabled[playerid] = 1;
		
							print("LSPD Alarm Accepted");
			            }
					}
				}
			}
			else return SendPlayerErrorMessage(playerid, " You cannot use this command off duty!");
		}
		else if(PlayerData[playerid][Character_Faction] == 2)
        {
            if(IsPlayerOnDuty[playerid] == 1)
            {
	            if(LSFDJobHouseFire == 1 && LSFDJobHouseFireAccepted == 1)
	            {
	                SendPlayerErrorMessage(playerid, " Another officer has already accepted this job!");
	            }
	            else if(LSFDJobHouseFire == 1 && LSFDJobHouseFireAccepted == 0)
	            {
	                SetPlayerCheckpoint(playerid, HouseData[LSFDJobHouseFireID][House_Outside_X], HouseData[LSFDJobHouseFireID][House_Outside_Y], HouseData[LSFDJobHouseFireID][House_Outside_Z], 20.0);

	                new dstring[256];
					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);

					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s is responding to the house fire job", GetName(playerid));
					SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);

					LSFDJobHouseFireAccepted = 1;
					LSFDJobHouseFirePlayer[playerid] = 1;
					
					HasGPSBeenDisabled[playerid] = 1;

					print("LSFD Job Accepted");
	            }
	            else return SendPlayerErrorMessage(playerid, " You cannot accept a job at this time!");
            }
			else return SendPlayerErrorMessage(playerid, " You cannot use this command off duty!");
		}
		else if(PlayerData[playerid][Character_Faction] == 8)
        {
            if(IsPlayerOnDuty[playerid] == 1)
            {
	            if(DudefixJob == 1 && DudefixJobAccepted == 1)
	            {
	                SendPlayerErrorMessage(playerid, " Another person has already responded to this job!");
	            }
	            else if(DudefixJob == 1 && DudefixJobAccepted == 0)
	            {
	                new Float:x, Float:y, Float:z;
                    if(DudefixJobID == 1)
	                {
	                    x = 1349.8253;
	                    y = -1399.9447;
	                    z = 13.3056;
	                }
	                else if(DudefixJobID == 2)
	                {
	                    x = 1529.4000;
	                    y = -1672.0344;
	                    z = 13.3828;
	                }
	                else if(DudefixJobID == 3)
	                {
	                    x = 2090.9763;
	                    y = -1752.6794;
	                    z = 13.4049;
	                }

	                SetPlayerCheckpoint(playerid, x, y, z, 20.0);

	                new dstring[256];
					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);

					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Engineer %s is responding to the burst pipe job", GetName(playerid));
					SendFactionRadioMessage(8, COLOR_LIGHTSEAGREEN, dstring);

					DudefixJobAccepted = 1;
					DudefixJobPlayer[playerid] = 1;

					print("Dudefix Job Accepted");
	            }
	            else return SendPlayerErrorMessage(playerid, " You cannot accept a job at this time!");
            }
			else return SendPlayerErrorMessage(playerid, " You cannot use this command off duty!");
		}
		else if(PlayerData[playerid][Character_Faction] == 9)
        {
            if(IsPlayerOnDuty[playerid] == 1)
            {
	            if(MechanicJob == 1 && MechanicJobAccepted == 1)
	            {
	                SendPlayerErrorMessage(playerid, " Another unit has already accepted this job!");
	            }
	            else if(MechanicJob == 1 && MechanicJobAccepted == 0)
	            {
	                new Float:vehx, Float:vehy, Float:vehz;
     				GetVehiclePos(MechanicJobID, vehx, vehy, vehz);
     	
	                SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 5.0);

	                new dstring[256];
					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);

					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Mechanic %s is responding to the vehicle job", GetName(playerid));
					SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

					MechanicJobAccepted = 1;
					MechanicJobPlayer[playerid] = 1;

					print("Mechanic Job Accepted");
	            }
	            else return SendPlayerErrorMessage(playerid, " You cannot accept a job at this time!");
            }
			else return SendPlayerErrorMessage(playerid, " You cannot use this command off duty!");
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
   	}
	return 1;
}

CMD:canceljob(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PizzaJobDeliveryPlayer[playerid] == 1 || GarbageJobPlayer[playerid] == 1 || ElectricianJobPlayer[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently running an active job route, please finish first or /stopjob!");
    else
    {
		if(PlayerData[playerid][Character_Faction] == 1)
        {
            if(IsPlayerOnDuty[playerid] == 1)
            {
	            if(LSPDJobHouseInspection == 1 && LSPDJobHouseInspectionAccepted == 1)
	            {
	                new dstring[256];
					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s has just cancelled the inspection job they accepted", GetName(playerid));
					SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);

					DisablePlayerCheckpoint(playerid);

					LSPDJobHouseInspection = 0;
					LSPDJobHouseInspectionAccepted = 0;
					LSPDJobHouseInpPlayer[playerid] = 0;
					
					HasGPSBeenDisabled[playerid] = 0;

					print("LSPD Job Cancelled");
	            }
	            else return SendPlayerErrorMessage(playerid, " There is no active jobs right now!");
            }
			else return SendPlayerErrorMessage(playerid, " You cannot use this command off duty!");
		}
		if(PlayerData[playerid][Character_Faction] == 2)
        {
            if(IsPlayerOnDuty[playerid] == 1)
            {
	            if(LSFDJobHouseFire == 1 && LSFDJobHouseFireAccepted == 1)
	            {
	                new dstring[256];
					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s has just cancelled the fire job they accepted", GetName(playerid));
					SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);

					DisablePlayerCheckpoint(playerid);

					LSFDJobHouseFire = 0;
					LSFDJobHouseFireAccepted = 0;
					LSFDJobHouseFirePlayer[playerid] = 0;
					
					HasGPSBeenDisabled[playerid] = 0;

					print("LSPD Job Cancelled");
	            }
	            else return SendPlayerErrorMessage(playerid, " There is no active jobs right now!");
            }
			else return SendPlayerErrorMessage(playerid, " You cannot use this command off duty!");
		}
		if(PlayerData[playerid][Character_Faction] == 9)
        {
            if(IsPlayerOnDuty[playerid] == 1)
            {
	            if(MechanicJob == 1 && MechanicJobAccepted == 1 && MechanicJobPlayer[playerid] == 1)
	            {
	                new dstring[256];
					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Mechanic %s has just cancelled the vehicle job they accepted", GetName(playerid));
					SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

					DisablePlayerCheckpoint(playerid);

					MechanicJob = 0;
					MechanicJobAccepted = 0;
					MechanicJobPlayer[playerid] = 0;
					
					ClearAnimations(playerid);
            		
            		if(Repair_Timer[playerid] != 0)
					{
						KillTimer(Repair_Timer[playerid]);
            			Repair_Timer[playerid] = 0;
					}

					print("Mechanic Job Cancelled");
	            }
	            else return SendPlayerErrorMessage(playerid, " There is no active jobs right now!");
            }
			else return SendPlayerErrorMessage(playerid, " You cannot use this command off duty!");
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
   	}
	return 1;
}

// MULTIPLE FACTION  / JOB COMMANDS
CMD:acceptcall(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(HasGPSBeenDisabled[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently already in an action that requires a checkpoint to be cleared!");
	else
	{
	    if(PlayerData[playerid][Character_Faction] == 1 && IsPlayerOnDuty[playerid] == 1)
	    {
	        new targetid;
			if(sscanf(params, "i", targetid))
		 	{
				SendPlayerTipMessage(playerid, " /acceptcall [job id]");
		  	}
		  	else
		  	{
                if(EmergencyCallTypeRequired[targetid] == 1)
                {
                    new dstring[256];
					new Float:x, Float:y, Float:z;
					GetPlayerPos(targetid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);
					
					format(dstring, sizeof(dstring), "[PHONE TEXT] An officer is enroute to your location!");
					SendClientMessage(targetid, COLOR_AQUABLUE, dstring);
					
					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					
					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Officer %s is responding to call id: %d", GetName(playerid), targetid);
					SendFactionRadioMessage(1, COLOR_LIGHTSEAGREEN, dstring);
					
					EmergencyCallTypeRequired[targetid] = 0;
					EmergencyCallTypeReason[targetid] = 0;
                }
                else return SendPlayerErrorMessage(playerid, " This job id doesn't exist, please try again!");
			}
		}
		else if(PlayerData[playerid][Character_Faction] == 2 && IsPlayerOnDuty[playerid] == 1)
	    {
	        new targetid;
			if(sscanf(params, "i", targetid))
		 	{
				SendPlayerTipMessage(playerid, " /acceptcall [job id]");
		  	}
		  	else
		  	{
                if(EmergencyCallTypeRequired[targetid] == 2)
                {
                    new dstring[256];
					new Float:x, Float:y, Float:z;
					GetPlayerPos(targetid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);

					format(dstring, sizeof(dstring), "[PHONE TEXT] A fire unit is enroute to your location!");
					SendClientMessage(targetid, COLOR_AQUABLUE, dstring);

					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);


					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Fireman %s is responding to call id: %d", GetName(playerid), targetid);
					SendFactionRadioMessage(2, COLOR_LIGHTSEAGREEN, dstring);

					EmergencyCallTypeRequired[targetid] = 0;
					EmergencyCallTypeReason[targetid] = 0;
                }
                else return SendPlayerErrorMessage(playerid, " This job id doesn't exist, please try again!");
			}
		}
		else if(PlayerData[playerid][Character_Faction] == 3 && IsPlayerOnDuty[playerid] == 1)
	    {
	        new targetid;
			if(sscanf(params, "i", targetid))
		 	{
				SendPlayerTipMessage(playerid, " /acceptcall [job id]");
		  	}
		  	else
		  	{
                if(EmergencyCallTypeRequired[targetid] == 3)
                {
                    new dstring[256];
					new Float:x, Float:y, Float:z;
					GetPlayerPos(targetid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);

					format(dstring, sizeof(dstring), "[PHONE TEXT] A paramedic is enroute to your location!");
					SendClientMessage(targetid, COLOR_AQUABLUE, dstring);

					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);


					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Paramedic %s is responding to call id: %d", GetName(playerid), targetid);
					SendFactionRadioMessage(3, COLOR_LIGHTSEAGREEN, dstring);

					EmergencyCallTypeRequired[targetid] = 0;
					EmergencyCallTypeReason[targetid] = 0;
                }
                else return SendPlayerErrorMessage(playerid, " This job id doesn't exist, please try again!");
			}
		}
		else if(PlayerData[playerid][Character_Faction] == 9 && IsPlayerOnDuty[playerid] == 1)
	    {
	        new targetid;
			if(sscanf(params, "i", targetid))
		 	{
				SendPlayerTipMessage(playerid, " /acceptcall [job id]");
		  	}
		  	else
		  	{
                if(RequestCallType[targetid] == 1)
                {
                    new dstring[256];
					new Float:x, Float:y, Float:z;
					GetPlayerPos(targetid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);

					format(dstring, sizeof(dstring), "[PHONE TEXT] A mechanic is heading to your current location!");
					SendClientMessage(targetid, COLOR_AQUABLUE, dstring);

					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);


					format(dstring, sizeof(dstring), "** Radio Dispatch: **{FFFFFF} Mechanic %s is responding to call id: %d", GetName(playerid), targetid);
					SendFactionRadioMessage(9, COLOR_LIGHTSEAGREEN, dstring);

					RequestCallType[targetid] = 0;
					RequestCallReason[targetid] = 0;
                }
                else return SendPlayerErrorMessage(playerid, " This job id doesn't exist, please try again!");
			}
		}
		else if(PlayerData[playerid][Character_Faction] == 5 && IsPlayerOnDuty[playerid] == 1)
	    {
	        new targetid;
			if(sscanf(params, "i", targetid))
		 	{
				SendPlayerTipMessage(playerid, " /acceptcall [job id]");
		  	}
		  	else
		  	{
                if(RequestCallType[targetid] == 2)
                {
                    new dstring[256];
					new Float:x, Float:y, Float:z;
					GetPlayerPos(targetid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);

					format(dstring, sizeof(dstring), "[PHONE TEXT] A tow truck is heading to your current location!");
					SendClientMessage(targetid, COLOR_AQUABLUE, dstring);

					format(dstring, sizeof(dstring), "- You have set your GPS to mark the location of the job!");
					SendClientMessage(playerid, COLOR_YELLOW, dstring);


					format(dstring, sizeof(dstring), "([Faction Radio] Dispatch: Tow Operator %s is responding to call id: %d)", GetName(playerid), targetid);
					SendFactionRadioMessage(9, COLOR_WHITE, dstring);

					RequestCallType[targetid] = 0;
					RequestCallReason[targetid] = 0;
                }
                else return SendPlayerErrorMessage(playerid, " This job id doesn't exist, please try again!");
			}
		}
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;
    
	if(sscanf(params, "i", targetid))
 	{
		SendPlayerTipMessage(playerid, " /drag [targetid]");
  	}
  	else
  	{
		if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot drag yourself!");
		if(!IsPlayerConnected(targetid))
		{
			new maskid = targetid;
			new count = 0;
					
			for(new i = 0; i < MAX_PLAYERS; i++)
		    {
			    if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
	            {
	                targetid = i;
					count = 1;
	                break;
	            }
	        }
			
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot drag yourself!");
			if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
		}
  	    if(IsPlayerCuffed[targetid] == 1 && PlayerData[playerid][Character_Faction] == 1)
  	    {
  	        if(IsPlayerDragged[targetid] == 1)
			{
  	            
            	IsPlayerDragged[targetid] = -1;
            	TogglePlayerControllable(targetid,true);
            	
            	WhoIsDragging[targetid] = -1;
            	
            	KillTimer(Drag_Timer[targetid]);

				new string[256];
      			format(string, sizeof(string), "> %s has stopped moving %s around", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			}
			else
			{
			    IsPlayerDragged[targetid] = 1;
			    TogglePlayerControllable(targetid,false);
			    
			    WhoIsDragging[targetid] = playerid;
			
				new string[256];
      			format(string, sizeof(string), "> %s has started dragging %s around", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			    
			    Drag_Timer[targetid] = SetTimerEx("DragTimer", 1000, true, "i", targetid);
			}
		}
		else if(PlayerData[playerid][Character_Faction] == 3)
  	    {
  	        if(IsPlayerDragged[targetid] == 1)
			{

            	IsPlayerDragged[targetid] = -1;
            	TogglePlayerControllable(targetid,true);

            	WhoIsDragging[targetid] = -1;

            	KillTimer(Drag_Timer[targetid]);

				new string[256];
      			format(string, sizeof(string), "> %s has stopped moving %s around", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			}
			else
			{
			    IsPlayerDragged[targetid] = 1;
			    TogglePlayerControllable(targetid,false);

			    WhoIsDragging[targetid] = playerid;
			
				new string[256];
      			format(string, sizeof(string), "> %s has started dragging %s around", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

			    Drag_Timer[targetid] = SetTimerEx("DragTimer", 1000, true, "i", targetid);
			}
		}
  	    else if(IsPlayerTied[targetid] == 1)
		{
		    if(IsPlayerDragged[targetid] == 1)
  	        {
                IsPlayerDragged[targetid] = -1;
                TogglePlayerControllable(targetid,true);
                
                WhoIsDragging[targetid] = -1;
                
                KillTimer(Drag_Timer[targetid]);

				new string[256];
      			format(string, sizeof(string), "> %s has stopped moving %s around", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			}
			else
			{
			    IsPlayerDragged[targetid] = 1;
			    TogglePlayerControllable(targetid,false);
			    
			    WhoIsDragging[targetid] = playerid;
			
				new string[256];
      			format(string, sizeof(string), "> %s has started dragging %s around", GetRPName(playerid), GetRPName(targetid));
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
			    
			    Drag_Timer[targetid] = SetTimerEx("DragTimer", 1000, true, "i", targetid);
			}
		}
		else return SendPlayerErrorMessage(playerid, " You cannot drag someone who isn't cuffed or tied up!");
  	}
  	return 1;
}

CMD:startest(playerid, params[])
{
	if(PlayerData[playerid][Character_Faction] == 16)
	{
	    new targetid;
		    
		if(sscanf(params, "i", targetid))
		{
			SendPlayerTipMessage(playerid, " /startest [targetid]");
		}
		else
		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot start a test on yourself!");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
				
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
		
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot start a test on yourself!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			
		    new Float:tx, Float:ty, Float:tz, Float:px, Float:py, Float:pz;
		    
		    GetPlayerPos(targetid, tx, ty, tz);
		    GetPlayerPos(playerid, px, py, pz);
		    
		    if(IsPlayerInRangeOfPoint(playerid, 10.0, tx, ty, tz))
		    {
				if(targetid != playerid)
			    {
                    new namestring[MAX_PLAYER_NAME];
			    	format(namestring, sizeof(namestring), "%s", GetName(playerid));

					new string[256];
   					format(string, sizeof(string), "> %s provide %s with a device that records all movements", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					format(string, sizeof(string), "- You have just been given the ability to use license school vehicles by %s", GetName(playerid));
					SendClientMessage(targetid, COLOR_YELLOW, string);

                    IsTakingTest[playerid] = 1;
				}
				else return SendPlayerErrorMessage(playerid, " You are not near this person!");
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:stoptest(playerid, params[])
{
	if(PlayerData[playerid][Character_Faction] == 16)
	{
	    new targetid;
		    
		if(sscanf(params, "i", targetid))
		{
			SendPlayerTipMessage(playerid, " /stoptest [targetid]");
		}
		else
		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot stop a test on yourself!");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
				
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
		
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot stop a test on yourself!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			
		    new Float:tx, Float:ty, Float:tz, Float:px, Float:py, Float:pz;
		    
		    GetPlayerPos(targetid, tx, ty, tz);
		    GetPlayerPos(playerid, px, py, pz);
		    
		    if(IsPlayerInRangeOfPoint(playerid, 10.0, tx, ty, tz))
		    {
				if(targetid != playerid)
			    {
                    new namestring[MAX_PLAYER_NAME];
			    	format(namestring, sizeof(namestring), "%s", GetName(playerid));

					new string[256];
   					format(string, sizeof(string), "> %s removes the device from %s body and places it into their pocket", GetRPName(playerid), GetRPName(targetid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

					format(string, sizeof(string), "- You have just had the abilty revoked to drive a license school vehicle by %s", GetName(playerid));
					SendClientMessage(targetid, COLOR_YELLOW, string);

                    IsTakingTest[playerid] = 0;
				}
				else return SendPlayerErrorMessage(playerid, " You are not near this person!");
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:issuelicense(playerid, params[])
{
    if(PlayerData[playerid][Character_Faction] == 1 && PlayerData[playerid][Character_Faction_Rank] == 6 || PlayerData[playerid][Character_Faction] == 16)
	{
	    new targetid, license, status;

	    if(sscanf(params, "iii", targetid, license, status))
	    {
	        SendPlayerTipMessage(playerid, " /issuelicense [targetid] [license type]");
		    SendPlayerTipMessage(playerid, " Licenses: [1 - Motorcycle | 2 - Car | 3 - Truck | 4 - Boat | 5 - Flying | 6 - Firearms]");
		    SendPlayerTipMessage(playerid, " Status: [1 - Issue | 2 - Revoke]");
	    }
	    else
	    {
	        if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot give yourself a license!");
			if(!IsPlayerConnected(targetid))
			{
				new maskid = targetid;
				new count = 0;
					
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
		
				if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot give yourself a license!");
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}
			else
			{
				new Float:tx, Float:ty, Float:tz;
		    	GetPlayerPos(targetid, tx, ty, tz);
		    	
		    	new string[256];

	  		    if(IsPlayerInRangeOfPoint(playerid, 5.0, tx, ty, tz))
	  		    {
					if(license == 1)
					{
					    PlayerData[targetid][Character_License_Motorcycle] = status;
					    
					    new updatequery[2000];
    					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_motorcycle` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Motorcycle], GetName(targetid));
				    	mysql_tquery(connection, updatequery);
				    		
					    if(status == 1)
					    {
                            format(string, sizeof(string), "> %s has just issued %s a Motorcycle License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have issued a Motorcycle License to %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					    else
					    {
                            format(string, sizeof(string), "> %s has just revoked %s's Motorcycle License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
   							

							format(string, sizeof(string), "- You have revoked a Motorcycle License from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					}
					else if(license == 2)
					{
					    PlayerData[targetid][Character_License_Car] = status;
					    
					    new updatequery[2000];
    					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_car` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Car], GetName(targetid));
				    	mysql_tquery(connection, updatequery);
				    	
					    if(status == 1)
					    {
                            format(string, sizeof(string), "> %s has just issued %s a Car License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have issued a Car License to %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					    else
					    {
                            format(string, sizeof(string), "> %s has just revoked %s's Car License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have revoked a Car License from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					}
					else if(license == 3)
					{
					    PlayerData[targetid][Character_License_Truck] = status;
					    
					    new updatequery[2000];
    					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_truck` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Truck], GetName(targetid));
				    	mysql_tquery(connection, updatequery);
				    	
					    if(status == 1)
					    {
                            format(string, sizeof(string), "> %s has just issued %s a Truck License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have issued a Truck License to %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					    else
					    {
                            format(string, sizeof(string), "> %s has just revoked %s's Truck License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have revoked a Truck License from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					}
					else if(license == 4)
					{
					    PlayerData[targetid][Character_License_Boat] = status;
					    
					    new updatequery[2000];
    					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_boat` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Boat], GetName(targetid));
				    	mysql_tquery(connection, updatequery);
				    	
					    if(status == 1)
					    {
                            format(string, sizeof(string), "> %s has just issued %s a Boat License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have issued a Boat License to %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					    else
					    {
                            format(string, sizeof(string), "> %s has just revoked %s's Boat License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have revoked a Boat License from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					}
					else if(license == 5)
					{
					    PlayerData[targetid][Character_License_Flying] = status;
					    
					    new updatequery[2000];
    					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_flying` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Flying], GetName(targetid));
				    	mysql_tquery(connection, updatequery);
				    	
					    if(status == 1)
					    {
                            format(string, sizeof(string), "> %s has just issued %s a Boat License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have issued a Boat License to %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					    else
					    {
                            format(string, sizeof(string), "> %s has just revoked %s's Boat License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have revoked a Boat License from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					}
					else if(license == 6)
					{
					    PlayerData[targetid][Character_License_Firearms] = status;
					    
					    new updatequery[2000];
    					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_firearms` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Firearms], GetName(targetid));
				    	mysql_tquery(connection, updatequery);
				    	
					    if(status == 1)
					    {
                            format(string, sizeof(string), "> %s has just issued %s a Firearms License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have issued a Firearms License to %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					    else
					    {
                            format(string, sizeof(string), "> %s has just revoked %s's Firearms License", GetRPName(playerid), GetRPName(targetid));
   							SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

							format(string, sizeof(string), "- You have revoked a Firearms License from %s!", GetName(targetid));
							SendClientMessage(playerid, COLOR_YELLOW, string);
					    }
					}
				}
				else return SendPlayerErrorMessage(playerid, " You cannot issue a license to someone, while they are far away!");
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:fradio(playerid, params[]) return cmd_fr(playerid,params);
CMD:fr(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Faction] > 0)
        {
            if(isnull(params)) return SendPlayerTipMessage(playerid, " /fr(adio) [Text]");
			else if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
			else
			{
	            new factionradioid = PlayerData[playerid][Character_Faction];
	            new dstring[256];
	            
	   			format(dstring, sizeof(dstring), "** Faction Radio ** %s: %s", GetName(playerid), params);
				SendFactionRadioMessage(factionradioid, COLOR_WHITE, dstring);
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:gradio(playerid, params[]) return cmd_gr(playerid,params);
CMD:gr(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Faction] == 1 || PlayerData[playerid][Character_Faction] == 2 || PlayerData[playerid][Character_Faction] == 3 || PlayerData[playerid][Character_Faction] == 5)
        {
            if(isnull(params)) return SendPlayerTipMessage(playerid, " /gr(adio) [Text]");
			else if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
			else
			{
	            new dstring[256];
	            
	   			format(dstring, sizeof(dstring), "** Govt Radio ** %s: %s", GetName(playerid), params);
				SendGovRadioMessage(COLOR_WHITE, dstring);
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:setfreq(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Radio] > 0)
        {
			new channel;
			
            if(sscanf(params, "i", channel) || channel < 1000 || channel > 9999)
	        {
	            SendPlayerServerMessage(playerid, "/setfreq [1000 - 9999]");
	        }
	        else
	        {
				PlayerSetFreq[playerid] = channel;
				
				new dstring[256];
		        format(dstring, sizeof(dstring), "- You have just set your radio frequency to (%d)", channel);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
        }
        else return SendPlayerErrorMessage(playerid, " You do not have a radio to talk to anyone with!");
	}
	return 1;
}

CMD:radio(playerid, params[]) return cmd_r(playerid,params);
CMD:r(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Radio] > 0)
        {
            if(isnull(params)) return SendPlayerTipMessage(playerid, " /r(adio) [Text]");
			else if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
			
            new charfreq = PlayerSetFreq[playerid];
            new dstring[256];

   			format(dstring, sizeof(dstring), "** Radio (%d Freq) ** %s: %s", charfreq, GetName(playerid), params);
			SendGroupRadioMessage(charfreq, COLOR_WHITE, dstring);
        }
        else return SendPlayerErrorMessage(playerid, " You do not have a radio to talk to anyone with!");
	}
	return 1;
}

CMD:locker(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Character_Faction] == 1)
        {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 254.4426,76.9794,1003.6406))
			{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSPD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Police Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit\n3. Change Weapon Set", "Select", "Close");			
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near your locker point!");
		}
		else if(PlayerData[playerid][Character_Faction] == 2)
        {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1780.0322,-1693.6436,16.7503))
       		{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSFD_LOCKER, DIALOG_STYLE_LIST, "Los Santos Fire Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near your locker point!");
		}
		else if(PlayerData[playerid][Character_Faction] == 3)
        {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, -196.6845,-1751.1202,675.7687))
       		{
				if(IsPlayerOnDuty[playerid] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: On Duty]\n2. Change Outfit", "Select", "Close");			
				}
				else if(IsPlayerOnDuty[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LSMC_LOCKER, DIALOG_STYLE_LIST, "Los Santos Medical Department - Locker","1. Duty Status - [Currently: Off Duty]\n2. Change Outfit", "Select", "Close");			
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near your locker point!");
		}
		else return SendPlayerErrorMessage(playerid, " You are not in a faction that requires a locker point!");
	}
	return 1;
}

CMD:duty(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
		if(PlayerData[playerid][Character_Faction] == 9)
        {
   			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2051.0803,-1842.6533,13.5633))
		    {
		    	if(IsPlayerOnDuty[playerid] == 1)
	            {
	                SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);

				    ResetPlayerWeapons(playerid);

				    IsPlayerOnDuty[playerid] = 0;

                    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
				    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);

		        	new dstring[256];
		        	format(dstring, sizeof(dstring), "[DUTY ALERT] %s has just gone off duty!", GetName(playerid));
					SendFactionOOCMessage(9, COLOR_YELLOW, dstring);

					new string[256];
   					format(string, sizeof(string), "> %s has just changed into their civilian clothing and gone off duty", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				}
				else
				{
				    if(IsEqual(PlayerData[playerid][Character_Sex], "Male", false))
	                {
	                    SetPlayerSkin(playerid, 50);
	                }
					else
					{
					    SetPlayerSkin(playerid, 131);
					}

					GetPlayerWeaponData(playerid, WEAPON_SLOT_MELEE, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_SHOTGUN, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_ASSAULT_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_LONG_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);

					ResetPlayerWeapons(playerid);

		        	IsPlayerOnDuty[playerid] = 1;

		        	new dstring[256];
		        	format(dstring, sizeof(dstring), "[DUTY ALERT] %s has just gone on duty and is avaliable for calls!", GetName(playerid));
					SendFactionOOCMessage(9, COLOR_YELLOW, dstring);

					new string[256];
   					format(string, sizeof(string), "> %s has just changed into their work clothing and gone on duty", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
   				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near a duty point!");
		}
		else if(PlayerData[playerid][Character_Faction] == 5)
        {
   			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1511.0210,-1464.6028,9.5000))
		    {
		    	if(IsPlayerOnDuty[playerid] == 1)
	            {
	                SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);

				    ResetPlayerWeapons(playerid);

				    IsPlayerOnDuty[playerid] = 0;

                    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
				    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);

		        	new dstring[256];
		        	format(dstring, sizeof(dstring), "[DUTY ALERT] %s has just gone off duty!", GetName(playerid));
					SendFactionOOCMessage(5, COLOR_YELLOW, dstring);

					new string[256];
   					format(string, sizeof(string), "> %s has just changed into their civilian clothing and gone off duty", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				}
				else
				{
				    if(IsEqual(PlayerData[playerid][Character_Sex], "Male", false))
	                {
	                    SetPlayerSkin(playerid, 50);
	                }
					else
					{
					    SetPlayerSkin(playerid, 131);
					}

					GetPlayerWeaponData(playerid, WEAPON_SLOT_MELEE, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_SHOTGUN, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_ASSAULT_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_LONG_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);

					ResetPlayerWeapons(playerid);

		        	IsPlayerOnDuty[playerid] = 1;

		        	new dstring[256];
		        	format(dstring, sizeof(dstring), "[DUTY ALERT] %s has just gone on duty and is avaliable for calls!", GetName(playerid));
					SendFactionOOCMessage(5, COLOR_YELLOW, dstring);

					new string[256];
   					format(string, sizeof(string), "> %s has just changed into their work clothing and gone on duty", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
   				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near a duty point!");
		}
		else if(PlayerData[playerid][Character_Faction] == 8)
        {
   			if(IsPlayerInRangeOfPoint(playerid, 3.0, 618.3365,-76.9667,997.9922))
		    {
		    	if(IsPlayerOnDuty[playerid] == 1)
	            {
	                SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);

				    ResetPlayerWeapons(playerid);

				    IsPlayerOnDuty[playerid] = 0;

                    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
				    GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
					GivePlayerWeapon(playerid, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);

		        	new dstring[256];
		        	format(dstring, sizeof(dstring), "[DUTY ALERT] %s has just gone off duty!", GetName(playerid));
					SendFactionOOCMessage(8, COLOR_YELLOW, dstring);

					new string[256];
   					format(string, sizeof(string), "> %s has just changed into their civilian clothing and gone off duty", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
				}
				else
				{
				    if(IsEqual(PlayerData[playerid][Character_Sex], "Male", false))
	                {
	                    SetPlayerSkin(playerid, 50);
	                }
					else
					{
					    SetPlayerSkin(playerid, 131);
					}										
										
					GetPlayerWeaponData(playerid, WEAPON_SLOT_MELEE, WEAPON:PlayerData[playerid][Weapon_Slot_1], PlayerData[playerid][Ammo_Slot_1]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:PlayerData[playerid][Weapon_Slot_2], PlayerData[playerid][Ammo_Slot_2]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_SHOTGUN, WEAPON:PlayerData[playerid][Weapon_Slot_3], PlayerData[playerid][Ammo_Slot_3]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerData[playerid][Weapon_Slot_4], PlayerData[playerid][Ammo_Slot_4]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_ASSAULT_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_5], PlayerData[playerid][Ammo_Slot_5]);
					GetPlayerWeaponData(playerid, WEAPON_SLOT_LONG_RIFLE, WEAPON:PlayerData[playerid][Weapon_Slot_6], PlayerData[playerid][Ammo_Slot_6]);

					ResetPlayerWeapons(playerid);

		        	IsPlayerOnDuty[playerid] = 1;

		        	new dstring[256];
		        	format(dstring, sizeof(dstring), "[DUTY ALERT] %s has just gone on duty and is avaliable for calls!", GetName(playerid));
					SendFactionOOCMessage(8, COLOR_YELLOW, dstring);

					new string[256];
   					format(string, sizeof(string), "> %s has just changed into their work clothing and gone on duty", GetRPName(playerid));
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
   				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near a duty point!");
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
   }
	return 1;
}

// BANK COMMANDS

CMD:bankaccount(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    if(PlayerData[playerid][Character_Bank_Account] == 0)
	    {
	        for(new i; i<sizeof BankDeskLocations; i++)
			{
		        if(IsPlayerInRangeOfPoint(playerid, 3.0, BankDeskLocations[i][0], BankDeskLocations[i][1], BankDeskLocations[i][2]))
		        {
           			ShowPlayerDialog(playerid, DIALOG_BANK_REGISTER, DIALOG_STYLE_PASSWORD, "Los Santos Bank", "It appears that you do not have an open account with us!\n\nPlease enter in a password below that you want to use for this account.\n\n(There will be a $100 fee to the end user for the cost of setting the account up)", "Register", "Close");
				}
				else return SendPlayerErrorMessage(playerid, " You are not near the tellers desk in the bank!");
			}
		}
	    else
	    {
	        for(new i; i<sizeof BankDeskLocations; i++)
			{
		        if(IsPlayerInRangeOfPoint(playerid, 3.0, BankDeskLocations[i][0], BankDeskLocations[i][1], BankDeskLocations[i][2]))
		        {
		        	ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN, DIALOG_STYLE_PASSWORD, "Los Santos Bank", "Welcome back to the Los Santos Bank!\n\nPlease enter in the password you used to set the account up.", "Login", "Close");
				}
				else return SendPlayerErrorMessage(playerid, " You are not near the tellers desk in the bank!");
			}
	    }
	}
	return 1;
}

// VEHICLE COMMANDS

CMD:fillup(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, 1938.3210, -1776.3223, 13.2729) || IsPlayerInRangeOfPoint(playerid, 10.0, 1004.7997,-939.7463,42.0510) || IsPlayerInRangeOfPoint(playerid, 10.0, 658.1951,-566.0594,16.2075) && IsPlayerInVehicle(playerid, vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

			if(engine == 1)
			{
				SendPlayerErrorMessage(playerid, " You need to turn your vehicle off first, before you can pump fuel into it!");
			}
			else
			{
		        if(VehicleData[vehicleid][Vehicle_Fuel] == 100) return SendPlayerErrorMessage(playerid, " You cannot fill up a vehicle that has no more room in its tank!");
				else
				{
				    GameTextForPlayer(playerid, "~r~Calculating Fuel...", 5000, 5);
					
					TogglePlayerControllable(playerid, false);
	             	Refuel_Timer[playerid] = SetTimerEx("RefuelTimer", 5000, false, "i", playerid);
		        }
			}
	    }
	    else
	    {
	        SendPlayerErrorMessage(playerid, " You are not near a gas station, in a vehicle or a driver of a vehicle!");
	    }
	}
	return 1;
}

CMD:recyclecar(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    new vehicleid, blankstring[50];
	    vehicleid = GetPlayerVehicleID(playerid);
	    blankstring = " ";

		if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");
		if(strcmp(VehicleData[vehicleid][Vehicle_Owner], PlayerData[playerid][Character_Name], false) != 0) return SendPlayerErrorMessage(playerid, " You do not own this vehicle, you cannot use /recyclecar!");

        if(IsPlayerInRangeOfPoint(playerid, 4.0, 2409.5278,-1426.0397,23.9829))
        {
			VehicleData[vehicleid][Vehicle_Faction] = 0;
			VehicleData[vehicleid][Vehicle_Owner] = blankstring;
			VehicleData[vehicleid][Vehicle_Used] = 0;

			VehicleData[vehicleid][Vehicle_Model] = 402;
			VehicleData[vehicleid][Vehicle_Color_1] = 0;
			VehicleData[vehicleid][Vehicle_Color_2] = 0;

			VehicleData[vehicleid][Vehicle_Spawn_X] = 0;
			VehicleData[vehicleid][Vehicle_Spawn_Y] = 0;
			VehicleData[vehicleid][Vehicle_Spawn_Z] = 0;
			VehicleData[vehicleid][Vehicle_Spawn_A] = 0;

			VehicleData[vehicleid][Vehicle_Lock] = 0;
			VehicleData[vehicleid][Vehicle_Alarm] = 0;
			VehicleData[vehicleid][Vehicle_GPS] = 0;
			VehicleData[vehicleid][Vehicle_Fuel] = 0;
			VehicleData[vehicleid][Vehicle_Type] = 0;
			VehicleData[vehicleid][Vehicle_Lock_Status] = 0;
			VehicleData[vehicleid][Vehicle_Alarm_Status] = 0;
			VehicleData[vehicleid][Vehicle_License_Plate] = 0;
			
			new licenseplate[10];
			format(licenseplate, sizeof(licenseplate), "ORP %d", vehicleid);
			SetVehicleNumberPlate(vehicleid, licenseplate);
			
			VehicleData[vehicleid][Vehicle_License_Plate] = licenseplate;

	        new query[2000];
	        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_faction` = '0', `vehicle_owner` = '', `vehicle_used` = '0', `vehicle_model` = '402', `vehicle_color_1` = '0', `vehicle_color_2` = '0', `vehicle_spawn_x` = '0', `vehicle_spawn_y` = '0', `vehicle_spawn_z` = '0', `vehicle_spawn_a` = '0', `vehicle_lock` = '0', `vehicle_alarm` = '0', `vehicle_gps` = '0', `vehicle_license_plate` = '%s', `vehicle_fuel` = '0', `vehicle_type` = '0', `vehicle_lock_status` = '0', `vehicle_alarm_status` = '0' WHERE `vehicle_id` = '%i' LIMIT 1", licenseplate, VehicleData[vehicleid][Vehicle_ID]);
	   		mysql_tquery(connection, query);

	   		DestroyVehicle(vehicleid);
	   		
	   		if(VehicleData[vehicleid][Vehicle_Used] == 0)
	        {
	            AddStaticVehicleEx(402, 4572.7007, -1116.7518, 0.3459, 180, 1, 1, -1);

				format(licenseplate, sizeof(licenseplate), "%s", VehicleData[vehicleid][Vehicle_License_Plate]);
				SetVehicleNumberPlate(vehicleid, licenseplate);
	        }

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just recycled your vehicle (You get $500 for recycling your vehicle)!");
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			PlayerData[playerid][Character_Money] += 500;
			PlayerData[playerid][Character_Total_Vehicles] --;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$500");
			GameTextForPlayer(playerid, text_value1, 3000, 1);


			printf("%s has just recycled thier vehicle", GetName(playerid));
		}
		else return SendPlayerErrorMessage(playerid, " You are not near the recycle center for vehicles!");
	}
	return 1;
}

CMD:changeownership(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    new vehicleid, targetid, ownername[50];

	    vehicleid = GetPlayerVehicleID(playerid);

		if(sscanf(params, "i", targetid))
		{
			SendPlayerTipMessage(playerid, " /changeownership [playerid]");
		}
		else
		{
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
		    if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");
		    if(strcmp(VehicleData[vehicleid][Vehicle_Owner], PlayerData[playerid][Character_Name], false) != 0) return SendPlayerErrorMessage(playerid, " You do not own this vehicle, you cannot use /changeownership!");

			ownername = GetName(targetid);
			VehicleData[vehicleid][Vehicle_Owner] = ownername;

            new query[2000];
	        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_owner` = '%s' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Owner], VehicleData[vehicleid][Vehicle_ID]);
    		mysql_tquery(connection, query);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just changed ownership of your vehicle to: %s!", ownername);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			PlayerData[playerid][Character_Total_Vehicles] --;
			PlayerData[targetid][Character_Total_Vehicles] ++;
		}
	}
	return 1;
}

CMD:park(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
	    new vehicleid;
	    new Float:vehx, Float:vehy, Float:vehz, Float:veha;

	    vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");
		if(strcmp(VehicleData[vehicleid][Vehicle_Owner], PlayerData[playerid][Character_Name], false) != 0) return SendPlayerErrorMessage(playerid, " You do not own this vehicle, you cannot use /park!");

		GetVehiclePos(vehicleid, vehx, vehy, vehz);
        GetVehicleZAngle(vehicleid, veha);
		VehicleData[vehicleid][Vehicle_Spawn_X] = vehx;
		VehicleData[vehicleid][Vehicle_Spawn_Y] = vehy;
		VehicleData[vehicleid][Vehicle_Spawn_Z] = vehz;
		VehicleData[vehicleid][Vehicle_Spawn_A] = veha;

        new query[2000];
        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_spawn_x` = '%f', `vehicle_spawn_y` = '%f', `vehicle_spawn_z` = '%f', `vehicle_spawn_a` = '%f' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Spawn_X], VehicleData[vehicleid][Vehicle_Spawn_Y], VehicleData[vehicleid][Vehicle_Spawn_Z], VehicleData[vehicleid][Vehicle_Spawn_A], VehicleData[vehicleid][Vehicle_ID]);
   		mysql_tquery(connection, query);

		new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just parked your private vehicle!");
		SendClientMessage(playerid, COLOR_ORANGE, dstring);
		
		printf("%s has parked thier vehicle", GetName(playerid));
	}
	return 1;
}

CMD:engine(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid] == 1)
	    {
			new PLAYER_STATE:driver_state = GetPlayerState(playerid);
			
	        if(!IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be inside a vehicle to use this command!");
			if(driver_state != PLAYER_STATE_DRIVER) return SendPlayerErrorMessage(playerid, " You need to be in the drivers seat to use this command!");

			new vehicleid = GetPlayerVehicleID(playerid);
			new Float:vehiclehealth;

			GetVehicleHealth(vehicleid, vehiclehealth);
			
			new string[156];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

			if(engine == 1)
			{
				SetVehicleParamsEx(vehicleid, false, lights, alarm, doors, bonnet, boot, objective);

			    format(string, sizeof(string), "> %s has just turned the key of their vehicle off", GetRPName(playerid));
	   			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

   				PlayerTextDrawSetString(playerid, SpeedBoxFuelAmount, "-");

   				KillTimer(Fuel_Timer[playerid]);
   				KillTimer(Vehicle_Timer[playerid]);

   				Fuel_Timer[playerid] = 0;
				Vehicle_Timer[playerid] = 0;

				printf("%s has turned thier vehicle off", GetName(playerid));
			}
			else
			{
			    if(vehiclehealth <= 300) return SendPlayerErrorMessage(playerid, " This vehicle is two damaged to turn on, call a mechanic!");
				else if(vehiclehealth > 300)
				{
				    SetVehicleParamsEx(vehicleid, true, lights, alarm, doors, bonnet, boot, objective);

				    format(string, sizeof(string), "> %s has just turned the key of their vehicle around and turned it on", GetRPName(playerid));
	   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

	   				Fuel_Timer[playerid] = SetTimerEx("FuelTimer", 10000, true, "i", playerid);
	   				Vehicle_Timer[playerid] = SetTimerEx("VehicleTimer", 250, true, "i", playerid);

	   				printf("%s has turned thier vehicle on", GetName(playerid));
				}
			}
	    }
	}
	return 1;
}

CMD:lights(playerid, params[])
{

	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid] == 1)
	    {
	        new PLAYER_STATE:driver_state = GetPlayerState(playerid);
			
	        if(!IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be inside a vehicle to use this command!");
			if(driver_state != PLAYER_STATE_DRIVER) return SendPlayerErrorMessage(playerid, " You need to be in the drivers seat to use this command!");
	        
			new vehicleid = GetPlayerVehicleID(playerid);
			new string[156];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

			if(lights == 1)
			{
			    SetVehicleParamsEx(vehicleid, engine, false, alarm, doors, bonnet, boot, objective);
			    format(string, sizeof(string), "> %s has just flicked their vehicle lights off", GetRPName(playerid));
   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

                printf("%s has turned thier vehicle lights off", GetName(playerid));
			}
			else
			{
			    SetVehicleParamsEx(vehicleid, engine, true, alarm, doors, bonnet, boot, objective);
			    format(string, sizeof(string), "> %s has just flicked their vehicle lights on", GetRPName(playerid));
   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

                printf("%s has turned thier vehicle lights on", GetName(playerid));
			}
	    }
	}
	return 1;
}

CMD:flash(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid] == 1)
	    {
	        new PLAYER_STATE:driver_state = GetPlayerState(playerid);
			
	        if(!IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be inside a vehicle to use this command!");
			if(driver_state != PLAYER_STATE_DRIVER) return SendPlayerErrorMessage(playerid, " You need to be in the drivers seat to use this command!");
			
	        if(IsLSPDVehicle(playerid) || IsLSFDVehicle(playerid) || IsLSMCVehicle(playerid) || IsDudeFixVehicle(playerid) || IsElectricianVehicle(playerid))
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new string[156];
				new engine_check, lights_check, alarm_check, doors_check, bonnet_check, boot_check, objective_check;
				GetVehicleParamsEx(vehicleid, engine_check, lights_check, alarm_check, doors_check, bonnet_check, boot_check, objective_check);
	
				if(lights_check == 0)
				{					
					if(VehicleFlash_Timer[vehicleid] == 0)
					{
						SetVehicleParamsEx(vehicleid, engine_check, true, alarm_check, doors_check, bonnet_check, boot_check, objective_check);
						
					    VehicleFlash_Timer[vehicleid] = SetTimerEx("FlashLights", 100, true, "i", vehicleid);
					
					    format(string, sizeof(string), "> %s has just flicked their vehicle safety lights on", GetRPName(playerid));
		   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
		
		                printf("%s has turned thier vehicle safety lights on", GetName(playerid));
					}
					else
					{
						SetVehicleParamsEx(vehicleid, engine_check, false, alarm_check, doors_check, bonnet_check, boot_check, objective_check);
						
					    KillTimer(VehicleFlash_Timer[vehicleid]);
		            	VehicleFlash_Timer[vehicleid] = 0;
		
					    format(string, sizeof(string), "> %s has just flicked their vehicle safety lights off", GetRPName(playerid));
		   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
		
						new VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:doors, VEHICLE_LIGHT_STATUS:lights, VEHICLE_TIRE_STATUS:tires;
		    			GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		
						lights = VEHICLE_LIGHT_STATUS:0;
						UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		
		                printf("%s has turned thier vehicle safety lights off", GetName(playerid));
					}
				}
				else
				{					
					if(VehicleFlash_Timer[vehicleid] == 0)
					{						
					    VehicleFlash_Timer[vehicleid] = SetTimerEx("FlashLights", 100, true, "i", vehicleid);
					
					    format(string, sizeof(string), "> %s has just flicked their vehicle safety lights on", GetRPName(playerid));
		   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
		
		                printf("%s has turned thier vehicle safety lights on", GetName(playerid));
					}
					else
					{						
					    KillTimer(VehicleFlash_Timer[vehicleid]);
		            	VehicleFlash_Timer[vehicleid] = 0;
		
					    format(string, sizeof(string), "> %s has just flicked their vehicle safety lights off", GetRPName(playerid));
		   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
		
						new VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:doors, VEHICLE_LIGHT_STATUS:lights, VEHICLE_TIRE_STATUS:tires;
		    			GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		
						lights = VEHICLE_LIGHT_STATUS:0;
						UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		
		                printf("%s has turned thier vehicle safety lights off", GetName(playerid));
					}
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not within a vehicle that has this ability to have flashing lights!");
	    }
	}
	return 1;
}

CMD:bonnet(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid] == 1)
	    {
	        new PLAYER_STATE:driver_state = GetPlayerState(playerid);
			
	        if(!IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be inside a vehicle to use this command!");
			if(driver_state != PLAYER_STATE_DRIVER) return SendPlayerErrorMessage(playerid, " You need to be in the drivers seat to use this command!");
	        
			new vehicleid = GetPlayerVehicleID(playerid);
			new string[156];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

			if(bonnet == 1)
			{
			    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, false, boot, objective);
			    format(string, sizeof(string), "> %s has just closed the front of their bonnet", GetRPName(playerid));
   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

                printf("%s has closed thier bonnet", GetName(playerid));
			}
			else
			{
			    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, true, boot, objective);
			    format(string, sizeof(string), "> %s has just popped open the front of their bonnet", GetRPName(playerid));
   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

                printf("%s has opened thier bonnet", GetName(playerid));
			}
	    }
	}
	return 1;
}

CMD:boot(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid] == 1)
	    {
	        new PLAYER_STATE:driver_state = GetPlayerState(playerid);
			
	        if(!IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be inside a vehicle to use this command!");
			if(driver_state != PLAYER_STATE_DRIVER) return SendPlayerErrorMessage(playerid, " You need to be in the drivers seat to use this command!");
	        
			new vehicleid = GetPlayerVehicleID(playerid);
			new string[156];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

			if(boot == 1)
			{
			    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, false, objective);
			    format(string, sizeof(string), "> %s has just closed the back of their vehicle", GetRPName(playerid));
   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

                printf("%s has closed their boot", GetName(playerid));
			}
			else
			{
			    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, true, objective);
			    format(string, sizeof(string), "> %s has just popped opened the back of their vehicle", GetRPName(playerid));
   				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);

                printf("%s has opened their boot", GetName(playerid));
			}
	    }
	}
	return 1;
}

// FACTION COMMANDS
CMD:factions(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
	        new query[128];
		    mysql_format(connection, query, sizeof(query), "SELECT * FROM `faction_information`");
			mysql_tquery(connection, query, "OnFactionCheck", "i", playerid);
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:fstaff(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
	        new atext[50], string[256];

			SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF}*** {F2F746}Online Staff{FFFFFF} ***");

	        for (new i = 0; i < MAX_PLAYERS; i++)
	        {
				if(PlayerData[i][Character_Faction] > 0 && PlayerData[i][Character_Faction] == PlayerData[playerid][Character_Faction])
				{
					switch(PlayerData[i][Character_Faction_Rank])
					{
					    case 1: { atext = "[Rank 1]"; }
					    case 2: { atext = "[Rank 2]"; }
					    case 3: { atext = "[Rank 3]"; }
					    case 4: { atext = "[Rank 4]"; }
					    case 5: { atext = "[Rank 5]"; }
					    case 6: { atext = "[Rank 6]"; }
					}
					
					if(IsPlayerOnDuty[playerid] == 1)
					{
					    format(string, sizeof(string), "> {F2F746}%s{FFFFFF} %s{F2F746} [On Duty]", atext, PlayerData[i][Character_Name]);
		            	SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else
					{
			            format(string, sizeof(string), "> {F2F746}%s{FFFFFF} %s", atext, PlayerData[i][Character_Name]);
			            SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
	        }
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:setrankname(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction] == 0 || PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else	
	{
		new rankid;
		new acquery[500], value[20], dstring[500];

		if(sscanf(params, "is[20]", rankid, value))
		{
			SendPlayerTipMessage(playerid, " /setrankname [rank id] [value] (20 characters)");
			SendPlayerTipMessage(playerid, " OPTIONS: 1 to 6 - Rank Name (6 = Owner Rank)");
		}
		else
		{
			new factionid;
			factionid = PlayerData[playerid][Character_Faction];
			
			switch(rankid)
			{
			    case 1:
			    {
			        FactionData[factionid][Faction_Rank_1] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_1` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated your faction (%s) Rank 1 to be (%s)", FactionData[factionid][Faction_Name], FactionData[factionid][Faction_Rank_1]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 2:
			    {
			        FactionData[factionid][Faction_Rank_2] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_2` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated your faction (%s) Rank 2 to be (%s)", FactionData[factionid][Faction_Name], FactionData[factionid][Faction_Rank_2]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 3:
			    {
			        FactionData[factionid][Faction_Rank_3] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_3` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated your faction (%s) Rank 3 to be (%s)", FactionData[factionid][Faction_Name], FactionData[factionid][Faction_Rank_3]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 4:
			    {
			        FactionData[factionid][Faction_Rank_4] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_4` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated your faction (%s) Rank 4 to be (%s)", FactionData[factionid][Faction_Name], FactionData[factionid][Faction_Rank_4]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 5:
			    {
			        FactionData[factionid][Faction_Rank_5] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_5` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated your faction (%s) Rank 5 to be (%s)", FactionData[factionid][Faction_Name], FactionData[factionid][Faction_Rank_5]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 6:
			    {
			        FactionData[factionid][Faction_Rank_6] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_6` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated your faction (%s) Rank 6 to be (%s)", FactionData[factionid][Faction_Name], FactionData[factionid][Faction_Rank_6]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			}
		}
	}
	return 1;
}

CMD:hire(playerid, params[])
{
    if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction] == 0 || PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new dstring[256], factionname[20];
     	new targetid, factionid;

		if(sscanf(params, "i", targetid))
		{
		    SendPlayerTipMessage(playerid, " /hire [playerid]");
		}
		else
  		{
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
  		    if(PlayerData[targetid][Character_Faction] != 0) return SendPlayerErrorMessage(playerid, " You cannot hire someone who is already within another faction!");
            if(PlayerData[playerid][Character_Faction_Ban] > 0) return SendPlayerErrorMessage(playerid, " You cannot hire someone who has a faction ban. Please contact staff via forums for removal against player!");
			else
		  	{
		  	    factionid = PlayerData[playerid][Character_Faction];
		  	    factionname = FactionData[factionid][Faction_Name];

		  	    PlayerData[targetid][Character_Faction] = factionid;
				PlayerData[targetid][Character_Faction_Rank] = 1;
				
				new cquery[2000];
			    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction` = '%i', `character_faction_rank` = '1' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Faction], PlayerData[targetid][Character_Name]);
			    mysql_tquery(connection, cquery);

				format(dstring, sizeof(dstring), "- You have just been hired into faction %s!", factionname);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} You have just hired %s into the faction %s!", GetName(targetid), factionname);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} %s has just been hired into the %s!", GetName(targetid), factionname);
				SendFactionOOCMessage(factionid, COLOR_LIME, dstring);
  		    }
		}
	}
	return 1;
}

CMD:fire(playerid, params[])
{
    if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction] == 0 || PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new dstring[256], reason[100], factionname[20];
     	new targetid, factionid;

		if(sscanf(params, "is", targetid, reason))
		{
		    SendPlayerTipMessage(playerid, " /fire [playerid] [reason]");
		}
		else
  		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot fire yourself from the faction, use /quitfaction!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
  		    if(PlayerData[playerid][Character_Faction] != PlayerData[targetid][Character_Faction]) return SendPlayerErrorMessage(playerid, " You cannot fire someone who isn't within your faction!");
			else
		  	{
		  	    factionid = PlayerData[playerid][Character_Faction];
		  	    factionname = FactionData[factionid][Faction_Name];
		  	    
		  	    PlayerData[targetid][Character_Faction] = 0;
				PlayerData[targetid][Character_Faction_Rank] = 0;
				
				new cquery[2000];
			    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction` = '0', `character_faction_rank` = '0' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Faction], PlayerData[targetid][Character_Name]);
			    mysql_tquery(connection, cquery);

				format(dstring, sizeof(dstring), "- You have just been fired from faction %s!", factionname);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} You have just fired %s from the faction %s!", GetName(targetid), factionname);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} %s has just been fired from the organisation!", GetName(targetid));
				SendFactionOOCMessage(factionid, COLOR_LIME, dstring);
  		    }
		}
	}
	return 1;
}

CMD:setrank(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction] == 0 || PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature. You are not a faction leader!");
	{
     	new dstring[256], rankname[20];
     	new rankid, targetid, factionid;

		if(sscanf(params, "ii", targetid, rankid))
		{
		    SendPlayerTipMessage(playerid, " /setrank [playerid] [new rank (1-5)]");
		}
		else
  		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot set the rank of yourself, you need another rank 6 member!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
  		    if(PlayerData[playerid][Character_Faction] != PlayerData[targetid][Character_Faction]) return SendPlayerErrorMessage(playerid, " You cannot change a rank of a player that is not in your faction!");
			if(rankid < 1 || rankid > 5) return SendPlayerErrorMessage(playerid, " You need to give a rank level between 1 and 5!");
			else
		  	{
		  	    factionid = PlayerData[playerid][Character_Faction];
				PlayerData[targetid][Character_Faction_Rank] = rankid;
				
				if(PlayerData[targetid][Character_Faction_Rank] == 1)
				{
					format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_1]);
				}
				else if(PlayerData[targetid][Character_Faction_Rank] == 2)
				{
				    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_2]);
				}
				else if(PlayerData[targetid][Character_Faction_Rank] == 3)
				{
				    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_3]);
				}
				else if(PlayerData[targetid][Character_Faction_Rank] == 4)
				{
				    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_4]);
				}
				else if(PlayerData[targetid][Character_Faction_Rank] == 5)
				{
				    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_5]);
				}
				else if(PlayerData[targetid][Character_Faction_Rank] == 6)
				{
				    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_6]);
				}
				
				new cquery[2000];
			    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_rank` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Faction_Rank], PlayerData[targetid][Character_Name]);
			    mysql_tquery(connection, cquery);

				format(dstring, sizeof(dstring), "- You have just been given the new rank of %s!", rankname);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
				
				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} You have just given %s the new rank of %s!", GetName(targetid), rankname);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
  		    }
		}
	}
	return 1;
}

CMD:factionchat(playerid, params[]) return cmd_fchat(playerid, params);
CMD:fchat(playerid, params[])
{
    if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    if(PlayerData[playerid][Character_Faction] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
		{
		    new factionid;
	    	new dstring[150], playername[MAX_PLAYER_NAME];
	    	new rankname[20];
	    	
		    if(isnull(params)) return SendPlayerTipMessage(playerid, " /f(action)chat [message]");
			else
			{
				if(IsPlayerMuted[playerid] == 1) return SendPlayerErrorMessage(playerid, " You are currently muted and cannot use this chat!");
				else
				{
			    	factionid = PlayerData[playerid][Character_Faction];
					playername = GetName(playerid);
					
					if(PlayerData[playerid][Character_Faction_Rank] == 1)
					{
						format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_1]);
					}
					else if(PlayerData[playerid][Character_Faction_Rank] == 2)
					{
					    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_2]);
					}
					else if(PlayerData[playerid][Character_Faction_Rank] == 3)
					{
					    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_3]);
					}
					else if(PlayerData[playerid][Character_Faction_Rank] == 4)
					{
					    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_4]);
					}
					else if(PlayerData[playerid][Character_Faction_Rank] == 5)
					{
					    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_5]);
					}
					else if(PlayerData[playerid][Character_Faction_Rank] == 6)
					{
					    format(rankname, sizeof(rankname), "%s", FactionData[factionid][Faction_Rank_6]);
					}
					
					format(dstring, sizeof(dstring), "((Faction OOC %s %s: %s ))", rankname, playername, params);
					SendFactionOOCMessage(factionid, COLOR_LIME, dstring);
				}
			}
		}
	}
	return 1;
}

CMD:quitjob(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
	    if(PlayerData[playerid][Character_Job] == 0) return SendPlayerErrorMessage(playerid, " You cannot quit a job at this point in time. Reason: You are not apart of any job!");
		else		
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2102.2109, -1789.1084, 13.5547) && PlayerData[playerid][Character_Job] == 1)
			{
			    new dstring[256];
	
				PlayerData[playerid][Character_Job] = 0;
	
				new cquery[500];
			    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_job` = '0' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Name]);
				mysql_tquery(connection, cquery);
	
				format(dstring, sizeof(dstring), "- You have just left your current job as a pizza delivery driver");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
	
				printf("QUIT JOB [Completed] | %s", GetName(playerid));
				
				if(PizzaJobDeliveryPlayer[playerid] > 0)
				{
					SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2201.1582,-1974.1382,13.5576) && PlayerData[playerid][Character_Job] == 2)
			{
			    new dstring[256];
	
				PlayerData[playerid][Character_Job] = 0;
	
				new cquery[500];
			    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_job` = '0' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Name]);
				mysql_tquery(connection, cquery);
	
				format(dstring, sizeof(dstring), "- You have just left your current job as a Garbage Collector");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
	
				printf("QUIT JOB [Completed] | %s", GetName(playerid));
				
				if(GarbageJobPlayer[playerid] > 0)
				{
					SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 992.1449,-1454.0868,13.5469) && PlayerData[playerid][Character_Job] == 3)
			{
			    new dstring[256];
	
				PlayerData[playerid][Character_Job] = 0;
	
				new cquery[500];
			    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_job` = '0' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Name]);
				mysql_tquery(connection, cquery);
	
				format(dstring, sizeof(dstring), "- You have just left your current job as an Electrician");
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
	
				printf("QUIT JOB [Completed] | %s", GetName(playerid));
				
				if(ElectricianJobPlayer[playerid] > 0)
				{
					SetPlayerSkin(playerid, PlayerData[playerid][Character_Skin_1]);
				}
			}
			else return SendPlayerErrorMessage(playerid, " You need to be where your old job location is before you /quitjob!");
		}
	}
	return 1;
}

CMD:joinjob(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Job] > 0) return SendPlayerErrorMessage(playerid, " You are already apart of a job, you cannot rejoin/join any new job at this time!");
	if(IsPlayerInAnyVehicle(playerid)) return SendPlayerErrorMessage(playerid, " You need to be outside of your vehicle to complete this job!");
    if(PlayerData[playerid][Character_Job] == 0)
	{
	    new jobid;
	    new dstring[256];
	
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 2102.2109, -1789.1084, 13.5547)) // PIZZA JOB LOCATION
		{
		    jobid = 1;
		    PlayerData[playerid][Character_Job] = jobid;
		    
		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_job` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Job], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);
		    
		    format(dstring, sizeof(dstring), "- You have just joined the pizza delivery service. Use /startjob or /stopjob at the icon to begin");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			printf("JOIN PIZZA JOB [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2201.1582,-1974.1382,13.5576)) // Garbage job LOCATION
		{
		    jobid = 2;
		    PlayerData[playerid][Character_Job] = jobid;
		    
		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_job` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Job], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);
		    
		    format(dstring, sizeof(dstring), "- You have just joined the Garbage Collection service. Use /startjob or /stopjob at the icon to begin");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			printf("JOIN GARBAGE JOB [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 992.1449,-1454.0868,13.5469)) // Electrician Job LOCATION
		{
		    jobid = 3;
		    PlayerData[playerid][Character_Job] = jobid;
		    
		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_job` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Job], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);
		    
		    format(dstring, sizeof(dstring), "- You have just joined the Electrician Guild. Use /startjob or /stopjob at the icon to begin");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			printf("JOIN ELECTRICIAN JOB [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1810.1023,-1897.4574,13.5791)) // Taxi Job LOCATION
		{
		    jobid = 4;
		    PlayerData[playerid][Character_Job] = jobid;
		    
		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_job` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Job], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);
		    
		    format(dstring, sizeof(dstring), "- You have just joined the Taxi Company. Grab a vehicle to drive around. Use /billcustomer to charge someone");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			printf("JOIN TAXI JOB [Completed] | %s", GetName(playerid));
		}
		else return SendPlayerErrorMessage(playerid, " You are not near any job pickup that allows this command!");
	}
	return 1;
}

CMD:quitfaction(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    if(PlayerData[playerid][Character_Faction] == 0) return SendPlayerErrorMessage(playerid, " You cannot quit a faction at this point in time. Reason: You are not apart of any faction!");
		{
		    if(PlayerData[playerid][Character_Owns_Faction] == 1) return SendPlayerErrorMessage(playerid, " You cannot quit a faction at this point in time. Reason: You need to sell your faction!");
		    else
		    {
			    new dstring[256];
				new factionid;

				factionid = PlayerData[playerid][Character_Faction];

			    PlayerData[playerid][Character_Faction] = 0;
			    PlayerData[playerid][Character_Faction_Rank] = 0;

			    new cquery[2000];
			    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction` = '0', `character_faction_rank` = '0' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Faction], PlayerData[playerid][Character_Name]);
				mysql_tquery(connection, cquery);

			    format(dstring, sizeof(dstring), "- You have just left the %s faction. We are sorry to see you leave!", FactionData[factionid][Faction_Name]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);

			    format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just left the faction!", GetName(playerid));
				SendFactionOOCMessage(factionid, COLOR_RED, dstring);

				printf("QUITFACTION [Completed] | %s", GetName(playerid));
			}
		}
	}
	return 1;
}

CMD:cancelrequest(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    if(PlayerData[playerid][Character_Faction_Join_Request] == 0) return SendPlayerErrorMessage(playerid, " You are not currently awaiting approval for a faction!");
		{
		    new dstring[256];
			
			PlayerData[playerid][Character_Faction_Join_Request] = 0;

			new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

			format(dstring, sizeof(dstring), "- You have just cancelled your faction application!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			printf("CANCELREQUEST [Completed] | %s", GetName(playerid));
		}
	}
	return 1;
}

CMD:joinfaction(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction] > 0) return SendPlayerErrorMessage(playerid, " You are already apart of a faction, you cannot rejoin/join any new factions at this time!");
 	if(PlayerData[playerid][Character_Faction_Ban] > 0) return SendPlayerErrorMessage(playerid, " You cannot join a faction as you are currently, faction banned. Request ban removal via forums!");
	if(PlayerData[playerid][Character_Faction_Join_Request] > 0) return SendPlayerErrorMessage(playerid, " You have already attempted to join another faction, please wait or /cancelrequest");
    if(PlayerData[playerid][Character_Faction] == 0)
	{
	    new factionid;
	    new dstring[256];

		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1544.5784,-1670.9464,13.5587)) // LSPD JOIN LOCATION
		{
		    factionid = 1;
		    PlayerData[playerid][Character_Faction_Join_Request] = 1;
		    
		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);
		    
		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
		    
			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;
		    
		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 1 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[playerid][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}
			
			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1755.8239,-1720.1548,13.3870)) // LSFD JOIN LOCATION
		{
		    factionid = 2;
		    PlayerData[playerid][Character_Faction_Join_Request] = 2;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 2 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1996.7914,-1442.0536,13.5677)) // LSMC JOIN LOCATION
		{
		    factionid = 3;
		    PlayerData[playerid][Character_Faction_Join_Request] = 3;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 3 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 4) // BANK JOIN LOCATION
		{
		    factionid = 4;
		    PlayerData[playerid][Character_Faction_Join_Request] = 4;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 4 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 5) // TOW CO JOIN LOCATION
		{
		    factionid = 5;
		    PlayerData[playerid][Character_Faction_Join_Request] = 5;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 5 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 6) // Taxi Co JOIN LOCATION
		{
		    factionid = 6;
		    PlayerData[playerid][Character_Faction_Join_Request] = 6;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 6 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 7) // Truck Co JOIN LOCATION
		{
		    factionid = 7;
		    PlayerData[playerid][Character_Faction_Join_Request] = 7;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 7 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 8) // Dudefix JOIN LOCATION
		{
		    factionid = 8;
		    PlayerData[playerid][Character_Faction_Join_Request] = 8;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 8 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 9) // Mechanic JOIN LOCATION
		{
		    factionid = 9;
		    PlayerData[playerid][Character_Faction_Join_Request] = 9;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 9 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 10) // Grove Gang JOIN LOCATION
		{
		    factionid = 10;
		    PlayerData[playerid][Character_Faction_Join_Request] = 10;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 10 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 11) // La Familia Gang JOIN LOCATION
		{
		    factionid = 11;
		    PlayerData[playerid][Character_Faction_Join_Request] = 11;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 11 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 12) // Hells Gang JOIN LOCATION
		{
		    factionid = 12;
		    PlayerData[playerid][Character_Faction_Join_Request] = 12;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 12 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 13) // Hendrix Familia
		{
		    factionid = 13;
		    PlayerData[playerid][Character_Faction_Join_Request] = 13;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 13 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}
			
			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 14) // Ballas
		{
		    factionid = 14;
		    PlayerData[playerid][Character_Faction_Join_Request] = 14;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 14 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 15) // SV
		{
		    factionid = 15;
		    PlayerData[playerid][Character_Faction_Join_Request] = 15;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 15 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else if(IsPlayerNearFactionIcon(playerid) && PlayerAtFactionID[playerid] == 16) // Driving School
		{
		    factionid = 16;
		    PlayerData[playerid][Character_Faction_Join_Request] = 16;

		    new cquery[500];
		    mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction_join_request` = '%i' WHERE `character_name` = '%e'", PlayerData[playerid][Character_Faction_Join_Request], PlayerData[playerid][Character_Name]);
			mysql_tquery(connection, cquery);

		    format(dstring, sizeof(dstring), "- You have just applied to join the %s. Please wait to be accepted into the faction. [WARNING: This process can take days!]", FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			FactionData[factionid][Faction_Join_Requests] = FactionData[factionid][Faction_Join_Requests]+1;

		    for(new t = 0; t < MAX_PLAYERS; t++)
		    {
		        if(PlayerData[t][Character_Faction] == 16 && PlayerData[t][Character_Faction_Rank] == 6)
		        {
			    	format(dstring, sizeof(dstring), "[FACTION ALERT]:{FFFFFF} %s has just applied [in-game] to join the faction. /acceptrequest or /rejectrequest the offer to join!", PlayerData[t][Character_Name]);
					SendClientMessage(t, COLOR_RED, dstring);
				}
			}

			printf("JOINFACTION [Completed] | %s", GetName(playerid));
		}
		else return SendPlayerErrorMessage(playerid, " You are not near any faction pickup that allows this command!");
	}
	return 1;
}				
				
CMD:offlinerequests(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new query[128];
		mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `character_faction_join_request` = %i", PlayerData[playerid][Character_Faction]);
		mysql_tquery(connection, query, "OnApplicationCheck", "i", playerid);
		
		printf("OFFLINEFACTIONREQUESTS [Completed] | %s", GetName(playerid));
	}
	return 1;
}

CMD:requests(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new dstring[256];
	    new count = 0;
	    
	    format(dstring, sizeof(dstring), "---------- [FACTION REQUESTS] ----------");
     	SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    
	    for(new t = 0; t < MAX_PLAYERS; t++)
		{
	    	if(PlayerData[t][Character_Faction_Join_Request] == PlayerData[playerid][Character_Faction])
		    {
		        format(dstring, sizeof(dstring), "{FFFFFF}Player ID: %i | Name: %s | Current Faction: %s", t, PlayerData[t][Character_Name],PlayerData[t][Character_Faction]);
		        SendClientMessage(playerid, COLOR_YELLOW, dstring);
		        count = count++;
			}
		}
		
		if(count == 0)
		{
		    format(dstring, sizeof(dstring), "{FFFFFF}There are no online players with any faction requests at this time!"); // BUG this displays when there are faction joining requests
     		SendClientMessage(playerid, COLOR_YELLOW, dstring);
		}
		
		printf("FACTIONREQUESTS [Completed] | %s", GetName(playerid));
	}
	return 1;
}

CMD:acceptrequest(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new targetid, factionid;
	    new dstring[256];
	    
	    if(sscanf(params, "i", targetid))
		{
		    SendPlayerTipMessage(playerid, " /acceptrequest [playerid]");
		}
		else
  		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot accept yourself into the faction!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
  		    if(PlayerData[targetid][Character_Faction_Join_Request] == PlayerData[playerid][Character_Faction])
  		    {
				factionid = PlayerData[playerid][Character_Faction];

	  		    PlayerData[targetid][Character_Faction_Join_Request] = 0;
	  		    PlayerData[targetid][Character_Faction] = factionid;
	  		    PlayerData[targetid][Character_Faction_Rank] = 1;

	  		    new cquery[2000];
	   			mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction` = '%i', `character_faction_rank` = '1', `character_faction_join_request` = '0' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Faction], PlayerData[targetid][Character_Name]);
				mysql_tquery(connection, cquery);

	  		    FactionData[factionid][Faction_Join_Requests] --;

			    format(dstring, sizeof(dstring), "- You have just been accepted into faction %s!", FactionData[factionid][Faction_Name]);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} You have just hired %s into the faction %s!", GetName(targetid), FactionData[factionid][Faction_Name]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} %s has just been hired into the %s!", GetName(targetid), FactionData[factionid][Faction_Name]);
				SendFactionOOCMessage(factionid, COLOR_LIME, dstring);

				printf("ACCEPTREQUEST [Completed] | %s", GetName(playerid));
			}
			else SendPlayerErrorMessage(playerid, " This player does not have an application with your faction!");
  		}
	}
	return 1;
}

CMD:rejectrequest(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new targetid, factionid;
	    new dstring[256];

	    if(sscanf(params, "i", targetid))
		{
		    SendPlayerTipMessage(playerid, " /rejectrequest [playerid]");
		}
		else
  		{
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot reject yourself from the faction!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
  		    if(PlayerData[targetid][Character_Faction_Join_Request] == PlayerData[playerid][Character_Faction])
  		    {
				factionid = PlayerData[playerid][Character_Faction];

	  		    PlayerData[targetid][Character_Faction_Join_Request] = 0;
	  		    PlayerData[targetid][Character_Faction] = 0;
	  		    PlayerData[targetid][Character_Faction_Rank] = 0;

	  		    new cquery[2000];
				mysql_format(connection, cquery, sizeof(cquery), "UPDATE `user_accounts` SET `character_faction` = '0', `character_faction_rank` = '0', `character_faction_join_request` = '0' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Name]);
				mysql_tquery(connection, cquery);

	  		    FactionData[factionid][Faction_Join_Requests] --;

			    format(dstring, sizeof(dstring), "- You have been rejected from joining faction %s!", FactionData[factionid][Faction_Name]);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "[FACTION UPDATE]:{FFFFFF} You have just rejected %s into the faction %s!", GetName(targetid), FactionData[factionid][Faction_Name]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);

				printf("REJECTREQUEST [Completed] | %s", GetName(playerid));
            }
			else SendPlayerErrorMessage(playerid, " This player does not have an application with your faction!");
  		}
	}
	return 1;
}

// BUSINESS COMMANDS

CMD:checkfunds(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new namestring[50], dstring[256];
     	new bdoorid;

		namestring = "";

		if(!IsPlayerNearBusinessDoor(playerid) || PlayerAtBusinessID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a business entry point!");

        bdoorid = PlayerAtBusinessID[playerid];
		if(bdoorid != 0 && strcmp(BusinessData[bdoorid][Business_Owner], PlayerData[playerid][Character_Name], false) != 0)
		{
		    SendPlayerErrorMessage(playerid, " You cannot check funds on a business you do not own!");
		}
		else
  		{
			format(dstring, sizeof(dstring), "- Your business %s has profit funds of $%d", BusinessData[bdoorid][Business_Name], BusinessData[bdoorid][Business_Value]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			PlayerAtBusinessID[playerid] = 0;
		}
	}
	return 1;
}

CMD:getfunds(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new money;
		new bdoorid;

	    if(sscanf(params, "i", money))
	    {
	        SendPlayerTipMessage(playerid, " /getfunds [amount]");
	    }
	    else
	    {
			if(!IsPlayerNearBusinessDoor(playerid) || PlayerAtBusinessID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a business entry point!");

	        bdoorid = PlayerAtBusinessID[playerid];
			if(bdoorid != 0 && strcmp(BusinessData[bdoorid][Business_Owner], PlayerData[playerid][Character_Name], false) != 0)
			{
			    SendPlayerErrorMessage(playerid, " You cannot check funds on a business you do not own!");
			}
			else
	  		{
				if(money < 0 || money > BusinessData[bdoorid][Business_Value]) return SendPlayerErrorMessage(playerid, " You cannot extract this amount of money from your business!");
				else
				{
			        PlayerData[playerid][Character_Money] += money;
			
					new text_value1[256];
					format(text_value1, sizeof(text_value1), "~g~~h~+$%d", money);
					GameTextForPlayer(playerid, text_value1, 3000, 1);
			
					new equery[2000];
					mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_value` = business_value - %d WHERE `business_id` = '%i' LIMIT 1", money, bdoorid);
					mysql_tquery(connection, equery);
	
			        new dstring[256];
					format(dstring, sizeof(dstring), "- You have just extracted $%d from your business into your pocket!", money);
					SendClientMessage(playerid, COLOR_ACTION, dstring);
				}
			}
			
			PlayerAtBusinessID[playerid] = 0;
	    }
	}
	return 1;
}

CMD:sellbusiness(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new namestring[50], dstring[256], equery[2000];
     	new bdoorid;

		namestring = "";

		if(!IsPlayerNearBusinessDoor(playerid) || PlayerAtBusinessID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a business entry point!");

        bdoorid = PlayerAtBusinessID[playerid];
		if(bdoorid != 0 && strcmp(BusinessData[bdoorid][Business_Owner], PlayerData[playerid][Character_Name], false) != 0)
		{
		    SendPlayerErrorMessage(playerid, " You cannot sell a business that you do not own, you can check who owns properties at the city council!");
		}
		else
  		{
		    DestroyDynamicPickup(BusinessData[bdoorid][Business_Pickup_ID_Outside]);
		    BusinessData[bdoorid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19523, 1,BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]-0.3, -1);

      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_owner` = '', `business_sold` = '0' WHERE `business_id` = '%i' LIMIT 1", bdoorid);
			mysql_tquery(connection, equery);

			BusinessData[bdoorid][Business_Owner] = namestring;
			BusinessData[bdoorid][Business_Sold] = 0;
			PlayerData[playerid][Character_Money] += BusinessData[bdoorid][Business_Price_Money];
			PlayerData[playerid][Character_Total_Businesses] --;
			
			new text_value1[256];
			format(text_value1, sizeof(text_value1), "~g~~h~+$%d", BusinessData[bdoorid][Business_Price_Money]);
			GameTextForPlayer(playerid, text_value1, 3000, 1);
			
			if(bdoorid == PlayerData[playerid][Character_Business_ID_1]) 
			{ 
				PlayerData[playerid][Character_Business_ID_1] = 0; 
				
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_businesses` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Businesses], GetName(playerid));
				mysql_tquery(connection, equery);
			}
			else if(bdoorid == PlayerData[playerid][Character_Business_ID_2]) 
			{ 
				PlayerData[playerid][Character_Business_ID_2] = 0; 
				
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_businesses` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Businesses], GetName(playerid));
				mysql_tquery(connection, equery);
			}
			
			format(dstring, sizeof(dstring), "- You have just sold your business %s for $%d", BusinessData[bdoorid][Business_Name], BusinessData[bdoorid][Business_Price_Money]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);

			PlayerAtBusinessID[playerid] = 0;
		}
	}
	return 1;
}

CMD:buybusiness(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new namestring[50], dstring[256], equery[2000];
     	new bdoorid;

		namestring = GetName(playerid);
		
  		if(!IsPlayerNearBusinessDoor(playerid) || PlayerAtBusinessID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a business entry point!");
		if(PlayerData[playerid][Character_Total_Businesses] == 1 && PlayerData[playerid][Character_VIP] == 0) return SendPlayerErrorMessage(playerid, " You cannot purchase more than 1 business in this community as a non VIP member!");
		if(PlayerData[playerid][Character_Total_Businesses] == 2 && PlayerData[playerid][Character_VIP] == 1) return SendPlayerErrorMessage(playerid, " You cannot purchase more than 2 business in this community as a VIP member!");

		bdoorid = PlayerAtBusinessID[playerid];
 	    if(bdoorid != 0 && BusinessData[bdoorid][Business_Owner] != PlayerData[playerid][Character_Name] && BusinessData[bdoorid][Business_Sold] == 1)
		{
		    SendPlayerErrorMessage(playerid, " You cannot purchase a business that someone else already owns! You can view all ownerships of properties, down at the city council!");
		}
		if(PlayerDefaultPayment[playerid] == 1)
		{
		    if(PlayerData[playerid][Character_Money] < BusinessData[bdoorid][Business_Price_Money]) return SendPlayerErrorMessage(playerid, " You do not have enough money in hand to purchase this business!");
			else
			{
				if(PlayerData[playerid][Character_Business_ID_1] == 0)
				{
					DestroyDynamicPickup(BusinessData[bdoorid][Business_Pickup_ID_Outside]);
				    BusinessData[bdoorid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]+0.1, -1);
		
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_owner` = '%e', `business_sold` = '1' WHERE `business_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], bdoorid);
					mysql_tquery(connection, equery);
		
					BusinessData[bdoorid][Business_Owner] = namestring;
					BusinessData[bdoorid][Business_Sold] = 1;
					PlayerData[playerid][Character_Money] -= BusinessData[bdoorid][Business_Price_Money];
					PlayerData[playerid][Character_Total_Businesses] ++;
					PlayerData[playerid][Character_Business_ID_1] = bdoorid;
					
					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$%d",BusinessData[bdoorid][Business_Price_Money]);
					GameTextForPlayer(playerid, text_value, 3000, 1);
						
					mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_businesses` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Businesses], GetName(playerid));
					mysql_tquery(connection, equery);
		
					format(dstring, sizeof(dstring), "- You have just purchased business %s for $%d", BusinessData[bdoorid][Business_Name], BusinessData[bdoorid][Business_Price_Money]);
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
					PlayerAtBusinessID[playerid] = 0;
				}
				else if(PlayerData[playerid][Character_Business_ID_1] != 0 && PlayerData[playerid][Character_Business_ID_2] == 0)
				{
					DestroyDynamicPickup(BusinessData[bdoorid][Business_Pickup_ID_Outside]);
				    BusinessData[bdoorid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]+0.1, -1);
		
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_owner` = '%e', `business_sold` = '1' WHERE `business_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], bdoorid);
					mysql_tquery(connection, equery);
		
					BusinessData[bdoorid][Business_Owner] = namestring;
					BusinessData[bdoorid][Business_Sold] = 1;
					PlayerData[playerid][Character_Money] -= BusinessData[bdoorid][Business_Price_Money];
					PlayerData[playerid][Character_Total_Businesses] ++;
					PlayerData[playerid][Character_Business_ID_2] = bdoorid;
					
					new text_value[256];
					format(text_value, sizeof(text_value), "~r~~h~-$%d",BusinessData[bdoorid][Business_Price_Money]);
					GameTextForPlayer(playerid, text_value, 3000, 1);
						
					mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_businesses` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Businesses], GetName(playerid));
					mysql_tquery(connection, equery);
		
					format(dstring, sizeof(dstring), "- You have just purchased business %s for $%d", BusinessData[bdoorid][Business_Name], BusinessData[bdoorid][Business_Price_Money]);
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
					PlayerAtBusinessID[playerid] = 0;
				}
			}
		}
		else if(PlayerDefaultPayment[playerid] == 2)
		{
		    if(PlayerData[playerid][Character_Coins] < BusinessData[bdoorid][Business_Price_Coins]) return SendPlayerErrorMessage(playerid, " You do not have enough coins to purchase this property!");
			else
			{
				if(PlayerData[playerid][Character_Business_ID_1] == 0)
				{
					DestroyDynamicPickup(BusinessData[bdoorid][Business_Pickup_ID_Outside]);
				    BusinessData[bdoorid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]+0.1, -1);
		
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_owner` = '%e', `business_sold` = '1' WHERE `business_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], bdoorid);
					mysql_tquery(connection, equery);
		
					BusinessData[bdoorid][Business_Owner] = namestring;
					BusinessData[bdoorid][Business_Sold] = 1;
					PlayerData[playerid][Character_Coins] -= BusinessData[bdoorid][Business_Price_Coins];
					PlayerData[playerid][Character_Business_ID_1] = bdoorid;
					PlayerData[playerid][Character_Total_Businesses] ++;
		
					mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_businesses` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Businesses], GetName(playerid));
					mysql_tquery(connection, equery);
		
					format(dstring, sizeof(dstring), "- You have just purchased business %s for %d coins", BusinessData[bdoorid][Business_Name], BusinessData[bdoorid][Business_Price_Coins]);
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
					PlayerAtBusinessID[playerid] = 0;		
				}
				else if(PlayerData[playerid][Character_Business_ID_1] != 0 && PlayerData[playerid][Character_Business_ID_2] == 0)
				{
					DestroyDynamicPickup(BusinessData[bdoorid][Business_Pickup_ID_Outside]);
				    BusinessData[bdoorid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,BusinessData[bdoorid][Business_Outside_X], BusinessData[bdoorid][Business_Outside_Y], BusinessData[bdoorid][Business_Outside_Z]+0.1, -1);
		
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_owner` = '%e', `business_sold` = '1' WHERE `business_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], bdoorid);
					mysql_tquery(connection, equery);
		
					BusinessData[bdoorid][Business_Owner] = namestring;
					BusinessData[bdoorid][Business_Sold] = 1;
					PlayerData[playerid][Character_Coins] -= BusinessData[bdoorid][Business_Price_Coins];
					PlayerData[playerid][Character_Business_ID_2] = bdoorid;
					PlayerData[playerid][Character_Total_Businesses] ++;
		
					mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_businesses` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Businesses], GetName(playerid));
					mysql_tquery(connection, equery);
		
					format(dstring, sizeof(dstring), "- You have just purchased business %s for %d coins", BusinessData[bdoorid][Business_Name], BusinessData[bdoorid][Business_Price_Coins]);
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
					PlayerAtBusinessID[playerid] = 0;
				}
			}
		}
	}
	return 1;
}

// PROPERTY COMMANDS

CMD:gate(playerid, params[])
{
    if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    if(IsPlayerInRangeOfPoint(playerid, 10, 1771.97620, -1697.25159, 13.96490) && PlayerData[playerid][Character_Faction] == 2)
	    {
	        if(LSFDGateLeftOpen == true)
	        {
	            MoveDynamicObject(LSFDGateLeft, 1771.97620, -1697.25159, 13.96490, 1, 0.00000, 0.00000, 90.00000);
	            LSFDGateLeftOpen = false;
	            
	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and closes the garage door", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	        else if(LSFDGateLeftOpen == false)
	        {
	            MoveDynamicObject(LSFDGateLeft, 1770.27625, -1697.25159, 15.50700, 1, 90.00000, 0.00000, 90.00000);
	            LSFDGateLeftOpen = true;
	            
	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and opens the garage door", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 10, 1771.98523, -1715.84265, 13.96486) && PlayerData[playerid][Character_Faction] == 2)
	    {
	        if(LSFDGateRightOpen == true)
	        {
	            MoveDynamicObject(LSFDGateRight, 1771.98523, -1715.84265, 13.96486, 1, 0.00000, 0.00000, 90.00000);
	            LSFDGateRightOpen = false;
	            
	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and closes the garage door", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	        else if(LSFDGateRightOpen == false)
	        {
	            MoveDynamicObject(LSFDGateRight, 1770.27625, -1715.84265, 15.50700, 1, 90.00000, 0.00000, 90.00000);
	            LSFDGateRightOpen = true;
	            
	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and opens the garage door", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 10, 1771.73315, -1687.46606, 14.04362) && PlayerData[playerid][Character_Faction] == 2)
	    {
	        if(LSFDGateBackOpen == true)
	        {
	            MoveDynamicObject(LSFDGateBack, 1771.73315, -1687.46606, 14.04362, 1, 0.00000, 0.00000, 270.00000);
	            LSFDGateBackOpen = false;
	            
	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and closes the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	        else if(LSFDGateBackOpen == false)
	        {
	            MoveDynamicObject(LSFDGateBack, 1767.36108, -1691.82092, 14.04360, 1, 0.0000, 0.00000, 360.00000);
	            LSFDGateBackOpen = true;
	            
	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and opens the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 15, 2073.19141, -1869.90784, 14.24228) && PlayerData[playerid][Character_Faction] == 9)
	    {
	        if(MechanicFrontGateOpen == true)
	        {
	            MoveDynamicObject(MechanicFrontGate, 2073.19141, -1869.90784, 14.24228, 2, 0.00000, 0.00000, 90.00000);
	            MechanicFrontGateOpen = false;

	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and closes the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	        else if(MechanicFrontGateOpen == false)
	        {
	            MoveDynamicObject(MechanicFrontGate, 2073.19141, -1849.89001, 14.24230, 2, 0.00000, 0.00000, 90.00000);
	            MechanicFrontGateOpen = true;

	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and opens the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 15, 1537.10388, -1451.24597, 15.92345) && PlayerData[playerid][Character_Faction] == 5)
	    {
	        if(TowGateOpen == true)
	        {
	            MoveDynamicObject(TowGate, 1537.10388, -1451.24597, 15.92345, 2, 0.00000, 0.00000, 180.00000);
	            TowGateOpen = false;

	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and closes the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	        else if(TowGateOpen == false)
	        {
	            MoveDynamicObject(TowGate, 1543.57214, -1451.24622, 15.92345, 2, 0.00000, 0.00000, 180.00000);
	            TowGateOpen = true;

	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and opens the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 15, 1361.66724, -1467.49048, 13.20197) && PlayerData[playerid][Character_Faction] == 1 || IsPlayerInRangeOfPoint(playerid, 15, 1361.66724, -1467.49048, 13.20197) && PlayerData[playerid][Character_Faction] == 5)
	    {
	        if(JunkYardGateOpen == true)
	        {
	            MoveDynamicObject(JunkYardGate, 1361.66724, -1467.49048, 13.20197, 2, 0.00000, 0.00000, 75);
	            JunkYardGateOpen = false;

	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and closes the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	        else if(JunkYardGateOpen == false)
	        {
	            MoveDynamicObject(JunkYardGate, 1363.78271, -1459.61755, 13.20197, 2, 0.00000, 0.00000, 75);
	            JunkYardGateOpen = true;

	            new string[256];
		        format(string, sizeof(string), "> %s pulls out their remote and opens the gate", GetRPName(playerid));
		   		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, string);
	        }
	    }
	}
	return 1;
}

CMD:alarm(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		if(!IsPlayerNearHouseDoor(playerid) || PlayerAtHouseID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a house front door!");
		else
		{
	     	new namestring[50], dstring[256], equery[2000], string[256];
	     	new hdoorid;
	
			namestring = "";
	
	        hdoorid = PlayerAtHouseID[playerid];
			if(hdoorid != 0 && HouseData[hdoorid][House_Owner] != PlayerData[playerid][Character_Name])
			{
			    SendPlayerErrorMessage(playerid, " You cannot alarm a property that you do not own!");
			}
			else
	  		{
			 	if(HouseData[hdoorid][House_Alarm] == 0) return SendPlayerErrorMessage(playerid, " Your house doesn't have an alarm!");
				else
				{
					if(HouseData[hdoorid][House_Alarm_Active] == 0)
					{
						mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_alarm_active` = 1 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
						mysql_tquery(connection, equery);
						
						HouseData[hdoorid][House_Alarm_Active] = 1;
			
						format(string, sizeof(string), "> %s enters in their alarm pin on the house", GetRPName(playerid));
				   		SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
				
						format(dstring, sizeof(dstring), "- You have just turned your house alarm on");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						PlayerAtHouseID[playerid] = 0;
					}
					else if(HouseData[hdoorid][House_Alarm_Active] == 1)
					{
						mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_alarm_active` = 0 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
						mysql_tquery(connection, equery);
						
						HouseData[hdoorid][House_Alarm_Active] = 0; 
						
						format(string, sizeof(string), "> %s enters in their alarm pin on the house", GetRPName(playerid));
				   		SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
			
						format(dstring, sizeof(dstring), "- You have just turned your house alarm off");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						PlayerAtHouseID[playerid] = 0;
					}
				}
			}
		}
	}
	return 1;
}

CMD:lock(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new vid;
		new Float:vPos[3];

		vid = GetClosestVehicle(playerid);
		GetVehiclePos(vid, vPos[0],vPos[1],vPos[2]);
		
		if(IsPlayerNearHouseDoor(playerid) && PlayerAtHouseID[playerid] != 0)
		{
	     	new namestring[50], equery[2000], string[256];
	     	new hdoorid;
	
			namestring = "";
			
	        hdoorid = PlayerAtHouseID[playerid];
			if(hdoorid != 0 && strcmp(HouseData[hdoorid][House_Owner], PlayerData[playerid][Character_Name], false) != 0)
			{
			    SendPlayerErrorMessage(playerid, " You cannot lock a property that you do not own!");
			}
			else
	  		{
			 	if(HouseData[hdoorid][House_Lock] == 0) return SendPlayerErrorMessage(playerid, " Your house doesn't have a lock!");
				else
				{
					if(HouseData[hdoorid][House_Lock_Active] == 0)
					{
						mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_lock_active` = 1 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
						mysql_tquery(connection, equery);
						
						HouseData[hdoorid][House_Lock_Active] = 1;
			
						format(string, sizeof(string), "> %s places their key into the hole and locks the door", GetRPName(playerid));
				   		SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
						
						PlayerAtHouseID[playerid] = 0;
					}
					else if(HouseData[hdoorid][House_Lock_Active] == 1)
					{
						mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_lock_active` = 0 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
						mysql_tquery(connection, equery);
						
						HouseData[hdoorid][House_Lock_Active] = 0; 
						
						format(string, sizeof(string), "> %s places their key into the hole and unlocks the door", GetRPName(playerid));
				   		SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
						
						PlayerAtHouseID[playerid] = 0;
					}
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, vPos[0],vPos[1],vPos[2]))
		{
	     	if(strcmp(VehicleData[vid][Vehicle_Owner], PlayerData[playerid][Character_Name], false) == 0)
			{
				if(VehicleData[vid][Vehicle_Lock] == 0) return SendPlayerErrorMessage(playerid, " You cannot lock a vehicle that doesn't have a lock!");
				else
				{
					if(VehicleData[vid][Vehicle_Lock_Status] == 0)	
					{
						new query[2000];
				        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_lock_status` = 1 WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vid][Vehicle_ID]);
			    		mysql_tquery(connection, query);
			
						VehicleData[vid][Vehicle_Lock_Status] = 1;	
						
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vid, engine, lights, alarm, true, bonnet, boot, objective);	
						
						new string[256];
						format(string, sizeof(string), "> %s locks their vehicle", GetRPName(playerid));
					   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);						
					}
					else
					{
						new query[2000];
				        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_lock_status` = 0 WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vid][Vehicle_ID]);
			    		mysql_tquery(connection, query);
			
						VehicleData[vid][Vehicle_Lock_Status] = 0;	
						
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vid, engine, lights, alarm, false, bonnet, boot, objective);
						
						new string[256];
						format(string, sizeof(string), "> %s unlocks their vehicle", GetRPName(playerid));
					   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);				
					}			
				}
			}
			else if(VehicleData[vid][Vehicle_Faction] != 0 && VehicleData[vid][Vehicle_Faction] == PlayerData[playerid][Character_Faction])
			{
				if(VehicleData[vid][Vehicle_Lock] == 0) return SendPlayerErrorMessage(playerid, " You cannot lock a vehicle that doesn't have a lock!");
				else
				{
					if(VehicleData[vid][Vehicle_Lock_Status] == 0)	
					{
						new query[2000];
				        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_lock_status` = 1 WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vid][Vehicle_ID]);
			    		mysql_tquery(connection, query);
			
						VehicleData[vid][Vehicle_Lock_Status] = 1;	
						
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vid, engine, lights, alarm, true, bonnet, boot, objective);	
						
						new string[256];
						format(string, sizeof(string), "> %s locks their vehicle", GetRPName(playerid));
					   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
											
					}
					else
					{
						new query[2000];
				        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_lock_status` = 0 WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vid][Vehicle_ID]);
			    		mysql_tquery(connection, query);
			
						VehicleData[vid][Vehicle_Lock_Status] = 0;	
						
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vid, engine, lights, alarm, false, bonnet, boot, objective);
						
						new string[256];
						format(string, sizeof(string), "> %s unlocks their vehicle", GetRPName(playerid));
					   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);			
					}			
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near a vehicle that you can lock or unlock!");
		}
		else return SendPlayerErrorMessage(playerid, " You are not near a piece of property you can lock!");
	}
	return 1;
}

CMD:installsafe(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{		
		if(IsPlayerInsideHouse(playerid) && PlayerAtHouseID[playerid] != 0)
		{
	     	new namestring[50], dstring[256], equery[2000], string[256];
	     	new hdoorid;
	
			namestring = "";
			
	        hdoorid = PlayerAtHouseID[playerid];
			if(hdoorid != 0 && strcmp(HouseData[hdoorid][House_Owner], PlayerData[playerid][Character_Name], false) != 0)
			{
			    SendPlayerErrorMessage(playerid, " You cannot install anything on a property that you do not own!");
			}
			else
	  		{
			 	if(HouseData[hdoorid][House_Inventory_Safe] == 1) return SendPlayerErrorMessage(playerid, " The house you are attempting to install a safe in a property that already has one!");
				else if(HouseData[hdoorid][House_Inventory_Safe] == 0)
				{
					if(PlayerData[playerid][Character_House_Safe] == 0) return SendPlayerErrorMessage(playerid, " You do not have a safe to place on this house, go to an electronic store to purchase one!");
					else if(PlayerData[playerid][Character_House_Safe] > 0)
					{
						mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_inventory_safe` = 1 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
						mysql_tquery(connection, equery);
						
						ApplyAnimation(playerid, "ped", "ATM", 4.0, false, false, false, false, 0);
				
						format(string, sizeof(string), "> %s has removed a safe from the box and installed it inside the home", GetRPName(playerid));
					   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
				
						format(dstring, sizeof(dstring), "- You have just installed a safe in your house");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						PlayerData[playerid][Character_House_Safe] --;
							
						HouseData[hdoorid][House_Inventory_Safe] = 1;
						
						PlayerAtHouseID[playerid] = 0;
					}
				}
			}
		}
		else return SendPlayerErrorMessage(playerid, " You are not inside one of your properties!");
	}
	return 1;
}

CMD:installlock(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{		
		if(IsPlayerNearHouseDoor(playerid) && PlayerAtHouseID[playerid] != 0)
		{
	     	new namestring[50], dstring[256], equery[2000], string[256];
	     	new hdoorid;
	
			namestring = "";
			
	        hdoorid = PlayerAtHouseID[playerid];
			if(hdoorid != 0 && strcmp(HouseData[hdoorid][House_Owner], PlayerData[playerid][Character_Name], false) != 0)
			{
			    SendPlayerErrorMessage(playerid, " You cannot install anything on a property that you do not own!");
			}
			else
	  		{
			 	if(HouseData[hdoorid][House_Lock] == 1) return SendPlayerErrorMessage(playerid, " The house you are attempting to install a lock on, already have one!");
				else if(HouseData[hdoorid][House_Lock] == 0)
				{
					if(PlayerData[playerid][Character_House_Lock] == 0) return SendPlayerErrorMessage(playerid, " You do not have a lock to place on this house, go to an electronic store to purchase one!");
					else if(PlayerData[playerid][Character_House_Lock] > 0)
					{
						mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_lock` = 1 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
						mysql_tquery(connection, equery);
						
						ApplyAnimation(playerid, "ped", "ATM", 4.0, false, false, false, false, 0);
				
						format(string, sizeof(string), "> %s has removed a lock from a box and installed it on the door", GetRPName(playerid));
					   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
				
						format(dstring, sizeof(dstring), "- You have just installed a lock on your front door");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						PlayerData[playerid][Character_House_Lock] --;
							
						HouseData[hdoorid][House_Lock] = 1;
						
						PlayerAtHouseID[playerid] = 0;
					}
				}
			}
		}
		else return SendPlayerErrorMessage(playerid, " You are not near a house of yours!");
	}
	return 1;
}

CMD:installalarm(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{		
		if(IsPlayerNearHouseDoor(playerid) && PlayerAtHouseID[playerid] != 0)
		{
	     	new namestring[50], dstring[256], equery[2000], string[256];
	     	new hdoorid;
	
			namestring = "";
			
	        hdoorid = PlayerAtHouseID[playerid];
			if(hdoorid != 0 && strcmp(HouseData[hdoorid][House_Owner], PlayerData[playerid][Character_Name], false) != 0)
			{
			    SendPlayerErrorMessage(playerid, " You cannot install anything on a property that you do not own!");
			}
			else
	  		{
			 	if(HouseData[hdoorid][House_Alarm] == 1) return SendPlayerErrorMessage(playerid, " The house you are attempting to install an alarm on, already has one!");
				else if(HouseData[hdoorid][House_Alarm] == 0)
				{
					if(PlayerData[playerid][Character_House_Alarm] == 0) return SendPlayerErrorMessage(playerid, " You do not have a alarm to place on this house, go to an electronic store to purchase one!");
					else if(PlayerData[playerid][Character_House_Alarm] > 0)
					{
						mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_alarm` = 1 WHERE `house_id` = '%i' LIMIT 1", hdoorid);
						mysql_tquery(connection, equery);
						
						ApplyAnimation(playerid, "ped", "ATM", 4.0, false, false, false, false, 0);
				
						format(string, sizeof(string), "> %s has removed an alarm from a box and installs it near the door", GetRPName(playerid));
					   	SendNearbyMessage(playerid,30.0, COLOR_PURPLE, string);
				
						format(dstring, sizeof(dstring), "- You have just installed an alarm on your house");
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
						
						PlayerData[playerid][Character_House_Alarm] --;
					
						HouseData[hdoorid][House_Alarm] = 1;
							
						PlayerAtHouseID[playerid] = 0;
					}
					else return SendPlayerErrorMessage(playerid, " You do not have an alarm to arm this house with, go to an electronic store to purchase one!");
				}
			}
		}
		else return SendPlayerErrorMessage(playerid, "  You are not near a house of yours!");
	}
	return 1;
}

CMD:sellproperty(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new namestring[50], dstring[256], dstring1[256], equery[2000];
     	new hdoorid;

		namestring = "";

		if(!IsPlayerNearHouseDoor(playerid) || PlayerAtHouseID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a house front door!");

        hdoorid = PlayerAtHouseID[playerid];
		if(hdoorid != 0 && strcmp(HouseData[hdoorid][House_Owner], PlayerData[playerid][Character_Name], false) != 0)
		{
		    SendPlayerErrorMessage(playerid, " You cannot sell a property that you do not own, you can check who owns properties at the city council!");
		}
		else
  		{
			if(HouseData[hdoorid][House_Sold] == 2)
			{
				format(dstring, sizeof(dstring), "- You have just sold your house for free because you purchased it with coins!", HouseData[hdoorid][House_Address]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
			else if(HouseData[hdoorid][House_Sold] == 1)
			{
				PlayerData[playerid][Character_Money] += HouseData[hdoorid][House_Price_Money];
				
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$%d", HouseData[hdoorid][House_Price_Money]);
				GameTextForPlayer(playerid, text_value1, 3000, 1);
	
				format(dstring1, sizeof(dstring1), "- You have just sold your house %s for $%d", HouseData[hdoorid][House_Address], HouseData[hdoorid][House_Price_Money]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring1);
			}
			
		    DestroyDynamicPickup(HouseData[hdoorid][House_Pickup_ID_Outside]);
		    HouseData[hdoorid][House_Pickup_ID_Outside] = CreateDynamicPickup(1273, 1,HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z], -1);

      		mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_owner` = '', `house_sold` = '0', `house_lock` = '0', `house_alarm` = '0', `house_lock_active` = '0', `house_alarm_active` = '0' WHERE `house_id` = '%i' LIMIT 1", hdoorid);
			mysql_tquery(connection, equery);

			HouseData[hdoorid][House_Owner] = namestring;
			HouseData[hdoorid][House_Sold] = 0;
			HouseData[hdoorid][House_Lock] = 0;
			HouseData[hdoorid][House_Lock_Active] = 0;
			HouseData[hdoorid][House_Alarm] = 0;
			HouseData[hdoorid][House_Alarm_Active] = 0;			
			
			PlayerData[playerid][Character_Total_Houses] --;

			if(hdoorid == PlayerData[playerid][Character_House_ID_1]) 
			{ 
				PlayerData[playerid][Character_House_ID_1] = 0; 
				
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_houses` = '%i', `character_house_id_1` = '0' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Houses], GetName(playerid));
				mysql_tquery(connection, equery);
			}
			else if(hdoorid == PlayerData[playerid][Character_House_ID_2]) 
			{ 
				PlayerData[playerid][Character_House_ID_2] = 0; 
				
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_houses` = '%i', `character_house_id_2` = '0' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Houses], GetName(playerid));
				mysql_tquery(connection, equery);
			}				
			
			PlayerAtHouseID[playerid] = 0;
		}
	}
	return 1;
}

CMD:buyproperty(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else
	{
     	new namestring[50], dstring[256], equery[2000];
     	new hdoorid;
     	
		namestring = GetName(playerid);
		
		if(!IsPlayerNearHouseDoor(playerid) || PlayerAtHouseID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a house front door!");
		if(PlayerData[playerid][Character_Total_Houses] == 1 && PlayerData[playerid][Character_VIP] == 0) return SendPlayerErrorMessage(playerid, " You cannot purchase more than 1 house in this community as a non VIP member!");
		if(PlayerData[playerid][Character_Total_Houses] == 2 && PlayerData[playerid][Character_VIP] == 1) return SendPlayerErrorMessage(playerid, " You cannot purchase more than 2 houses in this community as a VIP member!");
			
		hdoorid = PlayerAtHouseID[playerid];
	    if(hdoorid != 0 && HouseData[hdoorid][House_Owner] != PlayerData[playerid][Character_Name] && HouseData[hdoorid][House_Sold] > 0)
		{
		    SendPlayerErrorMessage(playerid, " You cannot purchase a property that someone else already owns! You can view all ownerships of properties, down at the city council!");
		}
		if(PlayerDefaultPayment[playerid] == 1)
		{
		    if(PlayerData[playerid][Character_Money] < HouseData[hdoorid][House_Price_Money]) return SendPlayerErrorMessage(playerid, " You do not have enough money in hand to purchase this property!");

			if(PlayerData[playerid][Character_House_ID_1] == 0)
			{
				DestroyDynamicPickup(HouseData[hdoorid][House_Pickup_ID_Outside]);
			    HouseData[hdoorid][House_Pickup_ID_Outside] = CreateDynamicPickup(1272, 1,HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z], -1);
	
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_owner` = '%e', `house_sold` = '1' WHERE `house_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], hdoorid);
				mysql_tquery(connection, equery);
	
				HouseData[hdoorid][House_Owner] = namestring;
				HouseData[hdoorid][House_Sold] = 1;
				PlayerData[playerid][Character_Money] -= HouseData[hdoorid][House_Price_Money];
				PlayerData[playerid][Character_House_ID_1] = hdoorid;
				PlayerData[playerid][Character_Total_Houses] ++;
				
				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$%d",HouseData[hdoorid][House_Price_Money]);
				GameTextForPlayer(playerid, text_value, 3000, 1);
					
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_houses` = '%i', `character_house_id_1` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Houses], hdoorid, GetName(playerid));
				mysql_tquery(connection, equery);
	
				format(dstring, sizeof(dstring), "- You have just purchased property %s for $%d", HouseData[hdoorid][House_Address], HouseData[hdoorid][House_Price_Money]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
				PlayerAtHouseID[playerid] = 0;
			}
			else if(PlayerData[playerid][Character_House_ID_1] != 0 && PlayerData[playerid][Character_House_ID_2] == 0)
			{
				DestroyDynamicPickup(HouseData[hdoorid][House_Pickup_ID_Outside]);
			    HouseData[hdoorid][House_Pickup_ID_Outside] = CreateDynamicPickup(1272, 1,HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z], -1);
	
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_owner` = '%e', `house_sold` = '1' WHERE `house_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], hdoorid);
				mysql_tquery(connection, equery);
	
				HouseData[hdoorid][House_Owner] = namestring;
				HouseData[hdoorid][House_Sold] = 1;
				PlayerData[playerid][Character_Money] -= HouseData[hdoorid][House_Price_Money];
				PlayerData[playerid][Character_House_ID_2] = hdoorid;
				PlayerData[playerid][Character_Total_Houses] ++;
				
				new text_value[256];
				format(text_value, sizeof(text_value), "~r~~h~-$%d",HouseData[hdoorid][House_Price_Money]);
				GameTextForPlayer(playerid, text_value, 3000, 1);
					
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_houses` = '%i', `character_house_id_2` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Houses], hdoorid, GetName(playerid));
				mysql_tquery(connection, equery);
	
				format(dstring, sizeof(dstring), "- You have just purchased property %s for $%d", HouseData[hdoorid][House_Address], HouseData[hdoorid][House_Price_Money]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
				PlayerAtHouseID[playerid] = 0;
			}
			else return SendPlayerErrorMessage(playerid, " You cannot own anymore properties in this community!");
		}
		else if(PlayerDefaultPayment[playerid] == 2)
		{
		    if(PlayerData[playerid][Character_Coins] < HouseData[hdoorid][House_Price_Coins]) return SendPlayerErrorMessage(playerid, " You do not have enough coins to purchase this property!");

			if(PlayerData[playerid][Character_House_ID_1] == 0)
			{
				DestroyDynamicPickup(HouseData[hdoorid][House_Pickup_ID_Outside]);
			    HouseData[hdoorid][House_Pickup_ID_Outside] = CreateDynamicPickup(1272, 1,HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z], -1);
	
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_owner` = '%e', `house_sold` = '1' WHERE `house_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], hdoorid);
				mysql_tquery(connection, equery);
	
				HouseData[hdoorid][House_Owner] = namestring;
				HouseData[hdoorid][House_Sold] = 2;
				PlayerData[playerid][Character_Coins] -= HouseData[hdoorid][House_Price_Coins];
				PlayerData[playerid][Character_House_ID_1] = hdoorid;
				PlayerData[playerid][Character_Total_Houses] ++;
					
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_houses` = '%i', `character_house_id_1` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Houses], hdoorid, GetName(playerid));
				mysql_tquery(connection, equery);
	
				format(dstring, sizeof(dstring), "- You have just purchased property %s for %d coins", HouseData[hdoorid][House_Address], HouseData[hdoorid][House_Price_Coins]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
				PlayerAtHouseID[playerid] = 0;
			}
			else if(PlayerData[playerid][Character_House_ID_1] != 0 && PlayerData[playerid][Character_House_ID_2] == 0)
			{
				DestroyDynamicPickup(HouseData[hdoorid][House_Pickup_ID_Outside]);
			    HouseData[hdoorid][House_Pickup_ID_Outside] = CreateDynamicPickup(1272, 1,HouseData[hdoorid][House_Outside_X], HouseData[hdoorid][House_Outside_Y], HouseData[hdoorid][House_Outside_Z], -1);
	
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_owner` = '%e', `house_sold` = '1' WHERE `house_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], hdoorid);
				mysql_tquery(connection, equery);
	
				HouseData[hdoorid][House_Owner] = namestring;
				HouseData[hdoorid][House_Sold] = 2;
				PlayerData[playerid][Character_Coins] -= HouseData[hdoorid][House_Price_Coins];
				PlayerData[playerid][Character_House_ID_2] = hdoorid;
				PlayerData[playerid][Character_Total_Houses] ++;
					
				mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_total_houses` = '%i', `character_house_id_2` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Total_Houses], hdoorid, GetName(playerid));
				mysql_tquery(connection, equery);
	
				format(dstring, sizeof(dstring), "- You have just purchased property %s for %d coins", HouseData[hdoorid][House_Address], HouseData[hdoorid][House_Price_Coins]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
				PlayerAtHouseID[playerid] = 0;
			}
		}
	}
	return 1;
}

CMD:sellfaction(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new namestring[50], dstring[256], dstring1[256], equery[2000];
     	new ficonid;

		namestring = "";

		if(!IsPlayerNearFactionIcon(playerid) || PlayerAtFactionID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a faction icon!");

        ficonid = PlayerAtFactionID[playerid];
		printf("[Faction Sell] %s is standing near faciton id: %d", GetName(playerid), ficonid);

        if(FactionData[ficonid][Faction_Sold] == 3) return SendPlayerErrorMessage(playerid, " You cannot sell a government owned faction!");
		if(FactionData[ficonid][Faction_Sold] == 0) return SendPlayerErrorMessage(playerid, " You cannot sell a faction that isn't owned!");
		if(ficonid != 0 && strcmp(FactionData[ficonid][Faction_Owner], PlayerData[playerid][Character_Name], false) != 0)
		{
		    return SendPlayerErrorMessage(playerid, " You cannot sell a faction that someone else owns! You can view all ownerships of factions, down at the city council!");
		}
		else
  		{
		    mysql_format(connection, equery, sizeof(equery), "UPDATE `faction_information` SET `faction_owner` = '', `faction_sold` = '0' WHERE `faction_id` = '%i' LIMIT 1", ficonid);
			mysql_tquery(connection, equery);

			FactionData[ficonid][Faction_Owner] = namestring;
			FactionData[ficonid][Faction_Sold] = 0;

			if(FactionData[ficonid][Faction_Sold] == 2)
			{
				format(dstring, sizeof(dstring), "- You have just sold faction %s for free because you bought it with coins", FactionData[ficonid][Faction_Name]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
			else if(FactionData[ficonid][Faction_Sold] == 1)
			{
			
				PlayerData[playerid][Character_Money] += FactionData[ficonid][Faction_Price_Money];
				
				new text_value1[256];
				format(text_value1, sizeof(text_value1), "~g~~h~+$%d", FactionData[ficonid][Faction_Price_Money]);
				GameTextForPlayer(playerid, text_value1, 3000, 1);
	
				format(dstring1, sizeof(dstring1), "- You have just sold faction %s for $%d", FactionData[ficonid][Faction_Name], FactionData[ficonid][Faction_Price_Money]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring1);
			}
			
			PlayerData[playerid][Character_Owns_Faction] --;
			PlayerData[playerid][Character_Faction] = 0;
			PlayerData[playerid][Character_Faction_Rank] = 0;

			mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_owns_faction` = '0', `character_faction` = '0', `character_faction_rank` = '0' WHERE `character_name` = '%e' LIMIT 1", GetName(playerid));
			mysql_tquery(connection, equery);
			
			printf("[Faction Sell] %s has just sold faction id: %d", GetName(playerid), ficonid);
			
			PlayerAtFactionID[playerid] = 0;
		}
	}
	return 1;
}

CMD:buyfaction(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
     	new namestring[50], dstring[256], equery[2000];
     	new ficonid;

		namestring = GetName(playerid);

  		if(!IsPlayerNearFactionIcon(playerid) || PlayerAtFactionID[playerid] == 0) return SendPlayerErrorMessage(playerid, " You are not standing near a faction icon!");

		ficonid = PlayerAtFactionID[playerid];
		printf("[Faction Buy] %s is standing near faciton id: %d", GetName(playerid), ficonid);
			
		if(FactionData[ficonid][Faction_Sold] == 3) return SendPlayerErrorMessage(playerid, " You cannot purchase a government owned faction!");
		if(PlayerData[playerid][Character_Faction] > 0) return SendPlayerErrorMessage(playerid, " You cannot buy a faction while working for one, use /quitfaction!");
		if(FactionData[ficonid][Faction_Sold] == 1 || FactionData[ficonid][Faction_Sold] == 2) return SendPlayerErrorMessage(playerid, " You cannot purchase a faction that is already owned!");
		if(PlayerData[playerid][Character_Owns_Faction] > 0) return SendPlayerErrorMessage(playerid, " You cannot own more than one faction!");

		if(PlayerDefaultPayment[playerid] == 1)
		{
		    if(PlayerData[playerid][Character_Money] < FactionData[ficonid][Faction_Price_Money]) return SendPlayerErrorMessage(playerid, " You do not have enough money in hand to purchase this faction!");

     		mysql_format(connection, equery, sizeof(equery), "UPDATE `faction_information` SET `faction_owner` = '%e', `faction_sold` = '1' WHERE `faction_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], ficonid);
			mysql_tquery(connection, equery);

			FactionData[ficonid][Faction_Owner] = namestring;
			FactionData[ficonid][Faction_Sold] = 1;

			PlayerData[playerid][Character_Money] -= FactionData[ficonid][Faction_Price_Money];
			
			new text_value[256];
			format(text_value, sizeof(text_value), "~r~~h~-$%d",FactionData[ficonid][Faction_Price_Money]);
			GameTextForPlayer(playerid, text_value, 3000, 1);

			format(dstring, sizeof(dstring), "- You have just purchased faction %s for $%d", FactionData[ficonid][Faction_Name], FactionData[ficonid][Faction_Price_Money]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			PlayerData[playerid][Character_Owns_Faction] ++;
			PlayerData[playerid][Character_Faction] = ficonid;
			PlayerData[playerid][Character_Faction_Rank] = 6;

			mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_owns_faction` = '%i', `character_faction` = '%i', `character_faction_rank` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Owns_Faction], PlayerData[playerid][Character_Faction], PlayerData[playerid][Character_Faction_Rank], GetName(playerid));
			mysql_tquery(connection, equery);
				
			printf("[Faction Buy] %s has just purhcased faction id: %d", GetName(playerid), ficonid);

			PlayerAtFactionID[playerid] = 0;
		}
		else if(PlayerDefaultPayment[playerid] == 2)
		{
		    if(PlayerData[playerid][Character_Coins] < FactionData[ficonid][Faction_Price_Coins]) return SendPlayerErrorMessage(playerid, " You do not have enough coins to purchase this faction!");

			mysql_format(connection, equery, sizeof(equery), "UPDATE `faction_information` SET `faction_owner` = '%e', `faction_sold` = '1' WHERE `faction_id` = '%i' LIMIT 1", PlayerData[playerid][Character_Name], ficonid);
			mysql_tquery(connection, equery);

			FactionData[ficonid][Faction_Owner] = namestring;
			FactionData[ficonid][Faction_Sold] = 2;

			PlayerData[playerid][Character_Coins] -= FactionData[ficonid][Faction_Price_Coins];

			format(dstring, sizeof(dstring), "- You have just purchased faction %s for %d coins", FactionData[ficonid][Faction_Name], FactionData[ficonid][Faction_Price_Coins]);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
			PlayerData[playerid][Character_Owns_Faction] ++;
			PlayerData[playerid][Character_Faction] = ficonid;
			PlayerData[playerid][Character_Faction_Rank] = 6;

			mysql_format(connection, equery, sizeof(equery), "UPDATE `user_accounts` SET `character_owns_faction` = '%i', `character_faction` = '%i', `character_faction_rank` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[playerid][Character_Owns_Faction], PlayerData[playerid][Character_Faction], PlayerData[playerid][Character_Faction_Rank], GetName(playerid));
			mysql_tquery(connection, equery);
				
			printf("[Faction Buy] %s has just purhcased faction id: %d", GetName(playerid), ficonid);
			PlayerAtFactionID[playerid] = 0;
		}
	}
	return 1;
}


CMD:VIPLockerUse(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
			if(IsPlayerInRangeOfPoint(playerid, 4.0, -2653.3381,1408.3373,906.2771))
			{
				if(VIPLockerUse[playerid] > 0) return SendPlayerErrorMessage(playerid, " You have utilised the VIP locker recently, please wait %d seconds before using it again!", VIPLockerUse[playerid]);
				else if(PlayerData[playerid][Character_VIP] == 1 && VIPLockerUse[playerid] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_LOCKER_VIP, DIALOG_STYLE_TABLIST, "Open Roleplay - V.I.P Menu", "Full Armour\t5 Coins\nFull Health\t10 Coins\nWeapon - Bat\t2 Coins\nWeapon - Deagle\t12 Coins\nWeapon - Shotgun\t25 Coins", "Select", "Close");			
				}
			}
			else return SendPlayerErrorMessage(playerid, " You are not near a locker point!");
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:coins(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
			if(PerkUse[playerid] > 0) return SendPlayerErrorMessage(playerid, " You have used the perk option recently, you must wait 30 minutes before using it again!");
			else
			{
				if(PlayerData[playerid][Character_VIP] == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t5 Coins\n2. Reduce Admin Jail Time\t10 Coins\n3. Change Weather\t20 Coins\n4. Remove Weapon Ban\t30 Coins\n5. Remove Faction Ban\t30 Coins\n6. Purchase 30 Day VIP\t500 Coins\n7. Create Custom Faction\t1000 Coins", "Select", "Close");			
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_COINS_PERKS, DIALOG_STYLE_TABLIST, "Open Roleplay - Coins Perks","1. Reduce RP Jail Time\t3 Coins\n2. Reduce Admin Jail Time\t6 Coins\n3. Change Weather\t12 Coins\n4. Remove Weapon Ban\t25 Coins\n5. Remove Faction Ban\t25 Coins\n6. Extend VIP By 30 Days\t300 Coins\n7. Create Custom Faction\t800 Coins\n8. Add Vehicle Slot (+1)\t200 Coins\n9. Add House Slot (+1)\t350 Coins", "Select", "Close");			
				}
			}
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:cityhelp(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerLogged[playerid])
	    {
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, 708.7531,392.6225,1023.5939)) return SendPlayerErrorMessage(playerid, " You are not near the city hall help desk!");
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CITY_HELP, DIALOG_STYLE_TABLIST, "Open Roleplay - City Hall Helpdesk","1. Obtain Weapon License\t$15,000", "Select", "Close");			
			}
	    }
	    else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

/* -------------- START OF VIP COMMANDS ---------------------- */

CMD:redeem(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Character_Registered] == 1)
	{
	    new amessage[156];
		if(sscanf(params, "s[156]", amessage))
		{
		    SendPlayerTipMessage(playerid, " /redeem [code]");
		}
		else
		{			
			new query[128];
			mysql_format(connection, query, sizeof(query), "SELECT * FROM `redeem_information` WHERE `code_number` = '%s' AND `code_activated` = 0", amessage);
			mysql_tquery(connection, query, "OnRedeemCheck", "i", playerid);
			
			printf("VIP Command: Redeem | Name: %s | Code Used: %s", GetName(playerid), amessage);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:vchat(playerid, params[]) return cmd_vipchat(playerid, params);
CMD:vipchat(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Character_VIP] == 1)
	{
	    new amessage[156];
		if(sscanf(params, "s[156]", amessage))
		{
		    SendPlayerTipMessage(playerid, " /vipchat [message]");
		}
		else
		{			
			new dstring[156];
			format(dstring, sizeof(dstring), "[VIP Chat] %s: %s", GetName(playerid), amessage);
			SendVIPMessage(COLOR_PINK, dstring);
			
			printf("VIP Command: Vipchat | Name: %s | Message: %s", GetName(playerid), amessage);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}	

CMD:summon(playerid,params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	else
	{
	    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
		{
			new vehicleid = INVALID_VEHICLE_ID;
			for(new i = 1; i <= MAX_VEHICLES; i++)
			{
				if(VehicleData[i][Vehicle_Type] == 5 && !IsVehicleOccupied(i))
				{
					vehicleid = i;
					printf("%d", vehicleid);
					break;
				}
			}
	
			if(vehicleid == INVALID_VEHICLE_ID)
			{
				SendPlayerErrorMessage(playerid, " There is no spare admin vehicles at this time!");
				return 1;
			}
			else
			{
				new Float:x, Float:y, Float:z, dstring[250];
				GetPlayerPos(playerid, x, y, z);
				SetVehiclePos(vehicleid, x, y+2, z+3);
	
				format(dstring, sizeof(dstring), "> You have summoned an unoccupied admin vehicle (ID: %d) to your current location!", vehicleid);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
	
				printf("Staff Command: Summon | Staff Name: %s | Vehicle ID: %d", GetName(playerid), vehicleid);
			}
		}
		else if(PlayerData[playerid][Character_VIP] != 0)
		{
			new vehicleid = INVALID_VEHICLE_ID;
			for(new i = 1; i <= MAX_VEHICLES; i++)
			{
				if(VehicleData[i][Vehicle_Type] == 4 && !IsVehicleOccupied(i))
				{
					vehicleid = i;
					break;
				}
			}
	
			if(vehicleid == INVALID_VEHICLE_ID)
			{
				SendPlayerErrorMessage(playerid, " There is no spare VIP vehicles at this time!");
				return 1;
			}
			else
			{
				new Float:x, Float:y, Float:z, dstring[250];
				GetPlayerPos(playerid, x, y, z);
				SetVehiclePos(vehicleid, x, y+2, z+3);
	
				format(dstring, sizeof(dstring), "> You have summoned an unoccupied VIP vehicle (ID: %d) to your current location!", vehicleid);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
	
				printf("Staff Command: Summon | VIP Name: %s | Vehicle ID: %d", GetName(playerid), vehicleid);
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

/* -------------- START OF HELPER COMMANDS ---------------------- */
CMD:helperchat(playerid, params[]) return cmd_h(playerid, params);
CMD:h(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new amessage[156];
		if(sscanf(params, "s[156]", amessage))
		{
		    SendPlayerTipMessage(playerid, " /h(elperchat) [message]");
		}
		else
		{			
			new dstring[156];
			format(dstring, sizeof(dstring), "[Helper Chat] %s: %s", GetName(playerid), amessage);
			SendHelperMessage(COLOR_CORAL, dstring);
			
			printf("Staff Command: Helperchat | Staff Name: %s | Message: %s", GetName(playerid), amessage);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}	

CMD:gotols(playerid,params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
    {
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		
	   	SetPlayerPos(playerid, 1529.6, -1691.2, 13.3);
	   	SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		    
	   	new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just teleported to Los Santos Central Map");
		SendClientMessage(playerid, COLOR_ORANGE, dstring);
		
		printf("Staff Command: Gotols | Staff Name: %s ", GetName(playerid));
		
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}
	
CMD:trueid(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /trueid [maskid]");
	    }
	    else
	    {
			new maskid = targetid;
			new count = 0;
			
			if(!IsPlayerConnected(targetid))
			{					
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i) && HasPlayerUsedMask[i] == maskid)
		            {
		                targetid = i;
						count = 1;
		                break;
		            }
		        }
		
				if(count == 0) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			}

			new sstring[256];
		    format(sstring, sizeof(sstring), "> Mask ID: %d | Player ID: %d | Player Name: %s", maskid, targetid, GetName(targetid));
		    SendClientMessage(playerid, COLOR_YELLOW, sstring);
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:helpmetoggle(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1) 
	{
		if(HasPlayerToggledHelpMe[playerid] == 0)
		{
			HasPlayerToggledHelpMe[playerid] = 1;
			
			new dstring[256];
			format(dstring, sizeof(dstring), "> You have just toggled off the notifications for help me requests!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			printf("Staff Command: Helpmetoggle | Staff Name: %s | Off", GetName(playerid));
		}
		else if(HasPlayerToggledHelpMe[playerid] == 1)
		{
		    HasPlayerToggledHelpMe[playerid] = 0;
		    
			new dstring[256];
			format(dstring, sizeof(dstring), "> You have just toggled on the notifications for help me requests!");
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			printf("Staff Command: Helpmetoggle | Staff Name: %s | On", GetName(playerid));
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:nudge(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /nudge [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
	        new Float:x, Float:y, Float:z, Float:dx, Float:dy, Float:angleRad;
	        GetPlayerPos(targetid, x, y, z);

	        new Float:angle;
	        GetPlayerFacingAngle(targetid, angle);

	        angleRad = angle * PI / 180.0;

	        dx = 3 * floatsin(angleRad); 
	        dy = 3 * floatcos(angleRad);

	        SetPlayerPos(targetid, x + dx, y + dy, z);

			new dstring[256];
			format(dstring, sizeof(dstring), "> A staff member has just nudged you!");
            SendClientMessage(targetid, COLOR_YELLOW, dstring);

            format(dstring, sizeof(dstring), "> You have just nuged %s!", GetName(targetid));
            SendClientMessage(playerid, COLOR_YELLOW, dstring);

			printf("Staff Command: Nudge | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:slap(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /slap [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
	        new Float:x, Float:y, Float:z;
	        GetPlayerPos(targetid, x, y, z);

	        new Float:angle;
	        GetPlayerFacingAngle(targetid, angle);

	        SetPlayerPos(targetid, x, y, z + 5);

			new dstring[256];
			format(dstring, sizeof(dstring), "> A staff member has just slapped you!");
            SendClientMessage(targetid, COLOR_YELLOW, dstring);

            format(dstring, sizeof(dstring), "> You have just slapped %s!", GetName(targetid));
            SendClientMessage(playerid, COLOR_YELLOW, dstring);

			printf("Staff Command: Slap | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:freeze(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /freeze [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
			TogglePlayerControllable(targetid, false);
			
			new dstring[256];
		    format(dstring, sizeof(dstring), "> You have been frozen by staff member [%s], please wait for communication", GetName(playerid));
		    SendClientMessage(targetid, COLOR_YELLOW, dstring);

			new sstring[256];
		    format(sstring, sizeof(sstring), "> You have just frozen player [%s], please make contact with them via /pm", GetName(targetid));
		    SendClientMessage(playerid, COLOR_YELLOW, sstring);
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /unfreeze [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
			TogglePlayerControllable(targetid, true);
			
			new dstring[256];
		    format(dstring, sizeof(dstring), "> You have been unfrozen by staff member [%s]", GetName(playerid));
		    SendClientMessage(targetid, COLOR_YELLOW, dstring);

			new sstring[256];
		    format(sstring, sizeof(sstring), "> You have just unfrozen player [%s]", GetName(targetid));
		    SendClientMessage(playerid, COLOR_YELLOW, sstring);
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:spectate(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /spectate [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot spectate yourself!");
			
			if(IsPlayerSpectating[playerid] == 0)
			{
				IsPlayerSpectating[playerid] = 1;				
				TogglePlayerSpectating(playerid, true);
				
				GetPlayerPos(playerid, SpectateX[playerid], SpectateY[playerid], SpectateZ[playerid]);
				
				if(IsPlayerInAnyVehicle(targetid))
				{
					SetPlayerInterior(playerid, GetPlayerInterior(targetid));
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
					PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
					
					new dstring[256];
		            format(dstring, sizeof(dstring), "> You are now spectating %s's vehicle!", GetName(targetid));
		            SendClientMessage(playerid, COLOR_YELLOW, dstring);
				}
				else
				{
					SetPlayerInterior(playerid, GetPlayerInterior(targetid));
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
					PlayerSpectatePlayer(playerid, targetid);
					
					new dstring[256];
		            format(dstring, sizeof(dstring), "> You are now spectating %s!", GetName(targetid));
		            SendClientMessage(playerid, COLOR_YELLOW, dstring);
				}
				
				printf("Staff Command: Spectate | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
			else return SendPlayerErrorMessage(playerid, " You need to end your current spectate first before starting a new one!");
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:endspectate(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
	    if(IsPlayerSpectating[playerid] == 1)
		{
			IsPlayerSpectating[playerid] = 0;
				
		    TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			
			SetPlayerPos(playerid, SpectateX[playerid], SpectateY[playerid], SpectateZ[playerid]);
		   	SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		
			SpectateX[playerid] = 0.0;
			SpectateY[playerid] = 0.0;
			SpectateZ[playerid] = 0.0;
	
			new dstring[256];
	        format(dstring, sizeof(dstring), "> You have now finished spectating");
	        SendClientMessage(playerid, COLOR_YELLOW, dstring);
	
			printf("Staff Command: Endspectate | Staff Name: %s", GetName(playerid));
		}
		else return SendPlayerErrorMessage(playerid, " You are not spectating anyone at this time!");
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:playertype(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1 || PlayerData[playerid][Helper_Level] >= 1)
	{
	    new targetid, type[50];
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /playertype [targetid]");
	    }
	    else
	    {
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
			if(IsPlayerUsingClient[playerid] == true) { type = "Yes"; } else { type = "No"; }
			
			new dstring[256];
		    format(dstring, sizeof(dstring), "> Is %s using an official client? %s", GetName(targetid), type);
		    SendClientMessage(playerid, COLOR_YELLOW, dstring);
		
			printf("Staff Command: Spectate | Staff Name: %s | Player Name: %s | Player Type: %s", GetName(playerid), GetName(targetid), type);
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

/* -------------- START OF MODERATOR COMMANDS ---------------------- */

CMD:moderatorchat(playerid, params[]) return cmd_m(playerid, params);
CMD:m(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
	{
	    new amessage[156];
		if(sscanf(params, "s[156]", amessage))
		{
		    SendPlayerTipMessage(playerid, " /m(oderatorchat) [message]");
		}
		else
		{							
			new dstring[156];
			format(dstring, sizeof(dstring), "[Moderator Chat] %s: %s", GetName(playerid), amessage);
			SendModeratorMessage(COLOR_LIGHTSEAGREEN, dstring);
			
			printf("Staff Command: Moderatorchat | Staff Name: %s | Message: %s", GetName(playerid), amessage);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] > 0 || PlayerData[playerid][Moderator_Level] > 0)
	{
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	    SendPlayerServerMessage(playerid, "You have just spawned yourself a jetpack using a staff command");
	
		printf("Staff Command: Jetpack | Staff Name: %s", GetName(playerid));
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:kick(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
	{
	    new targetid, reason[50];

	    if(sscanf(params, "is[50]", targetid, reason))
		{
		    SendPlayerTipMessage(playerid, " /kick [targetid] [reason]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot kick yourself from the server, try again!"); 
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:%s has just been kicked by %s [Reason: %s]", GetName(targetid), GetName(playerid), reason);
			SendClientMessageToAll(COLOR_RED, dstring);

			SendClientMessage(targetid, COLOR_RED, "[SERVER]: {FFFFFF}You can dispute this admin action by taking a screenshot and report this on the forums!");
			
			printf("Staff Command: Kick | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			
			Kick(targetid);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:reports(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
		{
		    new query[128];
		    mysql_format(connection, query, sizeof(query), "SELECT * FROM `report_information` WHERE `report_status` = '0'");
			mysql_tquery(connection, query, "OnReportCheck", "i", playerid);
			
			printf("Staff Command: Reports | Staff Name: %s ", GetName(playerid));
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:closereport(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
		{
		    new reportid;
		    
		    if(sscanf(params, "i", reportid))
			{
			    SendPlayerTipMessage(playerid, " /closereport [reportid]");
			}
			else
			{
			    new query[128];
			    mysql_format(connection, query, sizeof(query), "SELECT * FROM `report_information` WHERE `report_id` = '%d' AND `report_status` = '0' ", reportid);
				mysql_tquery(connection, query, "OnReportCloseCheck", "i", playerid);
				
				printf("Staff Command: Closereport | Staff Name: %s", GetName(playerid));
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	}
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
	{
	    new businessid;
	    if(sscanf(params, "i", businessid))
	    {
	        SendPlayerTipMessage(playerid, " /gotobiz [business id]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
	        if(BusinessData[businessid][Business_Outside_X] == 0) return SendPlayerErrorMessage(playerid, " You cannot teleport to a business that doesn't exist!");
	        {
	        	SetPlayerPos(playerid, BusinessData[businessid][Business_Outside_X], BusinessData[businessid][Business_Outside_Y], BusinessData[businessid][Business_Outside_Z]);

		        new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have succesfully teleported to business id: %i", businessid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
				
				printf("Staff Command: Gotobiz | Staff Name: %s", GetName(playerid));
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
	{
	    new doorid;
	    if(sscanf(params, "i", doorid))
	    {
	        SendPlayerTipMessage(playerid, " /gotodoor [doorid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
	        if(DoorData[doorid][Door_Outside_X] == 0) return SendPlayerErrorMessage(playerid, " You cannot teleport to a door that doesn't exist!");
	        {
	        	SetPlayerPos(playerid, DoorData[doorid][Door_Outside_X], DoorData[doorid][Door_Outside_Y], DoorData[doorid][Door_Outside_Z]);

		        new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have succesfully teleported to door id: %i", doorid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
				
				printf("Staff Command: Gotodoor | Staff Name: %s", GetName(playerid));
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
	{
	    new carid;
	    if(sscanf(params, "i", carid))
	    {
	        SendPlayerTipMessage(playerid, " /gotocar [vehicle id]");
	    }
	    else
	    {
	        new Float:cwx2,Float:cwy2,Float:cwz2;
			GetVehiclePos(carid, cwx2, cwy2, cwz2);
			
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(carid == INVALID_VEHICLE_ID) return SendPlayerErrorMessage(playerid, " You cannot teleport to a car that doesn't exist!");
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, cwx2, cwy2, cwz2+2);
			}
			else
			{
				SetPlayerPos(playerid, cwx2, cwy2, cwz2+2);
				
				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have succesfully teleported to vehicle id: %i", carid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
				
				printf("Staff Command: Gotocar | Staff Name: %s", GetName(playerid));
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] >= 1)
	{
	    new houseid;
	    if(sscanf(params, "i", houseid))
	    {
	        SendPlayerTipMessage(playerid, " /gotohouse [houseid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
	        if(HouseData[houseid][House_Outside_X] == 0) return SendPlayerErrorMessage(playerid, " You cannot teleport to a house that doesn't exist!");
	        {
	        	SetPlayerPos(playerid, HouseData[houseid][House_Outside_X], HouseData[houseid][House_Outside_Y], HouseData[houseid][House_Outside_Z]);

		        new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have succesfully teleported to house id: %i", houseid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
				
				printf("Staff Command: Gotohouse | Staff Name: %s", GetName(playerid));
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:getplayer(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Moderator_Level] > 0 || PlayerData[playerid][Admin_Level] > 0)
	{
	    new targetid;
	    new Float:x, Float:y, Float:z;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /getplayer [playerid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot teleport to yourself!"); 
			else
			{
		        GetPlayerPos(playerid, x, y, z);
		        SetPlayerPos(targetid, x, y, z);
				SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
				SetPlayerInterior(targetid, GetPlayerInterior(playerid));
	
		        new dstring[250];
	            format(dstring, sizeof(dstring), "[ADMIN ALERT]:{FFFFFF} %s has just teleported %s to their location!", GetName(playerid), GetName(targetid));
				SendAdminMessage(COLOR_RED, dstring);
				
				printf("Staff Command: Getplayer | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:gotoplayer(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Moderator_Level] > 0 || PlayerData[playerid][Admin_Level] > 0)
	{
	    new targetid;
	    new Float:x, Float:y, Float:z;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /gotoplayer [playerid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot teleport to yourself!"); 
			else
			{
		        GetPlayerPos(targetid, x, y, z);
		        SetPlayerPos(playerid, x, y, z);
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
				SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	
		        new dstring[250];
	            format(dstring, sizeof(dstring), "[ADMIN ALERT]:{FFFFFF} %s has just teleported to %s's current location!", GetName(playerid), GetName(targetid));
				SendAdminMessage(COLOR_RED, dstring);
				
				printf("Staff Command: Gotoplayer | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

/* -------------- START OF ADMIN LEVEL 1 COMMANDS ---------------------- */
CMD:adminchat(playerid, params[]) return cmd_a(playerid, params);
CMD:a(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new amessage[156];
		if(sscanf(params, "s[156]", amessage))
		{
		    SendPlayerTipMessage(playerid, " /a(dminchat) [message]");
		}
		else
		{
			new dstring[156];
			format(dstring, sizeof(dstring), "[Admin Chat] %s: %s", GetName(playerid), amessage);
			SendAdminMessage(COLOR_RED, dstring);
			
			printf("Staff Command: Adminchat | Staff Name: %s | Message: %s", GetName(playerid), amessage);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:staffduty(playerid, params[])
{
    if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    else
    {
        if(PlayerData[playerid][Admin_Level] >= 1 || PlayerData[playerid][Moderator_Level] == 1 || PlayerData[playerid][Helper_Level] == 1)
        {
			if(IsAdminOnDuty[playerid] == 0)
			{
				IsAdminOnDuty[playerid] = 1;
				
				SendClientMessageToAll(COLOR_ORANGE, "[STAFF ALERT]:{FFFFFF} %s has just gone ON duty", GetName(playerid));
			}
			else if(IsAdminOnDuty[playerid] == 1)
			{
				IsAdminOnDuty[playerid] = 0;
				
				SendClientMessageToAll(COLOR_ORANGE, "[STAFF ALERT]:{FFFFFF} %s has just gone OFF duty", GetName(playerid));
			}
		}
		else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
   }
	return 1;
}

CMD:checkstats(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new targetid;
		if(sscanf(params, "i", targetid))
		{
		    SendPlayerTipMessage(playerid, " /checkstats [targetid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else if(targetid != INVALID_PLAYER_ID)
			{
		        new string1[500], string2[500], string3[500], string4[500], staffname[50];
				new fstring[20], frankstring[20], jstring[50], vstring[11];
				new factionid;
		
				if(PlayerData[targetid][Helper_Level] == 1) { format(staffname, sizeof(staffname), "Helper"); }
				else if(PlayerData[targetid][Moderator_Level] == 1) { format(staffname, sizeof(staffname), "Moderator"); }
				else if(PlayerData[targetid][Admin_Level] == 1) { format(staffname, sizeof(staffname), "Admin - Level 1"); }
				else if(PlayerData[targetid][Admin_Level] == 2) { format(staffname, sizeof(staffname), "Admin - Level 2"); }
				else if(PlayerData[targetid][Admin_Level] == 3) { format(staffname, sizeof(staffname), "Admin - Level 3"); }
				else if(PlayerData[targetid][Admin_Level] == 4) { format(staffname, sizeof(staffname), "Admin - Level 4"); }
				else if(PlayerData[targetid][Admin_Level] == 5) { format(staffname, sizeof(staffname), "Admin - Level 5"); }
				else if(PlayerData[targetid][Admin_Level] == 6) { format(staffname, sizeof(staffname), "Admin - Level 6"); }
	
				factionid = PlayerData[targetid][Character_Faction];
	
				if(PlayerData[targetid][Character_Faction] == 0)
				{
					fstring = "None";
				}
				else
				{
					format(fstring, sizeof(fstring), "%s", FactionData[factionid][Faction_Name]);
				}
	
				switch(PlayerData[targetid][Character_Faction_Rank])
				{
					case 0: { format(frankstring, sizeof(frankstring), "None"); }
					case 1: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_1]); }
					case 2: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_2]); }
					case 3: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_3]); }
					case 4: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_4]); }
					case 5: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_5]); }
					case 6: { format(frankstring, sizeof(frankstring), "%s", FactionData[factionid][Faction_Rank_6]); }
				}
					
				switch(PlayerData[targetid][Character_Job])
				{
					case 0: { format(jstring, sizeof(jstring), "None"); }
					case 1: { format(jstring, sizeof(jstring), "Pizza Delivery"); }
					case 2: { format(jstring, sizeof(jstring), "Garbage Collector"); }
					case 3: { format(jstring, sizeof(jstring), "Electrician"); }
				}
				
				switch(PlayerData[playerid][Character_VIP])
				{
					case 0: { format(vstring, sizeof(vstring), "No"); }
					case 1: { format(vstring, sizeof(vstring), "Yes"); }
				}
				
				new levelexp;
			
				if(PlayerData[playerid][Character_Level] == 1) { levelexp = 8; }
				else if(PlayerData[playerid][Character_Level] == 2) { levelexp = 10; }
				else if(PlayerData[playerid][Character_Level] == 3) { levelexp = 12; }
				else if(PlayerData[playerid][Character_Level] == 4) { levelexp = 14; }
				else if(PlayerData[playerid][Character_Level] == 5) { levelexp = 16; }
				else if(PlayerData[playerid][Character_Level] == 6) { levelexp = 18; }
				else if(PlayerData[playerid][Character_Level] == 7) { levelexp = 20; }
				else if(PlayerData[playerid][Character_Level] == 8) { levelexp = 22; }
				else if(PlayerData[playerid][Character_Level] == 9) { levelexp = 24; }
				else if(PlayerData[playerid][Character_Level] == 10) { levelexp = 26; }
				else if(PlayerData[playerid][Character_Level] == 11) { levelexp = 28; }
				else if(PlayerData[playerid][Character_Level] >= 12) { levelexp = 30; }
		        
				SendClientMessage(playerid, COLOR_YELLOW, "*** %s Statistics ***", GetName(targetid));
				format(string1, sizeof(string1), "Character Name: \t%s | Character Age: \t%i | Character Sex: \t%s | Character Birthplace: \t%s", PlayerData[targetid][Character_Name], PlayerData[targetid][Character_Age], PlayerData[targetid][Character_Sex], PlayerData[targetid][Character_Birthplace]);
				format(string2, sizeof(string2), "Character Level: \t%i | Character Exp: \t%i/%d | Staff Level: \t%s | Faction: \t%s | Faction Rank: \t%s ", PlayerData[targetid][Character_Level] , PlayerData[targetid][Character_Level_Exp], levelexp, staffname, fstring, frankstring);
				format(string3, sizeof(string3), "Job: \t%s | Coins: \t%i | Money: \t$%i | Bank: \t$%d | Houses: \t%d/2 | Vehicles: \t%d/2 | Businesses: \t%d/2", jstring, PlayerData[targetid][Character_Coins], PlayerData[targetid][Character_Money], PlayerData[targetid][Character_Bank_Money], PlayerData[targetid][Character_Total_Houses], PlayerData[targetid][Character_Total_Vehicles], PlayerData[targetid][Character_Total_Businesses]);
				format(string4, sizeof(string4), "Character VIP: \t%s | Character VIP Exp: \t%s", vstring, PlayerData[targetid][Character_VIP_Exp]);
		        SendClientMessage(playerid, COLOR_WHITE, string1);
				SendClientMessage(playerid, COLOR_WHITE, string2);
				SendClientMessage(playerid, COLOR_WHITE, string3);
				SendClientMessage(playerid, COLOR_WHITE, string4);
			}
	    }
	}
	return 1;
}

CMD:ban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new targetid, reason[50];

	    if(sscanf(params, "is[50]", targetid, reason))
		{
		    SendPlayerTipMessage(playerid, " /ban [targetid] [reason]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot ban yourself from the server, try again!"); 
			if(PlayerData[targetid][Character_Ban] == 1) return SendPlayerErrorMessage(playerid, " You cannot someone again who has already been hammered!"); 
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
			
			PlayerData[targetid][Character_Ban] = 1;
			
			new updatequery[2000];
			mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_ban` = 1 WHERE `character_name` = '%e' LIMIT 1", GetName(targetid));
			mysql_tquery(connection, updatequery);
			
			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]: %s has just been banned by %s [Reason: %s]", GetName(targetid), GetName(playerid), reason);
			SendClientMessageToAll(COLOR_RED, dstring);

			SendClientMessage(targetid, COLOR_RED, "[SERVER]: {FFFFFF}You can dispute this admin action by taking a screenshot and report this on the discord!");
			
			printf("Staff Command: Ban | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			
			Kick(targetid);			
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:offlineban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new targetname[50], reason[50];

	    if(sscanf(params, "s[50]s[50]", targetname, reason))
		{
		    SendPlayerTipMessage(playerid, " /offlineban [character_name] [reason]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(strcmp(targetname, PlayerData[playerid][Character_Name], false) == 0) return SendPlayerErrorMessage(playerid, " You cannot offline ban yourself!");	
			
			BanName[playerid] = targetname;	
					
			new query[128];
			mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `character_name` = '%e' AND `character_ban` = 0 LIMIT 1", targetname);
			mysql_tquery(connection, query, "OnBanCheck", "i", playerid);	
			
			printf("Staff Command: Offlineban | Staff Name: %s | Player Name: %s", GetName(playerid), targetname);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:unban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new targetname[50];

	    if(sscanf(params, "s[50]", targetname))
		{
		    SendPlayerTipMessage(playerid, " /unban [character_name]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(strcmp(targetname, PlayerData[playerid][Character_Name], false) == 0) return SendPlayerErrorMessage(playerid, " You cannot unban yourself!");			
						
			BanName[playerid] = targetname;
					
			new query[128];
			mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `character_name` = '%e' AND `character_ban` = 1 LIMIT 1", targetname);
			mysql_tquery(connection, query, "OnUnbanCheck", "i", playerid);
			
			printf("Staff Command: Gotoplayer | Staff Name: %s | Player Name: %s", GetName(playerid), targetname);
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:sendtols(playerid,params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1)
    {
		new targetid;
		
		if(sscanf(params, "i", targetid))
		{
		    SendPlayerTipMessage(playerid, " /sendtols [targetid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			
		   	SetPlayerPos(targetid, 1529.6, -1691.2, 13.3);
		   	SetPlayerInterior(targetid, 0);
		    SetPlayerVirtualWorld(targetid, 0);
			    
		   	new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just teleported to Los Santos Central Map by an Admin");
			SendClientMessage(targetid, COLOR_ORANGE, dstring);
			
			printf("Staff Command: Gotoplayer | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
		}		
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:gotopos(playerid, params[])
{
	if(PlayerData[playerid][Admin_Level] >= 1)
	{

		new Float:x, Float:y, Float:z, intid, vw;
		if(sscanf(params, "fffii", x, y, z, intid, vw))
		{
		    SendPlayerTipMessage(playerid, " /gotopos [X] [Y] [Z] [Interior ID] [Virtual World]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			
		    SetPlayerPos(playerid, x, y, z);
		    SetPlayerInterior(playerid, intid);
		    SetPlayerVirtualWorld(playerid, vw);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have succesfully teleported to location: %f, %f, %f, Interior ID: %i and VW: %i", x, y, z, intid, vw);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			printf("Staff Command: Gotopos | Staff Name: %s ", GetName(playerid));
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:rajail(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new targetid;

	    if(sscanf(params, "i", targetid))
		{
		    SendPlayerTipMessage(playerid, " /rajail [targetid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
		    if(PlayerData[targetid][Admin_Jail] == 0) return SendPlayerErrorMessage(playerid, " You cannot un admin jail someone who isn't serving a time!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
			
			new emptystring[50] = "";

			PlayerData[targetid][Admin_Jail] = 0;
			PlayerData[targetid][Admin_Jail_Time] = 0;
			PlayerData[targetid][Admin_Jail_Reason] = emptystring;
			
		    SetPlayerPos(targetid, 811.2561, -1098.2684, 25.9063);
			SetPlayerFacingAngle(targetid, 240.8300);

			SetPlayerInterior(targetid, 0);
			SetPlayerVirtualWorld(targetid, 0);

			SendClientMessage(targetid, COLOR_RED, "[SERVER]: {FFFFFF}You have been released from your admin jail sentence early! Make sure you read up on the rules!");
			
			printf("Staff Command: RemoveAdminJail | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:ajail(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new targetid;
		new minutes;
	    new reason[50];
	    
	    if(sscanf(params, "iis[50]", targetid, minutes, reason))
		{
		    SendPlayerTipMessage(playerid, " /ajail [targetid] [minutes] [reason]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
			
		    if(targetid == playerid)
		    {
		        PlayerData[playerid][Admin_Jail] = 1;
				PlayerData[playerid][Admin_Jail_Time] = minutes;
				PlayerData[playerid][Admin_Jail_Reason] = reason;

			    SetPlayerPos(playerid, 340.2295, 163.5576, 1019.9912);
				SetPlayerFacingAngle(playerid, 0.8699);

				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, playerid++);
				
				new namestring[MAX_PLAYER_NAME];
			    format(namestring, sizeof(namestring), "%s", GetName(playerid));

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]: A staff member has jailed themself. Reason: %s", reason);
				SendClientMessageToAll(COLOR_RED, dstring);

				SendClientMessage(playerid, COLOR_RED, "[SERVER]: {FFFFFF}You can dispute this admin action by taking a screenshot and report this on the forums!");
				SendClientMessage(playerid, COLOR_RED, "[SERVER]: {FFFFFF}[/time to check remain sentence]");
		    }
		    else
		    {
			    PlayerData[targetid][Admin_Jail] = 1;
				PlayerData[targetid][Admin_Jail_Time] = minutes;
				PlayerData[targetid][Admin_Jail_Reason] = reason;

			    SetPlayerPos(targetid, 340.2295, 163.5576, 1019.9912);
				SetPlayerFacingAngle(targetid, 0.8699);

				SetPlayerInterior(targetid, 3);
				SetPlayerVirtualWorld(targetid, targetid++);

				new namestring[MAX_PLAYER_NAME];
			    format(namestring, sizeof(namestring), "%s", GetName(targetid));

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]: %s has just been admin jailed for reason: %s", PlayerData[targetid][Character_Name], reason);
				SendClientMessageToAll(COLOR_RED, dstring);

				SendClientMessage(targetid, COLOR_RED, "[SERVER]: {FFFFFF}You can dispute this admin action by taking a screenshot and report this on the forums!");
				SendClientMessage(targetid, COLOR_RED, "[SERVER]: {FFFFFF}[/time to check remain sentence]");
			}
			printf("Staff Command: Adminjail | Staff Name: %s | Player Name: %s", PlayerData[targetid][Character_Name], GetName(targetid));
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:settime(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1)
	{
	    new hour;

	    if(sscanf(params, "i", hour))
	    {
	        SendPlayerTipMessage(playerid, " /settime [hour]");
		    SendPlayerTipMessage(playerid, " Hour: [0 - 24]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(hour < 1 || hour > 24) return SendPlayerErrorMessage(playerid, " You can only choose numbers between 1 - 24!");
			
			SERVER_HOUR = hour;
			SERVER_MINUTE = 00;
			SERVER_SECOND = 00;
			
			new dstring[256];
			format(dstring, sizeof(dstring), "> You have just adjusted the server time to be [%d : %d : %d]", SERVER_HOUR, SERVER_MINUTE, SERVER_SECOND);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			SendGlobalServerMessage("The server time has been updated to reflect [%d : %d : %d]", SERVER_HOUR, SERVER_MINUTE, SERVER_SECOND);
			
			printf("Staff Command: Settime | Staff Name: %s | Time Set: [%d : %d : %d]", GetName(playerid), SERVER_HOUR, SERVER_MINUTE, SERVER_SECOND);
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:setweather(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 1 || PerkWeatherMan[playerid] > 0)
	{
	    new weatherid;

	    if(sscanf(params, "i", weatherid))
	    {
	        SendPlayerTipMessage(playerid, " /setweather [weatherid]");
		    SendPlayerTipMessage(playerid, " Weather IDs: [1 - 19]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(weatherid < 1 || weatherid > 19) return SendPlayerErrorMessage(playerid, " You can only choose numbers between 1 - 19!");
			if(PerkWeatherMan[playerid] > 0)
			{
				PerkWeatherMan[playerid] --;
			}
			
			SetWeather(weatherid);
			
			new dstring[256];
			format(dstring, sizeof(dstring), "> You have just adjusted the server weather to be [%d]", weatherid);
			SendClientMessage(playerid, COLOR_YELLOW, dstring);
			
			SendGlobalServerMessage("The server weather has been updated to reflect ID [%d]", weatherid);
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

/* -------------- START OF ADMIN LEVEL 2 COMMANDS ---------------------- */
CMD:getcar(playerid,params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 2)
	{
	    new vehicleid;
		if(sscanf(params, "i", vehicleid))
		{
		    SendPlayerTipMessage(playerid, " /getcar [vehicleid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		    if(vehicleid == INVALID_VEHICLE_ID) return SendPlayerErrorMessage(playerid, " You cannot teleport a car that doesn't exist!");
		    else
		    {
				new Float:x, Float:y, Float:z, dstring[250];
				GetPlayerPos(playerid, x, y, z);

				SetVehiclePos(vehicleid, x, y, z+3);

				format(dstring, sizeof(dstring), "> You have just relocated vehicle id: %d to your current location!", vehicleid);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Getcar | Staff Name: %s", GetName(playerid));
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:unmute(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 2)
	{
	    new targetid;
		if(sscanf(params, "i", targetid))
		{
		    SendPlayerTipMessage(playerid, " /unmute [targetid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else if(IsPlayerMuted[targetid] == 0) return SendPlayerErrorMessage(playerid, " You cannot unmute someone who isn't muted!");
			else if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
		    else
		    {
			    IsPlayerMuted[targetid] = 0;

				new dstring[156];
				format(dstring, sizeof(dstring), "[SERVER]:%s has been unmuted by a server admin", GetName(targetid));
				SendClientMessageToAll(COLOR_RED, dstring);

				printf("Staff Command: Unmute | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:mute(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 2)
	{
	    new amessage[156], targetid;
		if(sscanf(params, "is[156]", targetid, amessage))
		{
		    SendPlayerTipMessage(playerid, " /mute [targetid] [reason]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		    if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else if(targetid == playerid) return SendPlayerErrorMessage(playerid, " You cannot mute yourself!");
			else if(IsPlayerMuted[targetid] == 1) return SendPlayerErrorMessage(playerid, " You cannot mute someone who is already muted!");
			else if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
		    else
		    {
			    IsPlayerMuted[targetid] = 1;

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:%s has been temp muted by a server admin. Reason: %s", GetName(targetid), amessage);
				SendClientMessageToAll(COLOR_RED, dstring);

				format(dstring, sizeof(dstring), "> If you feel that this temp mute is not justified, please report this action on our forum!");
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				printf("Staff Command: Mute | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:sethealth(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 2)
	{
	    new targetid, healthamount;
		if(sscanf(params, "ii", targetid, healthamount))
		{
		    SendPlayerTipMessage(playerid, " /sethealth [targetid] [health amount]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
			if(healthamount >= 0 && healthamount < 101)
			{
			    SetPlayerHealth(targetid, healthamount);
	
			    new dstring[256];
				format(dstring, sizeof(dstring), "> Admin has set your health amount to: %i!", healthamount);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
	
				format(dstring, sizeof(dstring), "> You have just set %s's health amount to: %i!", GetName(targetid), healthamount);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Sethealth | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
				
				if(healthamount == 0)
				{
				    IsPlayerInjured[targetid] = 1;
				}
			}
			else return SendPlayerErrorMessage(playerid, " You cannot set someones health to a ungodly number [Between 0 and 100]!");
		}
	}
	return 1;
}

/* -------------- START OF ADMIN LEVEL 3 COMMANDS ---------------------- */
CMD:avrespawn(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 3)
	{
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		
	    new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just respawned all the vehicles in the server!");
		SendClientMessage(playerid, COLOR_ORANGE, dstring);

		format(dstring, sizeof(dstring), "[SERVER]: %s has just respawned all the vehicles in the server!", GetName(playerid));
		SendClientMessageToAll(COLOR_RED, dstring);

        for (new i = 1; i < MAX_VEHICLES; i++)
		{
			if(!IsVehicleOccupied(i))
			{
		    	SetVehicleToRespawn(i);
			}
		}
		
		printf("Staff Command: Vehiclerespawn | Staff Name: %s ", GetName(playerid));
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:avrefill(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 3)
	{
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		
	    new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just refilled all the vehicles in the server!");
		SendClientMessage(playerid, COLOR_ORANGE, dstring);

		format(dstring, sizeof(dstring), "[SERVER]: %s has just refilled all the vehicles in the server!", GetName(playerid));
		SendClientMessageToAll(COLOR_RED, dstring);

		for (new i = 1; i < MAX_VEHICLES; i++)
		{
		    VehicleData[i][Vehicle_Fuel] = 100;
		}
		
		printf("Staff Command: Vehiclerefill | Staff Name: %s ", GetName(playerid));
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:setskin(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 3)
	{
	    new targetid, skinid;
		if(sscanf(params, "ii", targetid, skinid))
		{
		    SendPlayerTipMessage(playerid, " /setskin [targetid] [skinid (1 - 311)]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(skinid < 3 || skinid > 311) return SendPlayerServerMessage(playerid, " You cannot set a skin that doesn't exist");
			else
			{
			    SetPlayerSkin(targetid, skinid);
			    
			    new dstring[256];
				format(dstring, sizeof(dstring), "> Admin has set your skin id to: %i!", skinid);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
	
				format(dstring, sizeof(dstring), "> You have just set %s's skin id to: %i!", GetName(targetid), skinid);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Setskin | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
		}
	}
	return 1;
}

CMD:setarmour(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 3)
	{
	    new targetid, armouramount;
		if(sscanf(params, "ii", targetid, armouramount))
		{
		    SendPlayerTipMessage(playerid, " /setarmour [targetid] [armour amount]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
			if(armouramount >= 0 && armouramount < 101)
			{
			    SetPlayerArmour(targetid, armouramount);
	
			    new dstring[256];
				format(dstring, sizeof(dstring), "> Admin has set your armour amount to: %i!", armouramount);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
	
				format(dstring, sizeof(dstring), "> You have just set %s's armour amount to: %i!", GetName(targetid), armouramount);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Setarmour | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
			else return SendPlayerErrorMessage(playerid, " You cannot set someones armour to a ungodly number [Between 0 and 100]!");
		}
	}
	return 1;
}

CMD:perkban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 3)
	{
	    new targetid;

 	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /perkban [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(PerkViewBan[targetid] == 1) return SendPlayerErrorMessage(playerid, " You cannot perk ban someone who already is. Use /rperkban to remove it!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
			else
			{
			    PerkViewBan[targetid] = 1;
			    
	    		new dstring[256];
				format(dstring, sizeof(dstring), "> Admin has just perk banned you! If you feel this is incorrect, please report on forums or discord");
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have just perk banned %s, please make sure this is correct!", GetName(targetid));
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Perkban | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:rperkban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 3)
	{
	    new targetid;

 	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /rperkban [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(PerkViewBan[targetid] == 0) return SendPlayerErrorMessage(playerid, " You cannot remove perk ban from someone who isn't banned. Use /perkban to add it!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
			else
			{
			    PerkViewBan[targetid] = 0;
			    
	    		new dstring[256];
				format(dstring, sizeof(dstring), "> Admin has just removed the perk banned from you!");
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have just removed the perk banned from %s", GetName(targetid));
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Rperkban | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:giveweapon(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 3)
	{
	    new targetid, weaponid, ammo;

	    if(sscanf(params, "iii", targetid, weaponid, ammo))
	    {
	        SendPlayerTipMessage(playerid, " /giveweapon [targetid] [weaponid] [ammo]");
		    SendPlayerTipMessage(playerid, " Note: We only allow a few weapon ids to be given, be careful");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{				
				if(weaponid == 14)
				{
				    GivePlayerWeapon(targetid, WEAPON_FLOWER, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you flowers");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s flowers", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Flowers", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 17)
				{
				    GivePlayerWeapon(targetid, WEAPON_TEARGAS, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you tear gas");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s tear gas", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Tear Gas", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 18)
				{
				    GivePlayerWeapon(targetid, WEAPON_MOLTOV, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you molotov");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s molotov", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Molotov", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 22)
				{
				    GivePlayerWeapon(targetid, WEAPON_COLT45, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a Colt45");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a Colt45", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Colt45", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 24)
				{
				    GivePlayerWeapon(targetid, WEAPON_DEAGLE, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a Deagle");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a Deagle", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Deagle", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 25)
				{
				    GivePlayerWeapon(targetid, WEAPON_SHOTGUN, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a Shotgun");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a Shotgun", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Shotgun", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 29)
				{
				    GivePlayerWeapon(targetid, WEAPON_MP5, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a MP5");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a MP5", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | MP5", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 30)
				{
				    GivePlayerWeapon(targetid, WEAPON_AK47, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a AK47");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a AK47", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | AK47", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 31)
				{
				    GivePlayerWeapon(targetid, WEAPON_M4, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a M4");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a M4", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | M4", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 33)
				{
				    GivePlayerWeapon(targetid, WEAPON_RIFLE, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a Rifle");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a Rifle", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Rifle", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 34)
				{
				    GivePlayerWeapon(targetid, WEAPON_SNIPER, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a Sniper");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a Sniper", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Sniper", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 35 && PlayerData[playerid][Admin_Level] == 6)
				{
				    GivePlayerWeapon(targetid, WEAPON_ROCKETLAUNCHER, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a Rocket");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a Rocket", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Rocket", GetName(playerid), GetName(targetid));
				}
				else if(weaponid == 36 && PlayerData[playerid][Admin_Level] == 6)
				{
				    GivePlayerWeapon(targetid, WEAPON_HEATSEEKER, ammo);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has given you a Heat Seeker");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have given %s a Heat Seeker", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveweapon | Staff Name: %s | Player Name: %s | Heat Seeker", GetName(playerid), GetName(targetid));
				}
				else return SendPlayerErrorMessage(playerid, " This weapon ID doesn't exist or you cannot give a player this weapon!");
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:giveitem(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 3)
	{
	    new targetid, item, value;

	    if(sscanf(params, "iii", targetid, item, value))
	    {
	        SendPlayerTipMessage(playerid, " /giveitem [targetid] [item] [value]");
		    SendPlayerTipMessage(playerid, " Item Options: [1 - Rope | 2 - Lockpicks | 3 - Drugs | 4 - Cocaine | 5 - Heroin | 6 - Weed]");
			SendPlayerTipMessage(playerid, " Item Options: [7 - Food | 8 - Drinks | 9 - Hacking Device | 10 - Metal Pieces | 11 - Gun Powder | 12 - Weapon Parts]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{				
				if(item == 1)
				{
				    PlayerData[targetid][Character_Has_Rope] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_rope` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Rope], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Rope count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Rope count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Rope %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 2)
				{
				    PlayerData[targetid][Character_Has_Lockpick] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_lockpick` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Lockpick], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Lockpick count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Lockpick count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Lockpick %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 3)
				{
				    PlayerData[targetid][Character_Has_Drugs] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_drugs` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Drugs], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Drug count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Drug count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Drug %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 4)
				{
				    PlayerData[targetid][Character_Drug_Cocaine] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_drug_cocaine` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Drug_Cocaine], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Cocaine count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Cocaine count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Cocaine %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 5)
				{
				    PlayerData[targetid][Character_Drug_Heroin] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_drug_heroin` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Drug_Heroin], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Heroin count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Heroin count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Heroin %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 6)
				{
				    PlayerData[targetid][Character_Drug_Weed] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_drug_weed` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Drug_Weed], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Weed count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Weed count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Weed %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 7)
				{
				    PlayerData[targetid][Character_Has_Food] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_food` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Food], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Food count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Food count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Food %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 8)
				{
				    PlayerData[targetid][Character_Has_Drinks] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_drinks` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Drinks], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Drinks count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Drinks count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Drinks %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 9)
				{
				    PlayerData[targetid][Character_Has_Device] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_device` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Device], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Device count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Device count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Device %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 10)
				{
				    PlayerData[targetid][Character_Has_Metal] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_metal` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Metal], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Metal count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Metal count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Metal %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 11)
				{
				    PlayerData[targetid][Character_Has_Gunpowder] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_gunpowder` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Gunpowder], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Gunpowder count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Gunpowder count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Gunpowder %d", GetName(playerid), GetName(targetid), value);
				}
				else if(item == 12)
				{
				    PlayerData[targetid][Character_Has_Parts] += value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_has_parts` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Has_Parts], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has added %d to your Parts count", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have added %d to %s's Parts count", value, GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Giveitem | Staff Name: %s | Player Name: %s | Parts %d", GetName(playerid), GetName(targetid), value);
				}
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

/* -------------- START OF ADMIN LEVEL 4 COMMANDS ---------------------- */
CMD:weaponban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 4)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /weaponban [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
	        if(IsPlayerWeaponBanned[targetid] == 1) return SendPlayerErrorMessage(playerid, " You cannot weapon ban a player who already is banned - use /rweaponban to remove it!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
		 	else
		 	{
		 	    IsPlayerWeaponBanned[targetid] = 1;
		 	    ResetPlayerWeapons(targetid);
		 	    
		 	    new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:%s has been temp weapon banned by %s from using their weapons!", GetName(targetid), GetName(playerid));
				SendClientMessageToAll(COLOR_RED, dstring);
				
				printf("Staff Command: Weaponban | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
		 	}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:rweaponban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 4)
	{
	    new targetid;
	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /rweaponban [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
	        if(IsPlayerWeaponBanned[targetid] == 0) return SendPlayerErrorMessage(playerid, " You cannot remove a weapon ban against a player who isn't weapon banned!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
		 	else
		 	{
		 	    IsPlayerWeaponBanned[targetid] = 0;

		 	    new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:%s has had their temp weapon ban lifted by %s!", GetName(targetid), GetName(playerid));
				SendClientMessageToAll(COLOR_RED, dstring);
				
				printf("Staff Command: Removeweaponban | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
		 	}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:factionban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 4)
	{
	    new targetid;

 	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /factionban [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(PlayerData[targetid][Character_Faction_Ban] == 1) return SendPlayerErrorMessage(playerid, " You cannot faction ban someone who already is. Use /rfactionban to remove it!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
			else
			{
			    PlayerData[targetid][Character_Faction_Ban] = 1;
				PlayerData[targetid][Character_Faction] = 0;
				PlayerData[targetid][Character_Faction_Rank] = 0;
			    
			    new query[2000];
		        mysql_format(connection, query, sizeof(query), "UPDATE `user_accounts` SET `character_faction_ban` = '1', `character_faction` = '0', `character_faction_rank` = '0' WHERE `character_name` = '%e' LIMIT 1", GetName(targetid));
	    		mysql_tquery(connection, query);
	    		
	    		new dstring[256];
				format(dstring, sizeof(dstring), "> Admin has just faction banned you! If you feel this is incorrect, please report on forums");
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have just faction banned %s, please make sure this is correct!", GetName(targetid));
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Factionban | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:rfactionban(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 4)
	{
	    new targetid;

 	    if(sscanf(params, "i", targetid))
	    {
	        SendPlayerTipMessage(playerid, " /rfactionban [targetid]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			if(PlayerData[targetid][Character_Faction_Ban] == 0) return SendPlayerErrorMessage(playerid, " You cannot remove a faction ban from someone who doesn't have one!");
			if(PlayerData[targetid][Admin_Level] > PlayerData[playerid][Admin_Level]) return SendPlayerErrorMessage(playerid, " You cannot action this on a higher staff member!");
			else
			{
			    PlayerData[targetid][Character_Faction_Ban] = 0;

			    new query[2000];
		        mysql_format(connection, query, sizeof(query), "UPDATE `user_accounts` SET `character_faction_ban` = '0' WHERE `character_name` = '%e' LIMIT 1", GetName(targetid));
	    		mysql_tquery(connection, query);

	    		new dstring[256];
				format(dstring, sizeof(dstring), "> An admin has just removed a faction ban from your account!");
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have just removed a faction ban from %s, please make sure this is correct!", GetName(targetid));
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
				
				printf("Staff Command: Removefactionban | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
			}
		}
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:setlicense(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 4)
	{
	    new targetid, license, status;

	    if(sscanf(params, "iii", targetid, license, status))
	    {
	        SendPlayerTipMessage(playerid, " /setlicense [targetid] [license type] [status]");
		    SendPlayerTipMessage(playerid, " Licenses: [1 - Motorcycle | 2 - Car | 3 - Truck | 4 - Boat | 5 - Flying | 6 - Firearms]");
		    SendPlayerTipMessage(playerid, " Status: [1 - Issue | 2 - Revoke]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{
				printf("Staff Command: Setlicense | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
				
				if(license == 1)
				{
				    PlayerData[targetid][Character_License_Motorcycle] = status;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_motorcycle` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Motorcycle], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    if(status == 1)
				    {
                	    new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has given you a Motorcycle License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have issued a Motorcycle License to %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
					}
					else
					{
	                    new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has revoked your Motorcycle License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have revoked a Motorcycle License from %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
				    }
				}
				else if(license == 2)
				{
				    PlayerData[targetid][Character_License_Car] = status;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_car` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Car], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    if(status == 1)
				    {
                	    new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has given you a Car License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have issued a Car License to %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
         			}
					else
					{
                    	new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has revoked your Car License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have revoked a Car License from %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
		    		}
				}
				else if(license == 3)
				{
					PlayerData[targetid][Character_License_Truck] = status;
					
					new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_truck` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Truck], GetName(targetid));
    				mysql_tquery(connection, updatequery);
				    	
	    			if(status == 1)
	    			{
     					new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has given you a Truck License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have issued a Truck License to %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    			}
	    			else
	    			{
     					new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has revoked your Truck License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have revoked a Truck License from %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
	    			}
				}
				else if(license == 4)
				{
    				PlayerData[targetid][Character_License_Boat] = status;
    				
    				new updatequery[2000];
   					mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_boat` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Boat], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
    				
    				if(status == 1)
    				{
    					new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has given you a Boat License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have issued a Boat License to %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
    				}
    				else
    				{
    					new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has revoked your Boat License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have revoked a Boat License from %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
    				}
				}
				else if(license == 5)
				{
    				PlayerData[targetid][Character_License_Flying] = status;
    				
    				new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_flying` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Flying], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
   					if(status == 1)
   					{
   						new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has given you a Flying License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have issued a Flying License to %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
   					}
   					else
   					{
   						new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has revoked your Flying License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have revoked a Flying License from %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
   					}
				}
				else if(license == 6)
				{
   					PlayerData[targetid][Character_License_Firearms] = status;
   					
   					new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_license_firearms` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_License_Firearms], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
   					if(status == 1)
   					{
   						new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has given you a Firearms License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have issued a Firearms License to %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
   					}
   					else
   					{
						new dstring[256];
						format(dstring, sizeof(dstring), "> An Admin has revoked your Firearms License");
						SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
						format(dstring, sizeof(dstring), "> You have revoked a Firearms License from %s", GetName(targetid));
						SendClientMessage(playerid, COLOR_YELLOW, dstring);
					}
				}
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:setstat(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 4)
	{
	    new targetid, stat, value;

	    if(sscanf(params, "iii", targetid, stat, value))
	    {
	        SendPlayerTipMessage(playerid, " /setstat [targetid] [stat] [value]");
		    SendPlayerTipMessage(playerid, " Stat Options: [1 - Age | 2 - Sex | 3 - Level | 4 - Coins | 5 - Money]");
	    }
	    else
	    {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{				
				if(stat == 1)
				{
				    PlayerData[targetid][Character_Age] = value;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_age` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Age], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has set your Age");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have adjusted %s's Age", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Setstats | Staff Name: %s | Player Name: %s | Age", GetName(playerid), GetName(targetid));
				}
				else if(stat == 2)
				{
					new idstring[15];
					if(value == 1) 
					{ 
						format(idstring, sizeof(idstring), "Male");
					}
					else if(value == 2) 
					{ 
						format(idstring, sizeof(idstring), "Female");
					}
					
					new string[129];
					format(string, sizeof(string), "%s", idstring);
					PlayerData[playerid][Character_Sex] = string;
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_sex` = '%s' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Sex], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has set your Sex");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have adjusted %s's Sex", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Setstats | Staff Name: %s | Player Name: %s | Sex", GetName(playerid), GetName(targetid));
				}
				else if(stat == 3)
				{
				    PlayerData[targetid][Character_Level] = value;
				
					SetPlayerScore(playerid, PlayerData[playerid][Character_Level]);
				    
				    new updatequery[2000];
    				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_level` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Level], GetName(targetid));
			    	mysql_tquery(connection, updatequery);
				    	
				    new dstring[256];
					format(dstring, sizeof(dstring), "> An Admin has set your Level");
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
						
					format(dstring, sizeof(dstring), "> You have adjusted %s's Level", GetName(targetid));
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Setstats | Staff Name: %s | Player Name: %s | Level %i", GetName(playerid), GetName(targetid), value);
				}
				else if(stat == 4)
				{
					if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this stat!");
					
				    PlayerData[targetid][Character_Coins] += value;
	        
			        new dstring[256];
					format(dstring, sizeof(dstring), ">  An Admin has given you %i coins!", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
		
					format(dstring, sizeof(dstring), "> You have just given %s %i coins!", GetName(targetid), value);
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Setstats | Staff Name: %s | Player Name: %s | Coins %i", GetName(playerid), GetName(targetid), value);
				}
				else if(stat == 5)
				{
				    PlayerData[targetid][Character_Money] += value;
	        
			        new dstring[256];
					format(dstring, sizeof(dstring), ">  An Admin has given you $%i!", value);
					SendClientMessage(targetid, COLOR_YELLOW, dstring);
		
					format(dstring, sizeof(dstring), "> You have just given %s $%i!", GetName(targetid), value);
					SendClientMessage(playerid, COLOR_YELLOW, dstring);
					
					printf("Staff Command: Setstats | Staff Name: %s | Player Name: %s | Money %i", GetName(playerid), GetName(targetid), value);
				}
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:givephone(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 4)
    {
        new targetid;

        if(sscanf(params, "i", targetid))
        {
            SendPlayerTipMessage(playerid, " /givephone [targetid]");
        }
        else
        {
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			
            new dstring[256];

            SQL_PHONENUMBER_USED = 0;

            new MAX_ATTEMPTS = 3;
            for (new i = 0; i < MAX_ATTEMPTS; i++)
            {
                if(SQL_PHONENUMBER_USED == 0)
                {
                    SQL_PHONENUMBER_GENERATED = 100000 + random(900000);

                    new query[128];
				    mysql_format(connection, query, sizeof(query), "SELECT * FROM `user_accounts` WHERE `character_phonenumber` = '%i' LIMIT 1", SQL_PHONENUMBER_GENERATED);
					mysql_tquery(connection, query, "GetNextPhoneNumber");
                }
                else return 1;
            }
            printf("%d", SQL_PHONENUMBER_GENERATED);
            
            PlayerData[targetid][Character_Has_Phone] = 1;
            PlayerData[targetid][Character_Has_SimCard] = 1;
            PlayerData[targetid][Character_Phonenumber] = SQL_PHONENUMBER_GENERATED;

            format(dstring, sizeof(dstring), "> Admin has given you a phone with number (%d)!", SQL_PHONENUMBER_GENERATED);
            SendClientMessage(targetid, COLOR_YELLOW, dstring);

            format(dstring, sizeof(dstring), "> You have just given %s a phone with number (%d)!", GetName(targetid), SQL_PHONENUMBER_GENERATED);
            SendClientMessage(playerid, COLOR_YELLOW, dstring);

			printf("Staff Command: Givephone | Staff Name: %s | Player Name: %s", GetName(playerid), GetName(targetid));
        }
    }
    else
    {
        return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    }
    return 1;
}

/* -------------- START OF ADMIN LEVEL 5 COMMANDS ---------------------- */
CMD:starttornado(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 5)
	{
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		
		TornadoObject1 = CreateObject(18715, 152.57185, -1965.65540, 4.49668,   0.00000, 0.00000, 0.00000);
		TornadoObject2 = CreateObject(18715, 151.03667, -1965.95276, 19.83816,   0.00000, 0.00000, 0.00000);
		TornadoObject3 = CreateObject(18715, 149.76260, -1966.30908, 37.37214,   0.00000, 0.00000, 0.00000);
		TornadoObject4 = CreateObject(18715, 148.55931, -1967.96655, 58.22157,   0.00000, 0.00000, 0.00000);
		TornadoObject5 = CreateObject(18715, 146.91696, -1967.63281, 85.09078,   0.00000, 0.00000, 0.00000);
		TornadoObject6 = CreateObject(18715, 148.83975, -1967.02454, 124.72430,   0.00000, 0.00000, 0.00000);
		
		MoveObject(TornadoObject1, 2927.6304, -1279.1519, 4.49668, 1.0, 0.00000, 0.00000, 0.00000);
		MoveObject(TornadoObject2, 2927.6304, -1279.1519, 19.83816, 1.0, 0.00000, 0.00000, 0.00000);
		MoveObject(TornadoObject3, 2927.6304, -1279.1519, 37.37214, 1.0, 0.00000, 0.00000, 0.00000);
		MoveObject(TornadoObject4, 2927.6304, -1279.1519, 58.22157, 1.0, 0.00000, 0.00000, 0.00000);
		MoveObject(TornadoObject5, 2927.6304, -1279.1519, 85.09078, 1.0, 0.00000, 0.00000, 0.00000);
		MoveObject(TornadoObject6, 2927.6304, -1279.1519, 124.72430, 1.0, 0.00000, 0.00000, 0.00000);
		
		SendClientMessageToAll(COLOR_PINK, "[CNN NEWS]:{FFFFFF} WEATHER ALERT! TORNADO IN COMING, GET TO SHELTHER!");
		
		printf("Staff Command: Starttornado | Staff Name: %s", GetName(playerid));
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;

}

CMD:stoptornado(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] >= 5)
	{
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		
		DestroyObject(TornadoObject1);
     	DestroyObject(TornadoObject2);
     	DestroyObject(TornadoObject3);
     	DestroyObject(TornadoObject4);
		DestroyObject(TornadoObject5);
		DestroyObject(TornadoObject6);
	    
	    TornadoTimer = 0;
			
		SendClientMessageToAll(COLOR_PINK, "[CNN NEWS]:{FFFFFF} TORNADO HAS LEFT OUR CITY, LETS CHECK ON OUR NEIGHBOURS!");
		
		printf("Staff Command: Stoptornado | Staff Name: %s", GetName(playerid));
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;

}

CMD:vsetfaction(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid, factionid;
	    
	    vehicleid = GetPlayerVehicleID(playerid);
	    
		if(sscanf(params, "i", factionid))
		{
			SendPlayerTipMessage(playerid, " /vsetfaction [factionid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		    if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");

			VehicleData[vehicleid][Vehicle_Faction] = factionid;
			
            new query[2000];
	        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_faction` = '%i' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Faction], VehicleData[vehicleid][Vehicle_ID]);
    		mysql_tquery(connection, query);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just set vehicle id: %i faction to: %i!", VehicleData[vehicleid][Vehicle_ID], factionid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			printf("Staff Command: Vsetfaction | Staff Name: %s", GetName(playerid));
		}
	}
	return 1;
}

CMD:vsetjob(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid, jobid;
	    
	    vehicleid = GetPlayerVehicleID(playerid);
	    
		if(sscanf(params, "i", jobid))
		{
			SendPlayerTipMessage(playerid, " /vsetjob [jobid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		    if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");

			VehicleData[vehicleid][Vehicle_Job] = jobid;
			
            new query[2000];
	        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_job` = '%i' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Job], VehicleData[vehicleid][Vehicle_ID]);
    		mysql_tquery(connection, query);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just set vehicle id: %i job to: %i!", VehicleData[vehicleid][Vehicle_ID], jobid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			printf("Staff Command: Vsetjob | Staff Name: %s", GetName(playerid));
		}
	}
	return 1;
}

CMD:vsettype(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid, type;

	    vehicleid = GetPlayerVehicleID(playerid);

		if(sscanf(params, "i", type))
		{
			SendPlayerTipMessage(playerid, " /vsettype [0 - Reset | 1 - Public | 2 - Rental | 3 - Driving School | 4 - VIP | 5 - Admin]");
		}
		else
		{	
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		    if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");

			VehicleData[vehicleid][Vehicle_Type] = type;

            new query[2000];
	        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_type` = '%i' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Type], VehicleData[vehicleid][Vehicle_ID]);
    		mysql_tquery(connection, query);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just set vehicle id: %i type to: %i!", VehicleData[vehicleid][Vehicle_ID], type);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			printf("Staff Command: Vsettype | Staff Name: %s", GetName(playerid));
		}
	}
	return 1;
}

CMD:vremovefaction(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid;
	    vehicleid = GetPlayerVehicleID(playerid);
		
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");

        VehicleData[vehicleid][Vehicle_Faction] = 0;

        new query[2000];
	    mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_faction` = '0' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_ID]);
    	mysql_tquery(connection, query);

		new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just removed vehicle id: %i from a faction!", VehicleData[vehicleid][Vehicle_ID]);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);
		
		printf("Staff Command: Vremovefaction | Staff Name: %s", GetName(playerid));
	}
	return 1;
}

CMD:vsetowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid, targetid, ownername[50];

	    vehicleid = GetPlayerVehicleID(playerid);

		if(sscanf(params, "i", targetid))
		{
			SendPlayerTipMessage(playerid, " /vsetowner [playerid]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
		    if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");

			ownername = GetName(targetid);
			VehicleData[vehicleid][Vehicle_Owner] = ownername;

            new query[2000];
	        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_owner` = '%s' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Owner], VehicleData[vehicleid][Vehicle_ID]);
    		mysql_tquery(connection, query);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just set vehicle id: %i owner to: %s!", VehicleData[vehicleid][Vehicle_ID], ownername);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			printf("Staff Command: Vsetowner | Staff Name: %s", GetName(playerid));
		}
	}
	return 1;
}

CMD:vremoveowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid;
	    new emptystring[50] = "";

	    vehicleid = GetPlayerVehicleID(playerid);

		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");


		VehicleData[vehicleid][Vehicle_Owner] = emptystring;

        new query[2000];
        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_owner` = '' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_ID]);
   		mysql_tquery(connection, query);

		new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just removed vehicle id: %i owner!", VehicleData[vehicleid][Vehicle_ID]);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);
		
		printf("Staff Command: Vremoveowner | Staff Name: %s", GetName(playerid));
	}
	return 1;
}

CMD:vpark(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid;
	    new Float:vehx, Float:vehy, Float:vehz, Float:veha;

	    vehicleid = GetPlayerVehicleID(playerid);
	    
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");

        GetVehiclePos(vehicleid, vehx, vehy, vehz);
        GetVehicleZAngle(vehicleid, veha);
		VehicleData[vehicleid][Vehicle_Spawn_X] = vehx;
		VehicleData[vehicleid][Vehicle_Spawn_Y] = vehy;
		VehicleData[vehicleid][Vehicle_Spawn_Z] = vehz;
		VehicleData[vehicleid][Vehicle_Spawn_A] = veha;

        new query[2000];
        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_spawn_x` = '%f', `vehicle_spawn_y` = '%f', `vehicle_spawn_z` = '%f', `vehicle_spawn_a` = '%f' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_Spawn_X], VehicleData[vehicleid][Vehicle_Spawn_Y], VehicleData[vehicleid][Vehicle_Spawn_Z], VehicleData[vehicleid][Vehicle_Spawn_A], VehicleData[vehicleid][Vehicle_ID]);
   		mysql_tquery(connection, query);

		new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just admin parked vehicle id: %i!", VehicleData[vehicleid][Vehicle_ID]);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);
		
		printf("Staff Command: Vpark | Staff Name: %s", GetName(playerid));
	}
	return 1;
}

CMD:vcreate(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		if(sscanf(params, "iii", vcreatemodel[playerid], vcreatec1[playerid], vcreatec2[playerid]))
		{
			SendPlayerTipMessage(playerid, " /vcreate [model id] [color 1] [color 2]");
		}
		else
		{
			if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
			
			printf("FindNextFreeVehicle - Started");
	
		    new query[128];
		    mysql_format(connection, query, sizeof(query), "SELECT * FROM `vehicle_information` WHERE `vehicle_used` = 0 LIMIT 1");
		    mysql_tquery(connection, query, "CollectNextFreeVehicleID", "i", playerid);
		}
	}
	return 1;
}

CMD:vdelete(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new vehicleid;
	    new blankstring[50];

	    vehicleid = GetPlayerVehicleID(playerid);
		blankstring = "";
		
		if(IsAdminOnDuty[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be on duty to use this command!");
		if(vehicleid == 0) return SendPlayerErrorMessage(playerid, " You are not sitting inside a vehicle!");

        VehicleData[vehicleid][Vehicle_Faction] = 0;
		VehicleData[vehicleid][Vehicle_Owner] = blankstring;
		VehicleData[vehicleid][Vehicle_Used] = 0;
		
		VehicleData[vehicleid][Vehicle_Model] = 0;
		VehicleData[vehicleid][Vehicle_Color_1] = 0;
		VehicleData[vehicleid][Vehicle_Color_2] = 0;
		
		VehicleData[vehicleid][Vehicle_Spawn_X] = 0;
		VehicleData[vehicleid][Vehicle_Spawn_Y] = 0;
		VehicleData[vehicleid][Vehicle_Spawn_Z] = 0;
		VehicleData[vehicleid][Vehicle_Spawn_A] = 0;
		
		VehicleData[vehicleid][Vehicle_Lock] = 0;
		VehicleData[vehicleid][Vehicle_Alarm] = 0;
		VehicleData[vehicleid][Vehicle_GPS] = 0;
		VehicleData[vehicleid][Vehicle_Fuel] = 0;
		VehicleData[vehicleid][Vehicle_Type] = 0;
		VehicleData[vehicleid][Vehicle_Lock_Status] = 0;
		VehicleData[vehicleid][Vehicle_Alarm_Status] = 0;
		VehicleData[vehicleid][Vehicle_License_Plate] = 0;

        new query[2000];
        mysql_format(connection, query, sizeof(query), "UPDATE `vehicle_information` SET `vehicle_faction` = '0', `vehicle_owner` = '', `vehicle_used` = '0', `vehicle_model` = '402', `vehicle_color_1` = '0', `vehicle_color_2` = '0', `vehicle_spawn_x` = '0', `vehicle_spawn_y` = '0', `vehicle_spawn_z` = '0', `vehicle_spawn_a` = '0', `vehicle_lock` = '0', `vehicle_alarm` = '0', `vehicle_gps` = '0', `vehicle_license_plate` = '0', `vehicle_fuel` = '0', `vehicle_type` = '0' WHERE `vehicle_id` = '%i' LIMIT 1", VehicleData[vehicleid][Vehicle_ID]);
   		mysql_tquery(connection, query);
   		
   		DestroyVehicle(vehicleid);
   		
   		if(VehicleData[vehicleid][Vehicle_Used] == 0)
     	{
	    	AddStaticVehicleEx(402, 4572.7007, -1116.7518, 0.3459, 180, 1, 1, -1);

			new licenseplate[10];
			format(licenseplate, sizeof(licenseplate), "%s", VehicleData[vehicleid][Vehicle_License_Plate]);
			SetVehicleNumberPlate(vehicleid, licenseplate);
        }

		new dstring[256];
		format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just reset / deleted vehicle id: %i!", VehicleData[vehicleid][Vehicle_ID]);
		SendClientMessage(playerid, COLOR_ORANGE, dstring);
		
		printf("Staff Command: Vdelete | Staff Name: %s", GetName(playerid));
	}
	return 1;
}

CMD:vinfo(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 5) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new vehicleid;

		if(sscanf(params, "i", vehicleid))
		{
			SendPlayerTipMessage(playerid, " /vinfo [vehicleid]");
		}
		else
		{
			new dstring[256];

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The below information has been pulled directly from the database!");
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			format(dstring, sizeof(dstring), "{FFFFFF} Vehicle ID: %i | Faction ID: %i | Job ID: %i | Owner: %s", vehicleid, VehicleData[vehicleid][Vehicle_Faction], VehicleData[vehicleid][Vehicle_Job], VehicleData[vehicleid][Vehicle_Owner]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			format(dstring, sizeof(dstring), "{FFFFFF} Used: %i | Lock Type: %i | Alarm Type: %i", VehicleData[vehicleid][Vehicle_Used], VehicleData[vehicleid][Vehicle_Lock], VehicleData[vehicleid][Vehicle_Alarm]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			format(dstring, sizeof(dstring), "{FFFFFF} GPS Type: %i | Model: %i", VehicleData[vehicleid][Vehicle_GPS], VehicleData[vehicleid][Vehicle_Model]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			printf("Staff Command: Vinfo | Staff Name: %s", GetName(playerid));
		}
	}
	return 1;
}

/* -------------- START OF ADMIN LEVEL 6 COMMANDS ---------------------- */
CMD:setleader(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 6)
	{
	    new targetid, factionid;
	    
	    if(sscanf(params, "ii", targetid, factionid))
	    {
	        SendPlayerTipMessage(playerid, " /setleader [targetid] [faction id]");
		    SendPlayerTipMessage(playerid, " Factions: [1 - 20]");
	    }
	    else
	    {
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{
				PlayerData[targetid][Character_Faction] = factionid;
				PlayerData[targetid][Character_Faction_Rank] = 6;
				
				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_faction` = '%i', `character_faction_rank` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_Faction], PlayerData[targetid][Character_Faction_Rank], GetName(targetid));
				mysql_tquery(connection, updatequery);

				new dstring[256];
				format(dstring, sizeof(dstring), "> An Admin has given you leadership of: %s", FactionData[factionid][Faction_Name]);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have given %s leadership of faction: %s", GetName(targetid), FactionData[factionid][Faction_Name]);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:sethelper(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 6)
	{
	    new targetid, helperlevel;

	    if(sscanf(params, "ii", targetid, helperlevel))
	    {
	        SendPlayerTipMessage(playerid, " /sethelper [targetid] [helper level]");
		    SendPlayerTipMessage(playerid, " Levels: [0 - 1]");
	    }
	    else
	    {
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{
				PlayerData[targetid][Helper_Level] = helperlevel;

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `helper_level` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Helper_Level], GetName(targetid));
				mysql_tquery(connection, updatequery);

				new dstring[256];
				format(dstring, sizeof(dstring), "> An Admin has just set your Helper Level to: %d", helperlevel);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have given %s Helper Level: %d", GetName(targetid), helperlevel);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:setmoderator(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 6)
	{
	    new targetid, modlevel;

	    if(sscanf(params, "ii", targetid, modlevel))
	    {
	        SendPlayerTipMessage(playerid, " /setmoderator [targetid] [moderator level]");
		    SendPlayerTipMessage(playerid, " Levels: [0 - 1]");
	    }
	    else
	    {
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{
				PlayerData[targetid][Moderator_Level] = modlevel;

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `moderator_level` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Moderator_Level], GetName(targetid));
				mysql_tquery(connection, updatequery);

				new dstring[256];
				format(dstring, sizeof(dstring), "> An Admin has just set your Moderator Level to: %d", modlevel);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have given %s Moderator Level: %d", GetName(targetid), modlevel);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:setadmin(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 6)
	{
	    new targetid, adminlevel;

	    if(sscanf(params, "ii", targetid, adminlevel))
	    {
	        SendPlayerTipMessage(playerid, " /setadmin [targetid] [admin level]");
		    SendPlayerTipMessage(playerid, " Levels: [1 - 6]");
	    }
	    else
	    {
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{
				PlayerData[targetid][Admin_Level] = adminlevel;

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `admin_level` = '%i' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Admin_Level], GetName(targetid));
				mysql_tquery(connection, updatequery);

				new dstring[256];
				format(dstring, sizeof(dstring), "> An Admin has just set your Admin Level to: %d", adminlevel);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have given %s Admin Level: %d", GetName(targetid), adminlevel);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:setvip(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] >= 6)
	{
	    new targetid, viplevel, days;

	    if(sscanf(params, "iii", targetid, viplevel, days))
	    {
	        SendPlayerTipMessage(playerid, " /setvip [targetid] [vip level] [days]");
		    SendPlayerTipMessage(playerid, " Levels: [1]");
	    }
	    else
	    {
			if(!IsPlayerConnected(targetid)) return SendPlayerErrorMessage(playerid, " You cannot target a non existant player id!");
			else
			{
				PlayerData[targetid][Character_VIP] = viplevel;
				
				new year, month, day, enddate[11];
				getdate(year, month, day);

				day += days;
				
				while (day > 31 || (month == 2 && day > 28) || ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30))
				{
					if (month == 2)
					{
						if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))
						{
							if (day > 29) { day -= 29; month++; }
						}
						else
						{
							if (day > 28) { day -= 28; month++; }
						}
					}
					else if (month == 4 || month == 6 || month == 9 || month == 11)
					{
						if (day > 30) { day -= 30; month++; }
					}
					else
					{
						if (day > 31) { day -= 31; month++; }
					}

					if (month > 12) { month = 1; year++; }
				}
				
				format(enddate, sizeof(enddate), "%04d-%02d-%02d", year, month, day);
				
				PlayerData[targetid][Character_VIP_Exp] = enddate;

				new updatequery[2000];
				mysql_format(connection, updatequery, sizeof(updatequery), "UPDATE `user_accounts` SET `character_vip` = '%i', `character_vip_exp` = '%s' WHERE `character_name` = '%e' LIMIT 1", PlayerData[targetid][Character_VIP], PlayerData[targetid][Character_VIP_Exp], GetName(targetid));
				mysql_tquery(connection, updatequery);

				new dstring[256];
				format(dstring, sizeof(dstring), "> An admin has just given you VIP with an expiration date of: %s", enddate);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);

				format(dstring, sizeof(dstring), "> You have just given %s a VIP status with an expiration date of: %s", GetName(targetid), enddate);
				SendClientMessage(playerid, COLOR_YELLOW, dstring);
			}
	    }
	}
	else return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	return 1;
}

CMD:fnext(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `faction_information` WHERE `faction_name` = '' LIMIT 1");
		mysql_tquery(connection, query, "GetNextFactionValue");
	}
	return 1;
}

CMD:finfo(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new factionid;

		if(sscanf(params, "i", factionid))
		{
			SendPlayerTipMessage(playerid, " /finfo [factionid]");
		}
		else
		{
			new dstring[256];

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The below information has been pulled directly from the database!");
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			format(dstring, sizeof(dstring), "{FFFFFF} Faction ID: %i | Faction Name: %s", factionid, FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			format(dstring, sizeof(dstring), "{FFFFFF} Faction Rank 1: %s | Faction Rank 2: %s | Faction Rank 3: %s", FactionData[factionid][Faction_Rank_1], FactionData[factionid][Faction_Rank_2], FactionData[factionid][Faction_Rank_3]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			format(dstring, sizeof(dstring), "{FFFFFF} Faction Rank 4: %s | Faction Rank 5: %s | Faction Rank 6: %s", FactionData[factionid][Faction_Rank_4], FactionData[factionid][Faction_Rank_5], FactionData[factionid][Faction_Rank_6]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			format(dstring, sizeof(dstring), "{FFFFFF} Faction Joining Requests: %i", FactionData[factionid][Faction_Join_Requests]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:ficonpos(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new factionid;
		new acquery[2000], dstring[256];

		if(sscanf(params, "i", factionid))
		{
			SendPlayerTipMessage(playerid, " /ficonpos [factionid]");
		}
		else
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x,y,z);
			
			FactionData[factionid][Faction_Icon_X] = x;
	        FactionData[factionid][Faction_Icon_Y] = y;
	        FactionData[factionid][Faction_Icon_Z] = z;
	        
	        DestroyDynamicPickup(FactionData[factionid][Faction_Pickup_ID_Outside]);
		    FactionData[factionid][Faction_Pickup_ID_Outside] = CreateDynamicPickup(1239, 1,FactionData[factionid][Faction_Icon_X], FactionData[factionid][Faction_Icon_Y], FactionData[factionid][Faction_Icon_Z], -1);

			mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_icon_x` = '%f',`faction_icon_y` = '%f', `faction_icon_z` = '%f' WHERE `faction_id` = '%i' LIMIT 1", FactionData[factionid][Faction_Icon_X], FactionData[factionid][Faction_Icon_Y], FactionData[factionid][Faction_Icon_Z], factionid);
    		mysql_tquery(connection, acquery);

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Faction(ID: %i) icon position", factionid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:fsetcost(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new factionid, option1, value;

		if(sscanf(params, "iii", factionid, option1, value))
		{
			SendPlayerTipMessage(playerid, " /fsetcost [factionid] [option] [value]");
			SendPlayerTipMessage(playerid, " Options: [Coins (1) | Money (2)]");
		}
		else
		{
		    switch(option1)
		    {
		        case 1:
		        {
		            FactionData[factionid][Faction_Price_Coins] = value;

					new equery[2000];
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `faction_information` SET `faction_price_coins` = '%i' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
					mysql_tquery(connection, equery);

		            new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} Faction ID: %i has been updated with a new coin cost of: %i", factionid, value);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
		        }
		        case 2:
		        {
		            FactionData[factionid][Faction_Price_Money] = value;

					new equery[2000];
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `faction_information` SET `faction_price_money` = '%i' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
					mysql_tquery(connection, equery);

		            new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} Faction ID: %i has been updated with a new money cost of: %i", factionid, value);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
		        }
		    }
		}
	}
	return 1;
}

CMD:fsettype(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new factionid, factiontype;

		if(sscanf(params,"ii", factionid, factiontype))
		{
		    SendPlayerTipMessage(playerid, " /fsettype [factionid] [type]");
		    SendPlayerTipMessage(playerid, " Options: [Unsold (0) | Sold (1) | Government (3)]");
		}
		else
		{
		    if(factiontype < 0 || factiontype > 3) return SendPlayerErrorMessage(playerid, " You need to select a valid faction type ID that can be used in-game!");
		    else
		    {
				FactionData[factionid][Faction_Sold] = factiontype;

		    	new equery[2000];
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `faction_information` SET `faction_sold` = '%i' WHERE `faction_id` = '%i' LIMIT 1", FactionData[factionid][Faction_Sold], factionid);
				mysql_tquery(connection, equery);

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Faction ID: %i, has had the faction type changed to status: %i", factionid, FactionData[factionid][Faction_Sold]);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
			}
		}
	}
	return 1;
}

CMD:fsetowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new factionid, targetid;
		new acquery[2000], dstring[256];

		if(sscanf(params, "ii", factionid, targetid))
		{
			SendPlayerTipMessage(playerid, " /fsetowner [factionid] [targetid]");
		}
		else
		{
			FactionData[factionid][Faction_Owner] = PlayerData[targetid][Character_Name];

			mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_owner` = '%s' WHERE `faction_id` = '%i' LIMIT 1", FactionData[factionid][Faction_Owner], factionid);
    		mysql_tquery(connection, acquery);

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have set Faction(ID: %i) owner as %s", factionid, GetName(targetid));
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:fremoveowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new factionid;
		new acquery[2000], dstring[256];

		if(sscanf(params, "i", factionid))
		{
			SendPlayerTipMessage(playerid, " /fremoveowner [factionid]");
		}
		else
		{
		    new value[50];
		    value = " ";
		    
			FactionData[factionid][Faction_Owner] = value;

			mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_owner` = '%s' WHERE `faction_id` = '%i' LIMIT 1", FactionData[factionid][Faction_Owner], factionid);
    		mysql_tquery(connection, acquery);

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have removed the Faction(ID: %i) owner", factionid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}


CMD:fname(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new factionid;
		new acquery[2000], value[20], dstring[300];

		if(sscanf(params, "is[20]", factionid, value))
		{
			SendPlayerTipMessage(playerid, " /fname [factionid] [value]");
		}
		else
		{
			FactionData[factionid][Faction_Name] = value;

			mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_name` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    		mysql_tquery(connection, acquery);

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Faction(ID: %i) name to be %s", factionid, FactionData[factionid][Faction_Name]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:frankname(playerid, params[])
{
	if(PlayerData[playerid][Character_Registered] != 1) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	if(PlayerData[playerid][Character_Faction] == 0 || PlayerData[playerid][Character_Faction_Rank] != 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	else	
	{
		new factionid, option;
		new acquery[500], value[20], dstring[500];
	
		if(sscanf(params, "iis[20]", factionid, option, value))
		{
			SendPlayerTipMessage(playerid, " /frankname [factionid] [rank] [value]");
			SendPlayerTipMessage(playerid, " OPTIONS: 1 to 6 - Rank Name");
		}
		else
		{
			switch(option)
			{
			    case 1:
			    {
			        FactionData[factionid][Faction_Rank_1] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_1` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);
	
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Factions(ID: %i, Name: %s), Rank 1 name to be %s", factionid, FactionData[factionid][Faction_Rank_1]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 2:
			    {
			        FactionData[factionid][Faction_Rank_2] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_2` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Factions(ID: %i, Name: %s), Rank 2 name to be %s", factionid, FactionData[factionid][Faction_Rank_1]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 3:
			    {
			        FactionData[factionid][Faction_Rank_3] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_3` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Factions(ID: %i, Name: %s), Rank 3 name to be %s", factionid, FactionData[factionid][Faction_Rank_3]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 4:
			    {
			        FactionData[factionid][Faction_Rank_4] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_4` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Factions(ID: %i, Name: %s), Rank 4 name to be %s", factionid, FactionData[factionid][Faction_Rank_4]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 5:
			    {
			        FactionData[factionid][Faction_Rank_5] = value;

	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_5` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Factions(ID: %i, Name: %s), Rank 5 name to be %s", factionid, FactionData[factionid][Faction_Rank_5]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			    case 6:
			    {
			        FactionData[factionid][Faction_Rank_6] = value;
	
	        		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_rank_6` = '%s' WHERE `faction_id` = '%i' LIMIT 1", value, factionid);
    				mysql_tquery(connection, acquery);

					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Factions(ID: %i, Name: %s), Rank 6 name to be %s", factionid, FactionData[factionid][Faction_Rank_5]);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			    }
			}
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new factionid;
		new acquery[2000], dstring[256], value[20];

		if(sscanf(params, "iis[20]", factionid))
		{
			SendPlayerTipMessage(playerid, " /fedit [factionid]");
		}
		else
		{
		    value = "";

		    FactionData[factionid][Faction_Name] = value;

  			FactionData[factionid][Faction_Rank_1] = value;
  			FactionData[factionid][Faction_Rank_2] = value;
  			FactionData[factionid][Faction_Rank_3] = value;
  			FactionData[factionid][Faction_Rank_4] = value;
  			FactionData[factionid][Faction_Rank_5] = value;
  			FactionData[factionid][Faction_Rank_6] = value;

  			FactionData[factionid][Faction_Join_Requests] = 0;


       		mysql_format(connection, acquery, sizeof(acquery), "UPDATE `faction_information` SET `faction_name` = '', `faction_rank_1` = '', `faction_rank_2` = '', `faction_rank_3` = '', `faction_rank_4` = '', `faction_rank_5` = '', `faction_rank_6` = '' WHERE `faction_id` = '%i' LIMIT 1", factionid);
			mysql_tquery(connection, acquery);

			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have delete Faction(ID: %i) from the system!", factionid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}
    
CMD:gmx(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    SendGlobalServerMessage("Attention All Players! - The server will be restarting in 5 minutes, please end your roleplay!");
	    SetTimer("SaveImportantParameters", 240000, false);
	    SetTimer("ServerRestart", 300000, false);
	}
	return 1;
}

CMD:globalchat(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    if(isnull(params)) return SendPlayerTipMessage(playerid, " /globalchat [0 - On | 1 = Off]");

    GLOBALCHAT = strval(params);

	if(GLOBALCHAT == 0)
	{
		GLOBALCHAT = 0;
		SendGlobalServerMessage("Attention All Players! - Global chat has been turned on. Use [/g(lobal) (text)]");
	}
	else if(GLOBALCHAT == 1)
	{
	    GLOBALCHAT = 1;
	    SendGlobalServerMessage("Attention All Players! - Global chat has now been turned off");
	}
	else return SendPlayerTipMessage(playerid, " /globalchat [0 - On | 1 = Off]");
	return 1;
}

CMD:xmasevent(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    if(isnull(params)) return SendPlayerTipMessage(playerid, " /xmasevent [1 - On | 0 - Off]");

    SERVER_XMAS_EVENT = strval(params);

	if(SERVER_XMAS_EVENT == 0)
	{
		SERVER_XMAS_EVENT = 0;
		SendGlobalServerMessage("Attention All Players! - The Christmas Event has just finished, thanks for playing");
	}
	else if(SERVER_XMAS_EVENT == 1)
	{
	    SERVER_XMAS_EVENT = 1;
	    SendGlobalServerMessage("Attention All Players! - The Christmas Event has just started, go forth and find it");
	}
	else return SendPlayerTipMessage(playerid, " /xmasevent [1 - On | 0 - Off]");
	return 1;
}

CMD:xmaseventtest(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
    if(isnull(params)) return SendPlayerTipMessage(playerid, " /xmaseventtest [1 - On | 0 - Off]");

    SERVER_XMAS_EVENT_TEST = strval(params);

	if(SERVER_XMAS_EVENT_TEST == 0)
	{
		SERVER_XMAS_EVENT_TEST = 0;
		SendGlobalServerMessage("Attention All Players! - The Christmas Event has just finished, thanks for playing");
	}
	else if(SERVER_XMAS_EVENT_TEST == 1)
	{
	    SERVER_XMAS_EVENT_TEST = 1;
	    SendGlobalServerMessage("Attention All Players! - The Christmas Event has just started, go forth and find it");
	}
	else return SendPlayerTipMessage(playerid, " /xmaseventtest [1 - On | 0 - Off]");
	return 1;
}

CMD:ddnext(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `door_information` WHERE `door_outside_x` = '0' LIMIT 1");
		mysql_tquery(connection, query, "GetNextDoorValue");
	}
	return 1;
}

CMD:ddinfo(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new doorid;

		if(sscanf(params, "i", doorid))
		{
			SendPlayerTipMessage(playerid, " /ddinfo [doorid]");
		}
		else
		{
			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Door ID that you have searched for: %i, has a name of: %s", doorid, DoorData[doorid][Door_Description]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new doorid, value1[50];
		
		if(sscanf(params, "is", doorid, value1))
		{
			SendPlayerTipMessage(playerid, " /ddname [doorid] [door description]");
		}
		else
		{
		    DoorData[doorid][Door_Description] = value1;

			new query[2000];
   			mysql_format(connection, query, sizeof(query), "UPDATE `door_information` SET `door_description` = '%s' WHERE `door_id` = '%i' LIMIT 1", value1, doorid);
   			mysql_tquery(connection, query);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Door ID: %i, has had a name changed to: %s", doorid, DoorData[doorid][Door_Description]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:ddsettype(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new doorid, value1;

		if(sscanf(params, "ii", doorid, value1))
		{
			SendPlayerTipMessage(playerid, " /ddsettype [doorid] [0 = public | 1 > 20 faction id | 9999 - VIP]");
		}
		else
		{
		    DoorData[doorid][Door_Faction] = value1;

			new query[2000];
   			mysql_format(connection, query, sizeof(query), "UPDATE `door_information` SET `door_faction` = '%i' WHERE `door_id` = '%i' LIMIT 1", value1, doorid);
   			mysql_tquery(connection, query);

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Door ID: %i, has had a faction status changed to: %i", doorid, DoorData[doorid][Door_Faction]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:ddedit(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new doorid, value1;
		new Float:x, Float:y, Float:z, Float:a;
		new intid, vwid;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		
		intid = GetPlayerInterior(playerid);
		vwid = GetPlayerVirtualWorld(playerid);

		if(sscanf(params, "ii", doorid, value1))
		{
			SendPlayerTipMessage(playerid, " /ddedit [doorid] [value 1]");
			SendPlayerTipMessage(playerid, " (Note: Exterior (1), Interior (2))");
		}
		else
		{
		    switch (value1)
		    {
		        case 1:
		        {
		            DestroyDynamicPickup(DoorData[doorid][Door_Pickup_ID_Outside]);
		            
                    DoorData[doorid][Door_Outside_X] = x;
                    DoorData[doorid][Door_Outside_Y] = y;
                    DoorData[doorid][Door_Outside_Z] = z;
					DoorData[doorid][Door_Outside_A] = a;
					
                    DoorData[doorid][Door_Outside_Interior] = intid;
                    DoorData[doorid][Door_Outside_VW] = vwid;
                    
                    DoorData[doorid][Door_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,DoorData[doorid][Door_Outside_X], DoorData[doorid][Door_Outside_Y], DoorData[doorid][Door_Outside_Z]+0.3, -1);
                    
                    printf("%i", DoorData[doorid][Door_Pickup_ID_Outside]);
                    
                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `door_information` SET `door_outside_x` = '%f', `door_outside_y` = '%f', `door_outside_z` = '%f', `door_outside_interior` = '%i', `door_outside_vw` ='%i', `door_outside_a` = '%f' WHERE `door_id` = '%i' LIMIT 1", DoorData[doorid][Door_Outside_X], DoorData[doorid][Door_Outside_Y], DoorData[doorid][Door_Outside_Z], DoorData[doorid][Door_Outside_Interior], DoorData[doorid][Door_Outside_VW], DoorData[doorid][Door_Outside_A], doorid);
		    		mysql_tquery(connection, query);
		    		
		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Door ID: %i, has had the exterior location changed to your spot", doorid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
				}
				case 2:
		        {
		            DestroyDynamicPickup(DoorData[doorid][Door_Pickup_ID_Inside]);
		            
                    DoorData[doorid][Door_Inside_X] = x;
                    DoorData[doorid][Door_Inside_Y] = y;
                    DoorData[doorid][Door_Inside_Z] = z;
                    DoorData[doorid][Door_Inside_A] = a;

                    DoorData[doorid][Door_Inside_Interior] = intid;
                    DoorData[doorid][Door_Inside_VW] = vwid;
                    
                    DoorData[doorid][Door_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,DoorData[doorid][Door_Inside_X], DoorData[doorid][Door_Inside_Y], DoorData[doorid][Door_Inside_Z]+0.3, -1);
                    
                    printf("%i", DoorData[doorid][Door_Pickup_ID_Inside]);
                    
                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `door_information` SET `door_inside_x` = '%f', `door_inside_y` = '%f', `door_inside_z` = '%f', `door_inside_interior` = '%i', `door_inside_vw` ='%i', `door_inside_a` = '%f' WHERE `door_id` = '%i' LIMIT 1", DoorData[doorid][Door_Inside_X], DoorData[doorid][Door_Inside_Y], DoorData[doorid][Door_Inside_Z], DoorData[doorid][Door_Inside_Interior], DoorData[doorid][Door_Inside_VW], DoorData[doorid][Door_Inside_A], doorid);
		    		mysql_tquery(connection, query);
		    		
		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Door ID: %i, has had the interior location changed to your spot", doorid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
				}
			}
		}
	}
	return 1;
}

CMD:dddelete(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new dvalue[50];
		new ddoorid = PlayerAtDoorID[playerid];
		
		if(!IsPlayerNearDynamicDoor(playerid) || ddoorid == 0)
		{
		    SendPlayerErrorMessage(playerid, " You are not standing next to a dynamic door!");
		    return 1;
		}
		else
  		{
			DestroyDynamicPickup(DoorData[ddoorid][Door_Pickup_ID_Outside]);
			DestroyDynamicPickup(DoorData[ddoorid][Door_Pickup_ID_Inside]);

			dvalue = "";

			DoorData[ddoorid][Door_Faction] = 0;
			DoorData[ddoorid][Door_Description] = dvalue;
			DoorData[ddoorid][Door_Outside_X] = 0;
	        DoorData[ddoorid][Door_Outside_Y] = 0;
	        DoorData[ddoorid][Door_Outside_Z] = 0;
	        DoorData[ddoorid][Door_Outside_A] = 0;
	        DoorData[ddoorid][Door_Outside_Interior] = 0;
	        DoorData[ddoorid][Door_Outside_VW] = 0;
	        DoorData[ddoorid][Door_Inside_X] = 0;
	        DoorData[ddoorid][Door_Inside_Y] = 0;
	        DoorData[ddoorid][Door_Inside_Z] = 0;
	        DoorData[ddoorid][Door_Inside_A] = 0;
	        DoorData[ddoorid][Door_Inside_Interior] = 0;
	        DoorData[ddoorid][Door_Inside_VW] = 0;

			new equery[2000];
	        mysql_format(connection, equery, sizeof(equery), "UPDATE `door_information` SET `door_outside_x` = '0', `door_outside_y` = '0', `door_outside_z` = '0', `door_outside_interior` = '0', `door_outside_vw` ='0', `door_inside_x` = '0', `door_inside_y` = '0', `door_inside_z` = '0', `door_inside_interior` = '0', `door_inside_vw` ='0', `door_faction` = '0', `door_description` = '', `door_outside_a` = '0', `door_inside_a` = '0' WHERE `door_id` = '%i' LIMIT 1", ddoorid);
	  		mysql_tquery(connection, equery);

    		new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Door ID: %i has been deleted", ddoorid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			PlayerAtDoorID[playerid] = 0;
		}
	}
	return 1;
}

CMD:hnext(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `house_information` WHERE `house_outside_x` = '0' LIMIT 1");
		mysql_tquery(connection, query, "GetNextHouseValue");
	}
	return 1;
}

CMD:hinfo(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new houseid;

		if(sscanf(params, "i", houseid))
		{
			SendPlayerTipMessage(playerid, " /hinfo [houseid]");
		}
		else
		{
			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID that you have searched for %i, has address: %s and owner: %s", houseid, HouseData[houseid][House_Address], HouseData[houseid][House_Owner]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:hedit(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new houseid, value1;
		new Float:x, Float:y, Float:z, Float:a;
		new intid, vwid;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		intid = GetPlayerInterior(playerid);
		vwid = GetPlayerVirtualWorld(playerid);

		if(sscanf(params, "ii", houseid, value1))
		{
			SendPlayerTipMessage(playerid, " /hedit [houseid] [option]");
			SendPlayerTipMessage(playerid, " Options: [Exterior Door (1) | Interior Door (2) | Interior Spawn (3)]");
		}
		else
		{
		    switch (value1)
		    {
		        case 1:
		        {
		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Outside]);

                    HouseData[houseid][House_Outside_X] = x;
                    HouseData[houseid][House_Outside_Y] = y;
                    HouseData[houseid][House_Outside_Z] = z;
                    HouseData[houseid][House_Outside_A] = a;

                    HouseData[houseid][House_Outside_Interior] = intid;
                    HouseData[houseid][House_Outside_VW] = vwid;

                    if(HouseData[houseid][House_Outside_X] != 0 && HouseData[houseid][House_Sold] == 0)
			      	{
			     	    HouseData[houseid][House_Pickup_ID_Outside] = CreateDynamicPickup(1273, 1,HouseData[houseid][House_Outside_X], HouseData[houseid][House_Outside_Y], HouseData[houseid][House_Outside_Z], -1);
					}
			        if(HouseData[houseid][House_Outside_X] != 0 && HouseData[houseid][House_Sold] == 1)
			      	{
			     	    HouseData[houseid][House_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Outside_X], HouseData[houseid][House_Outside_Y], HouseData[houseid][House_Outside_Z]+0.3, -1);
					}

                    printf("%d", HouseData[houseid][House_Pickup_ID_Outside]);

                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_outside_x` = '%f', `house_outside_y` = '%f', `house_outside_z` = '%f', `house_outside_interior` = '%i', `house_outside_vw` ='%i', `house_outside_a` = '%f' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Outside_X], HouseData[houseid][House_Outside_Y], HouseData[houseid][House_Outside_Z], HouseData[houseid][House_Outside_Interior], HouseData[houseid][House_Outside_VW], HouseData[houseid][House_Outside_A], houseid);
		    		mysql_tquery(connection, query);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the exterior location changed to your spot", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
				}
				case 2:
		        {
		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = x;
                    HouseData[houseid][House_Inside_Y] = y;
                    HouseData[houseid][House_Inside_Z] = z;
                    HouseData[houseid][House_Inside_A] = a;

                    HouseData[houseid][House_Inside_Interior] = intid;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], houseid);
		    		mysql_tquery(connection, query);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior location changed to your spot", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
				}
				case 3:
		        {
                    HouseData[houseid][House_Spawn_X] = x;
                    HouseData[houseid][House_Spawn_Y] = y;
                    HouseData[houseid][House_Spawn_Z] = z;

                    HouseData[houseid][House_Spawn_Interior] = intid;
                    HouseData[houseid][House_Spawn_VW] = vwid;

                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` ='%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], houseid);
		    		mysql_tquery(connection, query);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior spawn location changed to your spot", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
				}
			}
		}
	}
	return 1;
}

CMD:hpreset(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new houseid, value1;

		if(sscanf(params, "ii", houseid, value1))
		{
			SendPlayerTipMessage(playerid, " /hpreset [houseid] [type]");
			SendPlayerTipMessage(playerid, " Options: [1 - 15]");
		}
		else
		{
		    switch (value1)
		    {
		        case 1: // Camels Toe Safehouse
		        {
		            HouseData[houseid][House_Preset_Type] = 1;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2217.9604;
                    HouseData[houseid][House_Inside_Y] = -1076.2258;
                    HouseData[houseid][House_Inside_Z] = 1050.4844;
                    HouseData[houseid][House_Inside_A] = 264.4090;

					HouseData[houseid][House_Price_Money] = 25000;
					HouseData[houseid][House_Price_Coins] = 25;

                    HouseData[houseid][House_Inside_Interior] = 1;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2205.4114;
                    HouseData[houseid][House_Spawn_Y] = -1074.4685;
                    HouseData[houseid][House_Spawn_Z] = 1050.4844;

                    HouseData[houseid][House_Spawn_Interior] = 1;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
		        case 2: // Vank Hoff Hotel
		        {
		            HouseData[houseid][House_Preset_Type] = 2;
		            
		            // ----- SET INTERIOR LOCATION ----- //
		            
		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2233.8184;
                    HouseData[houseid][House_Inside_Y] = -1114.9176;
                    HouseData[houseid][House_Inside_Z] = 1050.8828;
                    HouseData[houseid][House_Inside_A] = 5.1923;

					HouseData[houseid][House_Price_Money] = 45000;
					HouseData[houseid][House_Price_Coins] = 45;

                    HouseData[houseid][House_Inside_Interior] = 5;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
					
					// ----- SET SPAWN LOCATION ----- //
					
					HouseData[houseid][House_Spawn_X] = 2232.1914;
                    HouseData[houseid][House_Spawn_Y]  = -1104.9011;
                    HouseData[houseid][House_Spawn_Z] = 1050.8903;

                    HouseData[houseid][House_Spawn_Interior] = 5;
                    HouseData[houseid][House_Spawn_VW] = houseid;
                    
			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 3: // Safehouse 3
		        {
		            HouseData[houseid][House_Preset_Type] = 3;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2333.0979;
                    HouseData[houseid][House_Inside_Y] = -1076.7754;
                    HouseData[houseid][House_Inside_Z] = 1049.0234;
                    HouseData[houseid][House_Inside_A] = 182.7992;

					HouseData[houseid][House_Price_Money] = 55000;
					HouseData[houseid][House_Price_Coins] = 55;

                    HouseData[houseid][House_Inside_Interior] = 6;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2343.7056;
                    HouseData[houseid][House_Spawn_Y]  = -1063.2404;
                    HouseData[houseid][House_Spawn_Z] = 1049.0234;

                    HouseData[houseid][House_Spawn_Interior] = 6;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 4: // Verdant Bluffs safehouse
		        {
		            HouseData[houseid][House_Preset_Type] = 4;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2365.1892;
                    HouseData[houseid][House_Inside_Y] = -1135.0635;
                    HouseData[houseid][House_Inside_Z] = 1050.8750;
                    HouseData[houseid][House_Inside_A] = 359.6336;

					HouseData[houseid][House_Price_Money] = 96000;
					HouseData[houseid][House_Price_Coins] = 96;

                    HouseData[houseid][House_Inside_Interior] = 8;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2359.3350;
                    HouseData[houseid][House_Spawn_Y]  = -1134.4221;
                    HouseData[houseid][House_Spawn_Z] = 1050.8750;

                    HouseData[houseid][House_Spawn_Interior] = 8;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 5: // Safe House 5
		        {
		            HouseData[houseid][House_Preset_Type] = 5;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2196.7158;
                    HouseData[houseid][House_Inside_Y] = -1204.6316;
                    HouseData[houseid][House_Inside_Z] = 1049.0234;
                    HouseData[houseid][House_Inside_A] = 79.9449;

					HouseData[houseid][House_Price_Money] = 90000;
					HouseData[houseid][House_Price_Coins] = 90;

                    HouseData[houseid][House_Inside_Interior] = 6;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2199.7209;
                    HouseData[houseid][House_Spawn_Y]  = -1218.5067;
                    HouseData[houseid][House_Spawn_Z] = 1049.0234;

                    HouseData[houseid][House_Spawn_Interior] = 6;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 6: // Unknown safe house
		        {
		            HouseData[houseid][House_Preset_Type] = 6;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2317.8896;
                    HouseData[houseid][House_Inside_Y] = -1026.7435;
                    HouseData[houseid][House_Inside_Z] = 1050.2178;
                    HouseData[houseid][House_Inside_A] = 120.2141;

					HouseData[houseid][House_Price_Money] = 200000;
					HouseData[houseid][House_Price_Coins] = 200;

                    HouseData[houseid][House_Inside_Interior] = 9;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2328.4888;
                    HouseData[houseid][House_Spawn_Y]  = -1008.9063;
                    HouseData[houseid][House_Spawn_Z] = 1054.7188;

                    HouseData[houseid][House_Spawn_Interior] = 9;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 7: // Safe House 7
		        {
		            HouseData[houseid][House_Preset_Type] = 7;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2324.5269;
                    HouseData[houseid][House_Inside_Y] = -1149.2377;
                    HouseData[houseid][House_Inside_Z] = 1050.7101;
                    HouseData[houseid][House_Inside_A] = 265.5508;

					HouseData[houseid][House_Price_Money] = 250000;
					HouseData[houseid][House_Price_Coins] = 250;

                    HouseData[houseid][House_Inside_Interior] = 12;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2339.7478;
                    HouseData[houseid][House_Spawn_Y]  = -1138.0513;
                    HouseData[houseid][House_Spawn_Z] = 1054.3047;

                    HouseData[houseid][House_Spawn_Interior] = 12;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 8: // Burglary house 1
		        {
		            HouseData[houseid][House_Preset_Type] = 8;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 235.2570;
                    HouseData[houseid][House_Inside_Y] = 1187.1456;
                    HouseData[houseid][House_Inside_Z] = 1080.2578;
                    HouseData[houseid][House_Inside_A] = 176.7323;

					HouseData[houseid][House_Price_Money] = 150000;
					HouseData[houseid][House_Price_Coins] = 150;

                    HouseData[houseid][House_Inside_Interior] = 3;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 225.1508;
                    HouseData[houseid][House_Spawn_Y]  = 1194.1019;
                    HouseData[houseid][House_Spawn_Z] = 1084.4141;

                    HouseData[houseid][House_Spawn_Interior] = 3;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 9: // Burglary house 4
		        {
		            HouseData[houseid][House_Preset_Type] = 9;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 226.7229;
                    HouseData[houseid][House_Inside_Y] = 1114.3054;
                    HouseData[houseid][House_Inside_Z] = 1080.9951;
                    HouseData[houseid][House_Inside_A] = 89.1946;

					HouseData[houseid][House_Price_Money] = 165000;
					HouseData[houseid][House_Price_Coins] = 165;

                    HouseData[houseid][House_Inside_Interior] = 5;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 240.7824;
                    HouseData[houseid][House_Spawn_Y]  = 1107.6669;
                    HouseData[houseid][House_Spawn_Z] = 1085.0391;

                    HouseData[houseid][House_Spawn_Interior] = 5;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 10: // Burglary house 5
		        {
		            HouseData[houseid][House_Preset_Type] = 10;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 295.1458;
                    HouseData[houseid][House_Inside_Y] = 1472.5273;
                    HouseData[houseid][House_Inside_Z] = 1080.2578;
                    HouseData[houseid][House_Inside_A] = 176.1794;

					HouseData[houseid][House_Price_Money] = 95000;
					HouseData[houseid][House_Price_Coins] = 95;

                    HouseData[houseid][House_Inside_Interior] = 15;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 304.6297;
                    HouseData[houseid][House_Spawn_Y]  = 1475.4583;
                    HouseData[houseid][House_Spawn_Z] = 1080.2578;

                    HouseData[houseid][House_Spawn_Interior] = 15;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 11: // Burglary house 6
		        {
		            HouseData[houseid][House_Preset_Type] = 11;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 447.1181;
                    HouseData[houseid][House_Inside_Y] = 1397.3279;
                    HouseData[houseid][House_Inside_Z] = 1084.3047;
                    HouseData[houseid][House_Inside_A] = 177.5195;

					HouseData[houseid][House_Price_Money] = 86000;
					HouseData[houseid][House_Price_Coins] = 86;

                    HouseData[houseid][House_Inside_Interior] = 2;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 455.0581;
                    HouseData[houseid][House_Spawn_Y]  = 1400.7732;
                    HouseData[houseid][House_Spawn_Z] = 1084.3080;

                    HouseData[houseid][House_Spawn_Interior] = 2;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 12: // Burglary house 15
		        {
		            HouseData[houseid][House_Preset_Type] = 12;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = -68.9702;
                    HouseData[houseid][House_Inside_Y] = 1351.7024;
                    HouseData[houseid][House_Inside_Z] = 1080.2109;
                    HouseData[houseid][House_Inside_A] = 352.6822;

					HouseData[houseid][House_Price_Money] = 59000;
					HouseData[houseid][House_Price_Coins] = 59;

                    HouseData[houseid][House_Inside_Interior] = 6;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = -70.8925;
                    HouseData[houseid][House_Spawn_Y]  = 1365.7769;
                    HouseData[houseid][House_Spawn_Z] = 1080.2185;

                    HouseData[houseid][House_Spawn_Interior] = 6;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 13: // Burglary house 21
		        {
		            HouseData[houseid][House_Preset_Type] = 13;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 295.0450;
                    HouseData[houseid][House_Inside_Y] = 1472.8169;
                    HouseData[houseid][House_Inside_Z] = 1080.2578;
                    HouseData[houseid][House_Inside_A] = 5.0990;

					HouseData[houseid][House_Price_Money] = 124000;
					HouseData[houseid][House_Price_Coins] = 124;

                    HouseData[houseid][House_Inside_Interior] = 15;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 304.6739;
                    HouseData[houseid][House_Spawn_Y]  = 1473.4836;
                    HouseData[houseid][House_Spawn_Z] = 1080.2578;

                    HouseData[houseid][House_Spawn_Interior] = 15;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 14: // safe house 1
		        {
		            HouseData[houseid][House_Preset_Type] = 14;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2259.7488;
                    HouseData[houseid][House_Inside_Y] = -1135.9084;
                    HouseData[houseid][House_Inside_Z] = 1050.6328;
                    HouseData[houseid][House_Inside_A] = 256.8065;

					HouseData[houseid][House_Price_Money] = 23000;
					HouseData[houseid][House_Price_Coins] = 23;

                    HouseData[houseid][House_Inside_Interior] = 10;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2268.6311;
                    HouseData[houseid][House_Spawn_Y]  = -1136.0083;
                    HouseData[houseid][House_Spawn_Z] = 1050.6403;

                    HouseData[houseid][House_Spawn_Interior] = 10;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
				case 15: // random house
		        {
		            HouseData[houseid][House_Preset_Type] = 15;
		            
		            // ----- SET INTERIOR LOCATION ----- //

		            DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Inside]);

                    HouseData[houseid][House_Inside_X] = 2237.5298;
                    HouseData[houseid][House_Inside_Y] = -1080.8726;
                    HouseData[houseid][House_Inside_Z] = 1049.0234;
                    HouseData[houseid][House_Inside_A] = 343.9421;

					HouseData[houseid][House_Price_Money] = 148000;
					HouseData[houseid][House_Price_Coins] = 148;

                    HouseData[houseid][House_Inside_Interior] = 2;
                    HouseData[houseid][House_Inside_VW] = houseid;

                    HouseData[houseid][House_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z]+0.3, houseid);

                    printf("%d", HouseData[houseid][House_Pickup_ID_Inside]);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i, has had the interior and spawn point both updated", houseid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);

					// ----- SET SPAWN LOCATION ----- //

					HouseData[houseid][House_Spawn_X] = 2244.0947;
                    HouseData[houseid][House_Spawn_Y]  = -1077.7266;
                    HouseData[houseid][House_Spawn_Z] = 1049.0234;

                    HouseData[houseid][House_Spawn_Interior] = 2;
                    HouseData[houseid][House_Spawn_VW] = houseid;

			        new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `house_information` SET `house_inside_x` = '%f', `house_inside_y` = '%f', `house_inside_z` = '%f', `house_inside_interior` = '%i', `house_inside_vw` ='%i', `house_inside_a` = '%f', `house_spawn_x` = '%f', `house_spawn_y` = '%f', `house_spawn_z` = '%f', `house_spawn_interior` = '%i', `house_spawn_vw` = '%i', `house_preset_type` = '%i', `house_price_money` = '%i', `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", HouseData[houseid][House_Inside_X], HouseData[houseid][House_Inside_Y], HouseData[houseid][House_Inside_Z], HouseData[houseid][House_Inside_Interior], HouseData[houseid][House_Inside_VW], HouseData[houseid][House_Inside_A], HouseData[houseid][House_Spawn_X], HouseData[houseid][House_Spawn_Y], HouseData[houseid][House_Spawn_Z], HouseData[houseid][House_Spawn_Interior], HouseData[houseid][House_Spawn_VW], HouseData[houseid][House_Preset_Type], HouseData[houseid][House_Price_Money], HouseData[houseid][House_Price_Coins], houseid);
		    		mysql_tquery(connection, query);
				}
			}
		}
	}
	return 1;
}

CMD:hdelete(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new dvalue[50], avalue[150];

		if(!IsPlayerNearHouseDoor(playerid) || PlayerAtHouseID[playerid] == 0)
		{
		    SendPlayerErrorMessage(playerid, " You are not standing next to a dynamic house!");
		    return 1;
		}
		else
  		{
  		    new hdoorid = PlayerAtHouseID[playerid];
  		    
			DestroyDynamicPickup(HouseData[hdoorid][House_Pickup_ID_Outside]);
			DestroyDynamicPickup(HouseData[hdoorid][House_Pickup_ID_Inside]);

			dvalue = "";
			avalue = "";

			HouseData[hdoorid][House_Price_Money] = 0;
			HouseData[hdoorid][House_Price_Coins] = 0;
			HouseData[hdoorid][House_Owner] = dvalue;
			HouseData[hdoorid][House_Address] = avalue;
			HouseData[hdoorid][House_Sold] = 0;
			HouseData[hdoorid][House_Alarm] = 0;
			HouseData[hdoorid][House_Lock] = 0;
			HouseData[hdoorid][House_Robbed] = 0;
			HouseData[hdoorid][House_Robbed_Value] = 0;
			HouseData[hdoorid][House_Spawn_X] = 0;
	        HouseData[hdoorid][House_Spawn_Y] = 0;
	        HouseData[hdoorid][House_Spawn_Z] = 0;
	        HouseData[hdoorid][House_Spawn_Interior] = 0;
	        HouseData[hdoorid][House_Spawn_VW] = 0;
			HouseData[hdoorid][House_Outside_X] = 0;
	        HouseData[hdoorid][House_Outside_Y] = 0;
	        HouseData[hdoorid][House_Outside_Z] = 0;
	        HouseData[hdoorid][House_Outside_A] = 0;
	        HouseData[hdoorid][House_Outside_Interior] = 0;
	        HouseData[hdoorid][House_Outside_VW] = 0;
	        HouseData[hdoorid][House_Preset_Type] = 0;
	        HouseData[hdoorid][House_Inside_X] = 0;
	        HouseData[hdoorid][House_Inside_Y] = 0;
	        HouseData[hdoorid][House_Inside_Z] = 0;
	        HouseData[hdoorid][House_Inside_A] = 0;
	        HouseData[hdoorid][House_Inside_Interior] = 0;
	        HouseData[hdoorid][House_Inside_VW] = 0;

			new equery[2000];
	        mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_price_money` = '0', `house_price_coins` = '0', `house_owner` = '%s',`house_address` = '%s', `house_sold` = '0', `house_alarm` = '0', `house_lock` = '0', `house_robbed` = '0', `house_robbed_value` = '0', `house_spawn_x` = '0', `house_spawn_y` = '0', `house_spawn_z` = '0', `house_spawn_interior` = '0', `house_spawn_vw` = '0', `house_outside_x` = '0', `house_outside_y` = '0', `house_outside_z` = '0', `house_outside_interior` = '0', `house_outside_vw` = '0', `house_inside_x` = '0', `house_inside_y` = '0', `house_inside_z` = '0', `house_inside_interior` = '0', `house_inside_vw` = '0', `house_preset_type` = '0' WHERE `house_id` = '%i' LIMIT 1", dvalue, avalue, hdoorid);
	  		mysql_tquery(connection, equery);

    		new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The House ID: %i has been deleted", hdoorid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			PlayerAtHouseID[playerid] = 0;
		}
	}
	return 1;
}

CMD:hsetaddress(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new houseid, value[150];

		if(sscanf(params, "is", houseid, value))
		{
			SendPlayerTipMessage(playerid, " /hsetaddress [houseid] [value]");
		}
		else
		{
		    HouseData[houseid][House_Address] = value;
		    
			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated House ID: %i address to be %s", houseid, value);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			new equery[2000];
   			mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_address` = '%s' WHERE `house_id` = '%i' LIMIT 1", value, houseid);
			mysql_tquery(connection, equery);
		}
	}
	return 1;
}

CMD:hsetcost(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new houseid, option1, value;

		if(sscanf(params, "iii", houseid, option1, value))
		{
			SendPlayerTipMessage(playerid, " /sethousecost [houseid] [option] [value]");
			SendPlayerTipMessage(playerid, " Options: [Coins (1) | Money (2)]");
		}
		else
		{
		    switch(option1)
		    {
		        case 1:
		        {
		            HouseData[houseid][House_Price_Coins] = value;

		            new equery[2000];
			        mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_price_coins` = '%i' WHERE `house_id` = '%i' LIMIT 1", value, houseid);
			  		mysql_tquery(connection, equery);
		        
		            new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} House ID: %i has been updated with a new coin cost of: %i", houseid, value);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
		        }
		        case 2:
		        {
		            HouseData[houseid][House_Price_Money] = value;

		            new equery[2000];
			        mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_price_money` = '%i' WHERE `house_id` = '%i' LIMIT 1", value, houseid);
			  		mysql_tquery(connection, equery);

		            new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} House ID: %i has been updated with a new money cost of: %i", houseid, value);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
		        }
		    }
		}
	}
	return 1;
}

CMD:hsetowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new houseid, targetid;

		if(sscanf(params,"ii", targetid, houseid))
		{
		    SendPlayerTipMessage(playerid, " /hsetowner [player id] [house id]");
		}
		else
		{
		    if(IsPlayerLogged[targetid] == 0) return SendPlayerErrorMessage(playerid, " You need to provide an online player id!");
		    else
		    {
		        DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Outside]);
		        HouseData[houseid][House_Pickup_ID_Outside] = CreateDynamicPickup(1272, 1,HouseData[houseid][House_Outside_X], HouseData[houseid][House_Outside_Y], HouseData[houseid][House_Outside_Z], -1);

			    new equery[2000];
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_owner` = '%e', `house_sold` = '1' WHERE `house_id` = '%i' LIMIT 1", PlayerData[targetid][Character_Name], houseid);
				mysql_tquery(connection, equery);
				
				new namestring[50];
				namestring = GetName(targetid);
				
				HouseData[houseid][House_Owner] = namestring;
				HouseData[houseid][House_Sold] = 1;
				
		    	printf("%s", namestring);

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just set player(ID: %i, Name: %s) owner of property id: %i", targetid, PlayerData[targetid][Character_Name], houseid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);

				format(dstring, sizeof(dstring), "> You have just been given ownership of property %s", HouseData[houseid][House_Address]);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
			}
		}
	}
	return 1;
}

CMD:hremoveowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new houseid, targetid;

		if(sscanf(params,"ii", targetid, houseid))
		{
		    SendPlayerTipMessage(playerid, " /hremoveowner [player id] [house id]");
		}
		else
		{
		    if(IsPlayerLogged[targetid] == 0) return SendPlayerErrorMessage(playerid, " You need to provide an online player id!");
		    else
		    {
		        DestroyDynamicPickup(HouseData[houseid][House_Pickup_ID_Outside]);
		        HouseData[houseid][House_Pickup_ID_Outside] = CreateDynamicPickup(1273, 1,HouseData[houseid][House_Outside_X], HouseData[houseid][House_Outside_Y], HouseData[houseid][House_Outside_Z], -1);

			    new equery[2000];
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `house_information` SET `house_owner` = '', `house_sold` = '0' WHERE `house_id` = '%i' LIMIT 1", PlayerData[targetid][Character_Name], houseid);
				mysql_tquery(connection, equery);

				new namestring[50];
				namestring = "";

				HouseData[houseid][House_Owner] = namestring;
				HouseData[houseid][House_Sold] = 0;

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just removed player(ID: %i, Name: %s) from house id: %i", targetid, PlayerData[targetid][Character_Name], houseid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);

				format(dstring, sizeof(dstring), "> An admin has just removed you from property: %s", HouseData[houseid][House_Address]);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
			}
		}
	}
	return 1;
}

CMD:bnext(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new query[128];
	    mysql_format(connection, query, sizeof(query), "SELECT * FROM `business_information` WHERE `business_outside_x` = '0' LIMIT 1");
		mysql_tquery(connection, query, "GetNextBusinessID");
	}
	return 1;
}

CMD:binfo(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new businessid;

		if(sscanf(params, "i", businessid))
		{
			SendPlayerTipMessage(playerid, " /binfo [businessid]");
		}
		else
		{
			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Business ID that you have searched for %i, is named: %s and owned by: %s", businessid, BusinessData[businessid][Business_Name], BusinessData[businessid][Business_Owner]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
		}
	}
	return 1;
}

CMD:bedit(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new businessid, value1;
		new Float:x, Float:y, Float:z, Float:a;
		new intid, vwid;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		intid = GetPlayerInterior(playerid);
		vwid = GetPlayerVirtualWorld(playerid);

		if(sscanf(params, "ii", businessid, value1))
		{
			SendPlayerTipMessage(playerid, " /bedit [businessid] [option]");
			SendPlayerTipMessage(playerid, " Options: [Exterior Door (1) | Interior Door (2) | Buy Point (3)");
		}
		else
		{
		    switch (value1)
		    {
		        case 1:
		        {
		            DestroyDynamicPickup(BusinessData[businessid][Business_Pickup_ID_Outside]);

                    BusinessData[businessid][Business_Outside_X] = x;
                    BusinessData[businessid][Business_Outside_Y] = y;
                    BusinessData[businessid][Business_Outside_Z] = z;
                    BusinessData[businessid][Business_Outside_A] = a;

                    BusinessData[businessid][Business_Outside_Interior] = intid;
                    BusinessData[businessid][Business_Outside_VW] = vwid;

                    if(BusinessData[businessid][Business_Outside_X] != 0 && BusinessData[businessid][Business_Sold] == 0)
			      	{
			     	    BusinessData[businessid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19523, 1,BusinessData[businessid][Business_Outside_X], BusinessData[businessid][Business_Outside_Y], BusinessData[businessid][Business_Outside_Z], -1);
					}
			        if(BusinessData[businessid][Business_Outside_X] != 0 && BusinessData[businessid][Business_Sold] == 1)
			      	{
			     	    BusinessData[businessid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19522, 1,BusinessData[businessid][Business_Outside_X], BusinessData[businessid][Business_Outside_Y], BusinessData[businessid][Business_Outside_Z], -1);
					}

                    printf("%i", BusinessData[businessid][Business_Pickup_ID_Outside]);

                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `business_information` SET `business_outside_x` = '%f', `business_outside_y` = '%f', `business_outside_z` = '%f', `business_outside_interior` = '%i', `business_outside_vw` ='%i', `business_outside_a` = '%f' WHERE `business_id` = '%i' LIMIT 1", BusinessData[businessid][Business_Outside_X], BusinessData[businessid][Business_Outside_Y], BusinessData[businessid][Business_Outside_Z], BusinessData[businessid][Business_Outside_Interior], BusinessData[businessid][Business_Outside_VW], BusinessData[businessid][Business_Outside_A], businessid);
		    		mysql_tquery(connection, query);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Business ID: %i, has had the exterior location changed to your spot", businessid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
				}
				case 2:
		        {
		            DestroyDynamicPickup(BusinessData[businessid][Business_Pickup_ID_Inside]);

                    BusinessData[businessid][Business_Inside_X] = x;
                    BusinessData[businessid][Business_Inside_Y] = y;
                    BusinessData[businessid][Business_Inside_Z] = z;
                    BusinessData[businessid][Business_Inside_A] = a;

                    BusinessData[businessid][Business_Inside_Interior] = intid;
                    BusinessData[businessid][Business_Inside_VW] = businessid;

                    BusinessData[businessid][Business_Pickup_ID_Inside] = CreateDynamicPickup(19198, 1,BusinessData[businessid][Business_Inside_X], BusinessData[businessid][Business_Inside_Y], BusinessData[businessid][Business_Inside_Z]+0.5, businessid);

                    printf("%i", BusinessData[businessid][Business_Pickup_ID_Inside]);

                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `business_information` SET `business_inside_x` = '%f', `business_inside_y` = '%f', `business_inside_z` = '%f', `business_inside_interior` = '%i', `business_inside_vw` ='%i', `business_inside_a` = '%f' WHERE `business_id` = '%i' LIMIT 1", BusinessData[businessid][Business_Inside_X], BusinessData[businessid][Business_Inside_Y], BusinessData[businessid][Business_Inside_Z], BusinessData[businessid][Business_Inside_Interior], BusinessData[businessid][Business_Inside_VW], BusinessData[businessid][Business_Inside_A], businessid);
		    		mysql_tquery(connection, query);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Business ID: %i, has had the interior location changed to your spot", businessid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
    			}
    			case 3:
			   {
			        BusinessData[businessid][Business_BuyPoint_X] = x;
                    BusinessData[businessid][Business_BuyPoint_Y] = y;
                    BusinessData[businessid][Business_BuyPoint_Z] = z;

                    CreateDynamicPickup(1274, 1,BusinessData[businessid][Business_BuyPoint_X], BusinessData[businessid][Business_BuyPoint_Y], BusinessData[businessid][Business_BuyPoint_Z], businessid);

                    new query[2000];
			        mysql_format(connection, query, sizeof(query), "UPDATE `business_information` SET `business_buypoint_x` = '%f', `business_buypoint_y` = '%f', `business_buypoint_z` = '%f' WHERE `business_id` = '%i' LIMIT 1", BusinessData[businessid][Business_BuyPoint_X], BusinessData[businessid][Business_BuyPoint_Y], BusinessData[businessid][Business_BuyPoint_Z], businessid);
		    		mysql_tquery(connection, query);

		    		new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Business ID: %i, has had this business buy point changed to your spot", businessid);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
			   }
			}
		}
	}
	return 1;
}

CMD:bdelete(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new dvalue[50], avalue[50];

		if(!IsPlayerNearBusinessDoor(playerid) || PlayerAtBusinessID[playerid] == 0)
		{
		    SendPlayerErrorMessage(playerid, " You are not standing next to a dynamic business!");
		    return 1;
		}
		else
  		{
  		    new bdoorid = PlayerAtBusinessID[playerid];

			DestroyDynamicPickup(BusinessData[bdoorid][Business_Pickup_ID_Outside]);
			DestroyDynamicPickup(BusinessData[bdoorid][Business_Pickup_ID_Inside]);

			dvalue = "";
			avalue = "";

			BusinessData[bdoorid][Business_Price_Money] = 0;
			BusinessData[bdoorid][Business_Price_Coins] = 0;
			BusinessData[bdoorid][Business_Owner] = dvalue;
			BusinessData[bdoorid][Business_Name] = avalue;
			BusinessData[bdoorid][Business_Sold] = 0;
			BusinessData[bdoorid][Business_Alarm] = 0;
			BusinessData[bdoorid][Business_Type] = 0;
			BusinessData[bdoorid][Business_Robbed] = 0;
			BusinessData[bdoorid][Business_Robbed_Value] = 0;
			BusinessData[bdoorid][Business_Outside_X] = 0;
	        BusinessData[bdoorid][Business_Outside_Y] = 0;
	        BusinessData[bdoorid][Business_Outside_Z] = 0;
	        BusinessData[bdoorid][Business_Outside_A] = 0;
	        BusinessData[bdoorid][Business_Outside_Interior] = 0;
	        BusinessData[bdoorid][Business_Outside_VW] = 0;
	        BusinessData[bdoorid][Business_Inside_X] = 0;
	        BusinessData[bdoorid][Business_Inside_Y] = 0;
	        BusinessData[bdoorid][Business_Inside_Z] = 0;
	        BusinessData[bdoorid][Business_Inside_A] = 0;
	        BusinessData[bdoorid][Business_Inside_Interior] = 0;
	        BusinessData[bdoorid][Business_Inside_VW] = 0;

			new equery[2000];
	        mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_price_money` = '0', `business_price_coins` = '0', `business_owner` = '%s',`business_name` = '%s', `business_sold` = '0', `business_alarm` = '0', `business_type` = '0', `business_robbed` = '0', `business_robbed_value` = '0', `business_outside_x` = '0', `business_outside_y` = '0', `business_outside_z` = '0', `business_outside_interior` = '0', `business_outside_vw` = '0', `business_inside_x` = '0', `business_inside_y` = '0', `business_inside_z` = '0', `business_inside_interior` = '0', `business_inside_vw` = '0' WHERE `business_id` = '%i' LIMIT 1", dvalue, avalue, bdoorid);
	  		mysql_tquery(connection, equery);

    		new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Business ID: %i has been deleted", bdoorid);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);

			PlayerAtBusinessID[playerid] = 0;
		}
	}
	return 1;
}

CMD:bsetname(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new businessid, value[50];

		if(sscanf(params, "is", businessid, value))
		{
			SendPlayerTipMessage(playerid, " /bsetname [businessid] [value]");
		}
		else
		{
		    BusinessData[businessid][Business_Name] = value;

			new dstring[256];
			format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have updated Business ID: %i name to be %s", businessid, BusinessData[businessid][Business_Owner]);
			SendClientMessage(playerid, COLOR_ORANGE, dstring);
			
			new equery[2000];
		    mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_name` = '%s' WHERE `business_id` = '%i' LIMIT 1", value, businessid);
			mysql_tquery(connection, equery);
		}
	}
	return 1;
}

CMD:bsetcost(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
    if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
		new businessid, option1, value;

		if(sscanf(params, "iii", businessid, option1, value))
		{
			SendPlayerTipMessage(playerid, " /bsetcost [businessid] [option] [value]");
			SendPlayerTipMessage(playerid, " Options: [Coins (1) | Money (2)]");
		}
		else
		{
		    switch(option1)
		    {
		        case 1:
		        {
		            BusinessData[businessid][Business_Price_Coins] = value;
			
					new equery[2000];
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_price_coins` = '%i' WHERE `business_id` = '%i' LIMIT 1", value, businessid);
					mysql_tquery(connection, equery);

		            new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} Business ID: %i has been updated with a new coin cost of: %i", businessid, value);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
		        }
		        case 2:
		        {
		            BusinessData[businessid][Business_Price_Money] = value;
			
					new equery[2000];
		      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_price_money` = '%i' WHERE `business_id` = '%i' LIMIT 1", value, businessid);
					mysql_tquery(connection, equery);

		            new dstring[256];
					format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} Business ID: %i has been updated with a new money cost of: %i", businessid, value);
					SendClientMessage(playerid, COLOR_ORANGE, dstring);
		        }
		    }
		}
	}
	return 1;
}

CMD:bsettype(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new businessid, biztype;

		if(sscanf(params,"ii", businessid, biztype))
		{
		    SendPlayerTipMessage(playerid, " /bsettype [businessid] [type]");
		    SendPlayerTipMessage(playerid, " Options: [24/7 (1) | Supermarket (2) | Electronic Store (3)]");
		    SendPlayerTipMessage(playerid, " Options: [Food (4) | Bar (5) | Clothing 1 (6) | Ammunation (7)]");
		    SendPlayerTipMessage(playerid, " Options: [Donuts (8) | Clothing 2 (9) | Dealership 1 (10) | Dealership 2 (11)]");
		    SendPlayerTipMessage(playerid, " Options: [Bike Shop (12)]");
		}
		else
		{
		    if(biztype < 1 || biztype > 20) return SendPlayerErrorMessage(playerid, " You need to select a valid business type ID that can be used in-game!");
		    else
		    {
				BusinessData[businessid][Business_Type] = biztype;

		    	new equery[2000];
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_type` = '%i' WHERE `business_id` = '%i' LIMIT 1", BusinessData[businessid][Business_Type], businessid);
				mysql_tquery(connection, equery);

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} The Business ID: %i, has had the business type changed to status: %i", businessid, BusinessData[businessid][Business_Type]);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);
			}
		}
	}
	return 1;
}

CMD:bsetowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new businessid, targetid;

		if(sscanf(params,"ii", targetid, businessid))
		{
		    SendPlayerTipMessage(playerid, " /bsetowner [player id] [busines id]");
		}
		else
		{
		    if(IsPlayerLogged[targetid] == 0) return SendPlayerErrorMessage(playerid, " You need to provide an online player id!");
		    else
		    {
		        DestroyDynamicPickup(BusinessData[businessid][Business_Pickup_ID_Outside]);
		        BusinessData[businessid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19198, 1,BusinessData[businessid][Business_Outside_X], BusinessData[businessid][Business_Outside_Y], BusinessData[businessid][Business_Outside_Z]+0.3, -1);

			    new equery[2000];
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_owner` = '%e', `business_sold` = '1' WHERE `business_id` = '%i'", PlayerData[targetid][Character_Name], businessid);
				mysql_tquery(connection, equery);

				new namestring[50];
				namestring = GetName(targetid);

				BusinessData[businessid][Business_Owner] = namestring;
				BusinessData[businessid][Business_Sold] = 1;

		    	printf("%s", namestring);

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just set player(ID: %i, Name: %s) owner of business id: %i", targetid, PlayerData[targetid][Character_Name], businessid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);

				format(dstring, sizeof(dstring), "> You have just been given ownership of business %s", BusinessData[businessid][Business_Name]);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
			}
		}
	}
	return 1;
}

CMD:bremoveowner(playerid, params[])
{
	if(IsPlayerLogged[playerid] == 0) return SendPlayerErrorMessage(playerid, " You need to be logged in before using this command!");
	if(PlayerData[playerid][Admin_Level] < 6) return SendPlayerErrorMessage(playerid, " You do not have access to this feature!");
	{
	    new businessid, targetid;

		if(sscanf(params,"ii", targetid, businessid))
		{
		    SendPlayerTipMessage(playerid, " /bremoveowner [player id] [business id]");
		}
		else
		{
		    if(IsPlayerLogged[targetid] == 0) return SendPlayerErrorMessage(playerid, " You need to provide an online player id!");
		    else
		    {
		        DestroyDynamicPickup(BusinessData[businessid][Business_Pickup_ID_Outside]);
		        BusinessData[businessid][Business_Pickup_ID_Outside] = CreateDynamicPickup(19523, 1,BusinessData[businessid][Business_Outside_X], BusinessData[businessid][Business_Outside_Y], BusinessData[businessid][Business_Outside_Z], -1);
				
			    new equery[2000];
	      		mysql_format(connection, equery, sizeof(equery), "UPDATE `business_information` SET `business_owner` = '0', `business_sold` = '0' WHERE `business_id` = '%i' LIMIT 1", businessid);
				mysql_tquery(connection, equery);

				new namestring[50];
				namestring = "";

				BusinessData[businessid][Business_Owner] = namestring;
				BusinessData[businessid][Business_Sold] = 0;

				new dstring[256];
				format(dstring, sizeof(dstring), "[SERVER]:{FFFFFF} You have just removed player(ID: %i, Name: %s) from business id: %i", targetid, PlayerData[targetid][Character_Name], businessid);
				SendClientMessage(playerid, COLOR_ORANGE, dstring);

				format(dstring, sizeof(dstring), "> An admin has just removed you from business: %s", BusinessData[businessid][Business_Name]);
				SendClientMessage(targetid, COLOR_YELLOW, dstring);
			}
		}
	}
	return 1;
}

